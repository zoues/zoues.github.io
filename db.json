{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/robots.txt","path":"robots.txt","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/hexo-theme-next/source/css/flexslider.css","path":"css/flexslider.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/css/font-awesome.min.css","path":"css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/css/lightbox.css","path":"css/lightbox.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/css/owl.carousel.css","path":"css/owl.carousel.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/css/owl.theme.css","path":"css/owl.theme.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.jpg","path":"images/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/jflickrfeed.min.js","path":"js/jflickrfeed.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/jquery-migrate.min.js","path":"js/jquery-migrate.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/jquery.form.min.js","path":"js/jquery.form.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/jquery.js","path":"js/jquery.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/LICENSE","path":"lib/Han/LICENSE","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/README.md","path":"lib/Han/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/bookmark/LICENSE","path":"lib/bookmark/LICENSE","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/bookmark/README.md","path":"lib/bookmark/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/bookmark/bookmark.min.js","path":"lib/bookmark/bookmark.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/bookmark/index.js","path":"lib/bookmark/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/bookmark/package.json","path":"lib/bookmark/package.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/LICENSE","path":"lib/canvas-nest/LICENSE","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/README.md","path":"lib/canvas-nest/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest-nomobile.min.js","path":"lib/canvas-nest/canvas-nest-nomobile.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/LICENSE","path":"lib/reading_progress/LICENSE","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/README.md","path":"lib/reading_progress/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/package.json","path":"lib/reading_progress/package.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/reading_progress.js","path":"lib/reading_progress/reading_progress.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/reading_progress.min.js","path":"lib/reading_progress/reading_progress.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/LICENSE","path":"lib/three/LICENSE","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/README.md","path":"lib/three/README.md","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/gulpfile.js","path":"lib/three/gulpfile.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/package.json","path":"lib/three/package.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/yarn.lock","path":"lib/three/yarn.lock","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/lib/CanvasRenderer.js","path":"lib/three/lib/CanvasRenderer.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/lib/Projector.js","path":"lib/three/lib/Projector.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/src/canvas_lines.js","path":"lib/three/src/canvas_lines.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/src/canvas_sphere.js","path":"lib/three/src/canvas_sphere.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/src/three-waves.js","path":"lib/three/src/three-waves.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/background.png","path":"images/background.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/header-background.jpg","path":"images/header-background.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/mountains-nature-sun-valley-rivers-skyscapes-cloud.png","path":"images/mountains-nature-sun-valley-rivers-skyscapes-cloud.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/css/main_style.css","path":"css/main_style.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/css/bootstrap.min.css","path":"css/bootstrap.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/css/styles.css","path":"css/styles.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/close.png","path":"images/close.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/next.png","path":"images/next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/prev.png","path":"images/prev.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/fonts/fontawesome-webfont.woff2?v=4.5.0","path":"fonts/fontawesome-webfont.woff2?v=4.5.0","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/css/options.css","path":"css/options.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.png","path":"images/logo.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/css/style1.css","path":"css/style1.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/css/cff-style.css","path":"css/cff-style.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/css/classic.css","path":"css/classic.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/author.jpg","path":"images/author.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/1.jpg","path":"images/1.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/1152705a12fb12503720e0bb05f1ca79.jpg","path":"images/1152705a12fb12503720e0bb05f1ca79.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/11843368213_6c58b49694_b-620x300.jpg","path":"images/11843368213_6c58b49694_b-620x300.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/17818158_1174996802628213_4662550512955031552_n.jpg","path":"images/17818158_1174996802628213_4662550512955031552_n.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/18011985_194692447716449_4036966420095959040_n.jpg","path":"images/18011985_194692447716449_4036966420095959040_n.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/18095990_1760655587597268_1212529865354379264_n.jpg","path":"images/18095990_1760655587597268_1212529865354379264_n.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/18096488_1830607597262728_5575911188606222336_n.jpg","path":"images/18096488_1830607597262728_5575911188606222336_n.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/18251563_1436576526404535_5034524337537810432_n.jpg","path":"images/18251563_1436576526404535_5034524337537810432_n.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/18251816_455478884802616_4846069457581244416_n.jpg","path":"images/18251816_455478884802616_4846069457581244416_n.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/18298992_1905071053110183_5124787653698387968_n.jpg","path":"images/18298992_1905071053110183_5124787653698387968_n.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/18299179_125245014697150_1635022718770348032_n.jpg","path":"images/18299179_125245014697150_1635022718770348032_n.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/1a05816e011a83c0f5d0b1384db57d6f-620x300.jpg","path":"images/1a05816e011a83c0f5d0b1384db57d6f-620x300.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/2.jpg","path":"images/2.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/260f54ad745397d5eaf5265368610c32.jpg","path":"images/260f54ad745397d5eaf5265368610c32.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/3.jpg","path":"images/3.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/4.jpg","path":"images/4.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/4aa2aae13be4978069e5e2bd87818f76-1024x652.jpg","path":"images/4aa2aae13be4978069e5e2bd87818f76-1024x652.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/6.jpg","path":"images/6.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/9583859_120x120.jpg","path":"images/9583859_120x120.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/A7G_Pk7bZm81-620x300.jpg","path":"images/A7G_Pk7bZm81-620x300.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/photo-1428908728789-d2de25dbd4e2-e1434466699552-620x300.jpg","path":"images/photo-1428908728789-d2de25dbd4e2-e1434466699552-620x300.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/photo-1429637119272-20043840c013-620x300.jpg","path":"images/photo-1429637119272-20043840c013-620x300.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/post4-620x300.jpg","path":"images/post4-620x300.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/post5-620x300.jpg","path":"images/post5-620x300.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/picture","path":"images/picture","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/101147714.html","path":"images/101147714.html","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/custom.js","path":"js/custom.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/menu.js","path":"js/menu.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/wechat-qcode.png","path":"images/wechat-qcode.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/wechatpay.jpg","path":"images/wechatpay.jpg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/Valine.min.js","path":"js/Valine.min.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"5c3712231060797da4a4b5b834439aaf809653e8","modified":1558047387000},{"_id":"source/CNAME","hash":"27ccdd6482836d9fff4a6b5c86451c69ceed2cf1","modified":1558095674729},{"_id":"source/google11af67ed2a64f239.html","hash":"a809d6a297f80d5f98db386f876ec09ae5d49c89","modified":1558047387000},{"_id":"source/robots.txt","hash":"3684d3bc44ec384dbc3d382251ab59c942de6331","modified":1558095696586},{"_id":"themes/hexo-theme-next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1558047867000},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1558047867000},{"_id":"themes/hexo-theme-next/.eslintrc.json","hash":"cc5f297f0322672fe3f684f823bc4659e4a54c41","modified":1558047867000},{"_id":"themes/hexo-theme-next/.git","hash":"3425b125179f900ab9d79c9d7c71331936367a72","modified":1558047867000},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1558047867000},{"_id":"themes/hexo-theme-next/.gitignore","hash":"a18c2e83bb20991b899b58e6aeadcb87dd8aa16e","modified":1558047867000},{"_id":"themes/hexo-theme-next/.stickler.yml","hash":"b7939095038cbdc4883fc10950e163a60a643b43","modified":1558047867000},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1558047867000},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"3d1dc928c4a97933e64379cfde749dedf62f252c","modified":1558047867000},{"_id":"themes/hexo-theme-next/LICENSE.md","hash":"fc7227c508af3351120181cbf2f9b99dc41f063e","modified":1558047867000},{"_id":"themes/hexo-theme-next/README.md","hash":"807c28ad6473b221101251d244aa08e2a61b0d60","modified":1558047867000},{"_id":"themes/hexo-theme-next/_config.yml","hash":"b103c42cd54c0144ec32e9e62a443938e1545ab6","modified":1558602568680},{"_id":"themes/hexo-theme-next/bower.json","hash":"a8c832da6aad5245052aed7ff26c246f85d68c6c","modified":1558047867000},{"_id":"themes/hexo-theme-next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1558047867000},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"48d2f9fa88a4210308fc41cc7d3f6d53989f71b7","modified":1558047867000},{"_id":"themes/hexo-theme-next/package.json","hash":"11a0b27f92da8abf1efbea6e7a0af4271d7bff9e","modified":1558047867000},{"_id":"source/favicon.ico","hash":"e004748c3b7baf71c8e3e714e92da6bc3b2c653a","modified":1558047387000},{"_id":"source/_drafts/Apache-HttpClient引发的血案.md","hash":"bf8b2d432876aad3651a1977c280832cbbd47ee4","modified":1558047387000},{"_id":"source/_drafts/Gradle、Maven项目相互转换.md","hash":"bef4a2addf6f86a56c6e4b5c1586aca9434db32b","modified":1558047387000},{"_id":"source/_drafts/RestTemplate基本使用.md","hash":"c0e8e2cfac503fd250c5ee01050b6469680ae6f0","modified":1558047387000},{"_id":"source/_drafts/SSH命令的几种使用姿势.md","hash":"bb1074b99daf8f3bbce3acd15cc232f78f4de9ff","modified":1558047387000},{"_id":"source/_drafts/使用Docker加速你的Proxy部署.md","hash":"d9e77d9a3ef4dea7a60a4bcb27390d9fb96c00ad","modified":1558047387000},{"_id":"source/_drafts/常见的几种排序算法.md","hash":"00dc8eb29b2f11dcb035bd85bc1f0cd9edc1c183","modified":1558047387000},{"_id":"source/about/index.md","hash":"8599eca777f54f7a8cc0742bb1673bdc060a48d7","modified":1558047387000},{"_id":"source/_posts/Android-Studio支持生成Java-Native方法签名.md","hash":"b2e6cad213a41fe3ed45d5fbe40f98e3c70d69fa","modified":1558047387000},{"_id":"source/_posts/AndroidProcessbeKilledweShoudIDo.md","hash":"b4d27fd1819abf087a4c13a5266d438a6b003b3b","modified":1558047387000},{"_id":"source/_posts/Android之Keystore文件签名.md","hash":"82306a99aa1a6b582455ca8e6e5b53f3614ee751","modified":1558047387000},{"_id":"source/_posts/Android应用关闭所有Activity.md","hash":"5a2f8681a50202ef22fc5cb63af4c013efa95e02","modified":1558047387000},{"_id":"source/_posts/Create-a-Simple-Android-Keyboard.md","hash":"7586e12abb5d8a12a757595693d908a2c0f835e9","modified":1558047387000},{"_id":"source/_posts/Create-an-Android-IME.md","hash":"214ea60a03796ab83ba2dc1ae2748e4d05fb0e78","modified":1558047387000},{"_id":"source/_posts/Debian下配置exim4-邮件服务器.md","hash":"82b5337429a38a5557a9c696c8986e7acbc6ae44","modified":1558047387000},{"_id":"source/_posts/Docker-Compose-链接外部容器的几种方式.md","hash":"077ecd6108aae7c88e4198f937af25d20ff6f9eb","modified":1558047387000},{"_id":"source/_posts/Docker非Root用户运行.md","hash":"2d2ccc2abd8e97c833cf6ef6a185bb2ca5943d4d","modified":1558047387000},{"_id":"source/_posts/EditPlus-Licenses在线生成器.md","hash":"b15c239045277a8e0ad36efd00642f69f5aacfb6","modified":1558047387000},{"_id":"source/_posts/FFmpeg折腾笔记之编译FFmpeg.md","hash":"c4b7c0bb112945ffefd0e3fdeec4f894f5c78722","modified":1558047387000},{"_id":"source/_posts/Git常用命令.md","hash":"35bc1472c3b52f8b93400c2dc19dc2a4ce4bec34","modified":1558047387000},{"_id":"source/_posts/Gradle、Maven项目相互转换.md","hash":"75d37c2c8d87ed1f4c3fa18cea74da731d75fd01","modified":1558047387000},{"_id":"source/_posts/Hexo添加文章时自动打开编辑器.md","hash":"7557b0a4cd8716c4e205392f4e08f238281713ea","modified":1558047387000},{"_id":"source/_posts/Kubernetes集群之路之TLS证书配置.md","hash":"2b4623cff3858b30d5928b6c287c89e10f094e1b","modified":1558047387000},{"_id":"source/_posts/Linux-学习笔记-软件包管理.md","hash":"ccfe0a618a56de0342da1eccdbc2332a5f2dc0d5","modified":1558047387000},{"_id":"source/_posts/MySQL开启远程访问权限.md","hash":"cb00a1c7b787588aadff1190ccf302008568ddf5","modified":1558047387000},{"_id":"source/_posts/Mac自带VNC-Client.md","hash":"d8b82b188369e06e20dc3ed0d4d0525d251218fc","modified":1558047387000},{"_id":"source/_posts/Shell学习笔记.md","hash":"1ccd1b0ff8e6e481d0185ff35df813d4bfc4cbb9","modified":1558047387000},{"_id":"source/_posts/RxJava配合Retofit接收错误body.md","hash":"19d57e7e3128d4ede10610fb1f03759328a76bee","modified":1558047387000},{"_id":"source/_posts/Spring-Boot使用Swagger自动生成Api-Doc.md","hash":"57f2b1b2da6e2f9a11838ab6bc293121e1f09545","modified":1558047387000},{"_id":"source/_posts/kubernetes集群之路etcd集群部署.md","hash":"f2f7c05df92ee38b56872d8c50669873454a5c28","modified":1558359920907},{"_id":"source/_posts/android-常用代码片段.md","hash":"4c2841715f6438f3661e0f1b07b6c6b89e380f52","modified":1558047387000},{"_id":"source/_posts/lua读取redis数据的null判断.md","hash":"5f2497207bda38ae194cc0edf5d175b73fb7f6f0","modified":1558047387000},{"_id":"source/_posts/为NexT主题添加文章阅读量统计功能.md","hash":"168fa0b62755279156f0901840cddcfd4bf3f429","modified":1558047387000},{"_id":"source/_posts/基于Debian-Linux搭建Git服务器.md","hash":"f6b0b66add648ce19cc0344e552a580eb4fe4c7c","modified":1558047387000},{"_id":"source/_posts/基于LeanCloud、Telegram实现多说评论推送.md","hash":"4d35bfef5fb7c557fc79652901e448b1bd1a1304","modified":1558047387000},{"_id":"source/_posts/备份Hexo博客源文件.md","hash":"0a079b1c14b9235014d28482fd642dbb317e5346","modified":1558047387000},{"_id":"source/_posts/多说主动邮件提醒.md","hash":"e40f822e702d853f6a4e45fdf26262e2f93930b4","modified":1558047387000},{"_id":"source/_posts/常见的开源许可证区别.md","hash":"ebf6e1c561f8370883dea36c9cb50d463f2128f3","modified":1558047387000},{"_id":"source/_posts/欢迎光临我的博客.md","hash":"2001e7979b5d3509f12ea4901302773ef41d49d1","modified":1558047387000},{"_id":"source/_posts/开启Git大小写敏感.md","hash":"85c3b3af2d2b8dd25242ad7c90864d1b66e71ef3","modified":1558047387000},{"_id":"source/_posts/聊聊Mybatis-Update操作返回值.md","hash":"218f91d684193fc6bba366b3940cd20479549e26","modified":1558047387000},{"_id":"source/_posts/自动备份Hexo博客源文件.md","hash":"f90862680d1d16a14ee67d7f8c241f8c12c77302","modified":1558047387000},{"_id":"source/_posts/解决Git-refusing-to-merge-unrelated-histories问题.md","hash":"a31f5dc9ab7c68ba4d88054f3a51ebdb9b0745d0","modified":1558047387000},{"_id":"source/_posts/解决Mysql的Python驱动安装失败.md","hash":"4338ba17d2d5c257f11cf6ab9f17ee00758472a8","modified":1558047387000},{"_id":"source/categories/index.md","hash":"96dad421508a590c22f00eb6b758f10db27ea0a3","modified":1558047387000},{"_id":"source/js/editplusgenkey.js","hash":"2982c20a5f1bd21cadef50c159fbcd561b2cd1c9","modified":1558047387000},{"_id":"source/tags/index.md","hash":"a51614dcac6f7d71ce88aa19317ff8f59ec5154e","modified":1558047387000},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"f846118d7fc68c053df47b24e1f661241645373f","modified":1558047867000},{"_id":"themes/hexo-theme-next/.github/CODE_OF_CONDUCT.md","hash":"b63696d41f022525e40d7e7870c3785b6bc7536b","modified":1558047867000},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE.md","hash":"00c25366764e6b9ccb40b877c60dc13b2916bbf7","modified":1558047867000},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"7abbb4c8a29b2c14e576a00f53dbc0b4f5669c13","modified":1558047867000},{"_id":"themes/hexo-theme-next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1558047867000},{"_id":"themes/hexo-theme-next/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1558047867000},{"_id":"themes/hexo-theme-next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1558047867000},{"_id":"themes/hexo-theme-next/docs/ALGOLIA-SEARCH.md","hash":"141e989844d0b5ae2e09fb162a280715afb39b0d","modified":1558047867000},{"_id":"themes/hexo-theme-next/docs/AUTHORS.md","hash":"7b24be2891167bdedb9284a682c2344ec63e50b5","modified":1558047867000},{"_id":"themes/hexo-theme-next/docs/DATA-FILES.md","hash":"8e1962dd3e1b700169b3ae5bba43992f100651ce","modified":1558047867000},{"_id":"themes/hexo-theme-next/docs/INSTALLATION.md","hash":"2bbdd6c1751b2b42ce9b9335da420c6026a483e9","modified":1558047867000},{"_id":"themes/hexo-theme-next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"120750c03ec30ccaa470b113bbe39f3d423c67f0","modified":1558047867000},{"_id":"themes/hexo-theme-next/docs/LICENSE","hash":"fe607fe22fc9308f6434b892a7f2d2c5514b8f0d","modified":1558047867000},{"_id":"themes/hexo-theme-next/docs/MATH.md","hash":"0ae4258950de01a457ea8123a8d13ec6db496e53","modified":1558047867000},{"_id":"themes/hexo-theme-next/docs/UPDATE-FROM-5.1.X.md","hash":"ad57c168d12ba01cf144a1ea0627b2ffd1847d3e","modified":1558047867000},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"fb478c5040a4e58a4c1ad5fb52a91e5983d65a3a","modified":1558047867000},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1558047867000},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"c540c3a0d7db2d4239293c8783881962640b6c34","modified":1558047867000},{"_id":"themes/hexo-theme-next/languages/fr.yml","hash":"0162a85ae4175e66882a9ead1249fedb89200467","modified":1558047867000},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"e7fb582e117a0785036dcdbb853a6551263d6aa6","modified":1558047867000},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"62ef41d0a9a3816939cb4d93a524e6930ab9c517","modified":1558047867000},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"5f8e54c666393d1ca2e257f6b1e3b4116f6657d8","modified":1558047867000},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"fae155018ae0efdf68669b2c7dd3f959c2e45cc9","modified":1558047867000},{"_id":"themes/hexo-theme-next/languages/nl.yml","hash":"bb9ce8adfa5ee94bc6b5fac6ad24ba4605d180d3","modified":1558047867000},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"bfc80c8a363fa2e8dde38ea2bc85cd19e15ab653","modified":1558047867000},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"3cb51937d13ff12fcce747f972ccb664840a9ef3","modified":1558047867000},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"db0644e738d2306ac38567aa183ca3e859a3980f","modified":1558047867000},{"_id":"themes/hexo-theme-next/languages/tr.yml","hash":"c5f0c20743b1dd52ccb256050b1397d023e6bcd9","modified":1558047867000},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"8da921dd8335dd676efce31bf75fdd4af7ce6448","modified":1558047867000},{"_id":"themes/hexo-theme-next/languages/zh-CN.yml","hash":"fbbf3a0b664ae8e927c700b0a813692b94345156","modified":1558047867000},{"_id":"themes/hexo-theme-next/languages/zh-HK.yml","hash":"7903b96912c605e630fb695534012501b2fad805","modified":1558047867000},{"_id":"themes/hexo-theme-next/languages/zh-TW.yml","hash":"6e6d2cd8f4244cb1b349b94904cb4770935acefd","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"6b2fd3a544e5d9fec20697b41decf6f4ba7285ff","modified":1558602857511},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"2b6450c6b6d2bcbcd123ad9f59922a5e323d77a5","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"5d955284a42f802a48560b4452c80906a5d1da02","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"53300ca42c00cba050bc98b0a3f2d888d71829b1","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"79040bae5ec14291441b33eea341a24a7c0e9f93","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"e7458f896ac33086d9427979f0f963475b43338e","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/schedule.swig","hash":"3e9cba5313bf3b98a38ccb6ef78b56ffa11d66ee","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"ba402ce8fd55e80b240e019e8d8c48949b194373","modified":1558047867000},{"_id":"themes/hexo-theme-next/scripts/helpers.js","hash":"392cda207757d4c055b53492a98f81386379fc4f","modified":1558047867000},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"33afe97284d34542015d358a720823feeebef120","modified":1558047867000},{"_id":"themes/hexo-theme-next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1558047867000},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1558047868000},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1558047868000},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1558047868000},{"_id":"themes/hexo-theme-next/layout/_custom/header.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558047867000},{"_id":"themes/hexo-theme-next/docs/ru/DATA-FILES.md","hash":"d6d20f60f77a76c77f8e65d0c9adbd79d0274557","modified":1558047867000},{"_id":"themes/hexo-theme-next/docs/ru/INSTALLATION.md","hash":"6c5d69e94961c793da156217ecf1179e868d7ba1","modified":1558047867000},{"_id":"themes/hexo-theme-next/docs/ru/README.md","hash":"712d9a9a557c54dd6638adfb0e1d2bb345b60756","modified":1558047867000},{"_id":"themes/hexo-theme-next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"b1dd18d9b890b21718883ea1832e7e02a773104a","modified":1558047867000},{"_id":"themes/hexo-theme-next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"6855402e2ef59aae307e8bd2a990647d3a605eb8","modified":1558047867000},{"_id":"themes/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"a45a791b49954331390d548ac34169d573ea5922","modified":1558047867000},{"_id":"themes/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"44e4fb7ce2eca20dfa98cdd1700b50d6def4086f","modified":1558047867000},{"_id":"themes/hexo-theme-next/docs/zh-CN/DATA-FILES.md","hash":"f3eec572a7d83542e2710a7404082014aaa1a5e7","modified":1558047867000},{"_id":"themes/hexo-theme-next/docs/zh-CN/INSTALLATION.md","hash":"b19a6e0ae96eb7c756fb5b1ba03934c7f9cbb3c3","modified":1558047867000},{"_id":"themes/hexo-theme-next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"24cf2618d164440b047bb9396263de83bee5b993","modified":1558047867000},{"_id":"themes/hexo-theme-next/docs/zh-CN/MATH.md","hash":"e03607b608db4aa7d46f6726827c51ac16623339","modified":1558047867000},{"_id":"themes/hexo-theme-next/docs/zh-CN/README.md","hash":"84d349fda6b9973c81a9ad4677db9d9ee1828506","modified":1558047867000},{"_id":"themes/hexo-theme-next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"c1ba919f70efe87a39e6217883e1625af0b2c23c","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_custom/head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_macro/post-copyright.swig","hash":"05e67c50a4f3a20fad879ed61b890de8ca6ba4ea","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_macro/post-related.swig","hash":"08fe30ce8909b920540231e36c97e28cfbce62b6","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"577e2e62c646ac5c29a1344521807ca4ef68f8f2","modified":1558581321381},{"_id":"themes/hexo-theme-next/layout/_macro/reward.swig","hash":"99d83a557af69dfa18ca312e5dea50eb73bd64c2","modified":1558598147784},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"d3ea907f08df81aff659e33b2b333f18dbb86f40","modified":1558517492342},{"_id":"themes/hexo-theme-next/layout/_macro/wechat-subscriber.swig","hash":"1fb5566e29574c54392c6876b2ebc32c234db1a2","modified":1558598100837},{"_id":"themes/hexo-theme-next/layout/_partials/breadcrumb.swig","hash":"6994d891e064f10607bce23f6e2997db7994010e","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"5df32b286a8265ba82a4ef5e1439ff34751545ad","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"1ae77b6a369f83c9986408f2ab448090e37cd2dc","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_partials/page-header.swig","hash":"1aaf32bed57b976c4c1913fd801be34d4838cc72","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"dbe321bcf3cf45917cc11a3e3f50d8572bac2c70","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_scripts/boostrap.swig","hash":"0a0129e926c27fffc6e7ef87fe370016bc7a4564","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"6fc63d5da49cb6157b8792f39c7305b55a0d1593","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_scripts/noscript.swig","hash":"ac3ad2c0eccdf16edaa48816d111aaf51200a54b","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"e0bdc723d1dc858b41fd66e44e2786e6519f259f","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/bookmark.swig","hash":"60001c8e08b21bf3a7afaf029839e1455340e95d","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/copy-code.swig","hash":"a8ab2035654dd06d94faf11a35750529e922d719","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/exturl.swig","hash":"f532ce257fca6108e84b8f35329c53f272c2ce84","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/github-banner.swig","hash":"cabd9640dc3027a0b3ac06f5ebce777e50754065","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/needsharebutton.swig","hash":"927f19160ae14e7030df306fc7114ba777476282","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/pangu.swig","hash":"6b75c5fd76ae7cf0a7b04024510bd5221607eab3","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/scroll-cookie.swig","hash":"b0ca46e0d1ff4c08cb0a3a8c1994f20d0260cef9","modified":1558047867000},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"5a61c2da25970a4981fbd65f4a57c5e85db4dcda","modified":1558047867000},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"db70a841e7c1708f95ca97b44413b526b267fa9b","modified":1558047867000},{"_id":"themes/hexo-theme-next/scripts/tags/exturl.js","hash":"2b3a4dc15dea33972c0b6d46a1483dabbf06fb5b","modified":1558047867000},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"a98fc19a90924f2368e1982f8c449cbc09df8439","modified":1558047867000},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"1b97b1b5364945b8ab3e50813bef84273055234f","modified":1558047867000},{"_id":"themes/hexo-theme-next/scripts/tags/include-raw.js","hash":"b7600f6b868d8f4f7032126242d9738cd1e6ad71","modified":1558047867000},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"621004f2836040b12c4e8fef77e62cf22c561297","modified":1558047867000},{"_id":"themes/hexo-theme-next/scripts/tags/lazy-image.js","hash":"460e5e1f305847dcd4bcab9da2038a85f0a1c273","modified":1558047867000},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"4975d4433e11161b2e9a5744b7287c2d667b3c76","modified":1558047867000},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/flexslider.css","hash":"7f567b5d26e5aee5c7cc965195e0424a1efc434a","modified":1558193953147},{"_id":"themes/hexo-theme-next/source/css/font-awesome.min.css","hash":"ddb3fcb91001dc8c764597f8472555718614b47c","modified":1558275258908},{"_id":"themes/hexo-theme-next/source/css/lightbox.css","hash":"386e3bd1ac4c6f8776af694f401933db319d34d4","modified":1558275227764},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"c26ca6e7b5bd910b9046d6722c8e00be672890e0","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/owl.carousel.css","hash":"097c8d67412f44534449ed4cadc6dd22b025801d","modified":1558193953147},{"_id":"themes/hexo-theme-next/source/css/owl.theme.css","hash":"d2ca10ebff9784a7fb75545ba6352a7be2a65ee2","modified":1558193953148},{"_id":"themes/hexo-theme-next/source/css/style.css","hash":"0b75f81789f1ff8098c6d173da75377aca5c442e","modified":1558448637843},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/images/avatar.jpg","hash":"1d6d672dbc5651325306da7cdacd330137c3d4cd","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"cf720b50cf8dde0e1a84ce1c6a77788bfc5882d5","modified":1558196865699},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/js/jflickrfeed.min.js","hash":"cd8b2cdc1137045fd67fdd1cf3cad81e2752b717","modified":1558192952555},{"_id":"themes/hexo-theme-next/source/js/jquery-migrate.min.js","hash":"90532aff6d4121954254cdf04994d834f7ec169b","modified":1558194393424},{"_id":"themes/hexo-theme-next/source/js/jquery.form.min.js","hash":"374aa1f8db17575b0e35eabc46ad82062e09106c","modified":1558194366534},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/js/jquery.js","hash":"076524186dbbdd4c41afbbd6b260d9e46a095811","modified":1558194366535},{"_id":"themes/hexo-theme-next/layout/_macro/menu/menu-badge.swig","hash":"65c5e585982dae7ae1542cada71858b4ea1f73d6","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_macro/menu/menu-item.swig","hash":"d1b73c926109145e52605929b75914cc8b60fb89","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_partials/head/head-unique.swig","hash":"a7e376b087ae77f2e2a61ba6af81cde5af693174","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_partials/head/head.swig","hash":"89363552667a68dfbd2518c97e14d926f6b4581f","modified":1558275565604},{"_id":"themes/hexo-theme-next/layout/_partials/header/brand.swig","hash":"fd780171713aada5eb4f4ffed8e714617c8ae6be","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_partials/header/index.swig","hash":"2082f5077551123e695e8afec471c9c44b436acb","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu.swig","hash":"3db735d0cd2d449edf2674310ac1e7c0043cb357","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_partials/header/sub-menu.swig","hash":"88b4b6051592d26bff59788acb76346ce4e398c2","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_partials/search/index.swig","hash":"a33b29ccbdc2248aedff23b04e0627f435824406","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"cc865af4a3cb6d25a0be171b7fc919ade306bb50","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/gemini.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"ea03fe9c98ddcfcc0ecfdbe5a2b622f9cde3b3a1","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"67f0cb55e6702c492e99a9f697827629da036a0c","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/firestore.swig","hash":"94b26dfbcd1cf2eb87dd9752d58213338926af27","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"beb53371c035b62e1a2c7bb76c63afbb595fe6e5","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/lean-analytics.swig","hash":"cee047575ae324398025423696b760db64d04e6f","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"8878241797f8494a70968756c57cacdfc77b61c7","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitment.swig","hash":"fe8177e4698df764e470354b6acde8292a3515e0","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/hypercomments.swig","hash":"17a54796f6e03fc834880a58efca45c286e40e40","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/index.swig","hash":"40e3cacbd5fa5f2948d0179eff6dd88053e8648e","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"6f340d122a9816ccdf4b45b662880a4b2d087671","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/valine.swig","hash":"b9f8bf9b62738376c3f922682e6f0c72685b04eb","modified":1558601484881},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/youyan.swig","hash":"42f62695029834d45934705c619035733762309e","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/math/index.swig","hash":"a6fc00ec7f5642aabd66aa1cf51c6acc5b10e012","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/math/katex.swig","hash":"97dbc2035bcb5aa7eafb80a4202dc827cce34983","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/math/mathjax.swig","hash":"9b9ff4cc6d5474ab03f09835a2be80e0dba9fe89","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"b15e10abe85b4270860a56c970b559baa258b2a8","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"ece9423bd61edfd467ea3033e0b28ffed15b9d04","modified":1558111817644},{"_id":"themes/hexo-theme-next/source/css/_custom/flexslider.css","hash":"7f567b5d26e5aee5c7cc965195e0424a1efc434a","modified":1558139153405},{"_id":"themes/hexo-theme-next/source/css/_custom/font-awesome.min.css","hash":"a122611dc573ef523e7d694a1602e154feb991d6","modified":1558139305957},{"_id":"themes/hexo-theme-next/source/css/_custom/lightbox.css","hash":"386e3bd1ac4c6f8776af694f401933db319d34d4","modified":1558197050917},{"_id":"themes/hexo-theme-next/source/css/_custom/main_style.css","hash":"7c479b33a9a95b2310b1454a240742e4ed71deb5","modified":1558362300523},{"_id":"themes/hexo-theme-next/source/css/_custom/owl.carousel.css","hash":"097c8d67412f44534449ed4cadc6dd22b025801d","modified":1558139115736},{"_id":"themes/hexo-theme-next/source/css/_custom/owl.theme.css","hash":"d2ca10ebff9784a7fb75545ba6352a7be2a65ee2","modified":1558139103263},{"_id":"themes/hexo-theme-next/source/css/_custom/style.css","hash":"9ecf6b9265199eaabae74ac0eef8bdc937cdf121","modified":1558194558890},{"_id":"themes/hexo-theme-next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"2640a54fa63bdd4c547eab7ce2fc1192cf0ccec8","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"81ca13d6d0beff8b1a4b542a51e3b0fb68f08efd","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"7a2706304465b9e673d5561b715e7c72a238437c","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"32392d213f5d05bc26b2dc452f2fc6fea9d44f6d","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"cfb03ec629f13883509eac66e561e9dba562333f","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"74f62dcc9c711d5bbc811bbd3040fc6faccb0805","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/js/src/bootstrap.js","hash":"40de94fd18fcbd67a327d63b0d1e242a08aa5404","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/js/src/motion.js","hash":"50e57f8acb6924c6999cdcc664ddd3f0730d2061","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/js/src/utils.js","hash":"4284c67ea1435de2acd523f6d48c0d073fd1ad03","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/lib/Han/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/README.md","hash":"572a02d6dfcb37f35eb47339862da6fddae00826","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.eslintignore","hash":"3d3910611724b7584a29297a3f7132334a3ad091","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.eslintrc.js","hash":"76bec2314ec3477b18e357f9992cf42a9524a3f7","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.gitignore","hash":"5410a1bef9807f666cd92a0d2020f700e67e4096","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/LICENSE","hash":"1440355648a72be5b7625fe6fa055b462fcc78b0","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/README.md","hash":"ecfb09270cf202fb2228e9a79fa970b60be69222","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/bookmark.min.js","hash":"9e525329553335c2484f6faf9e933a6bbee9ab6d","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/index.js","hash":"5e5cba645a1a4531ccbb4782df2f7a075626393f","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/package.json","hash":"013ff96fc03cd4ed7b17059af207e53f94953202","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/README.md","hash":"70a34de41d0736f3727c98b6f17c0a24c9cc3537","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"956eada198babd00f028e8908767cb158926c3f3","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1558047868000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1558047868000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1558047868000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1558047868000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.editorconfig","hash":"7d47ecd70ca58d26af4f69ff1b23034edcf4475e","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.gitignore","hash":"09cde1060b4213a7eee528b54560777d2d3756e8","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/README.md","hash":"9b00c4ce1a739c825df4e51977f7525d2c9f6b81","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/package.json","hash":"7bcb3787978a0c445b1bd3dfeca6ae6016c98abc","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/reading_progress.js","hash":"ec68a79421cfba022ac53f46813d013dd48617c0","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/reading_progress.min.js","hash":"b768dc009e6d37dd952632c317f6c33e6e2d89ad","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/three/.gitignore","hash":"e691fe9e685cbd50bcd7e138f4ca3503e7b0eaa4","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/README.md","hash":"5096005b6bfa0e554b245c6c1ffe10e7edc8130d","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_lines.min.js","hash":"97f0e67570574dc8597c5819970508d4e7f7af25","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/canvas_sphere.min.js","hash":"333fed4c256c7081e07c7844c097b7970b45b248","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/gulpfile.js","hash":"edd1868be72fde796b0b1f3a7a0316b3c896962a","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/package.json","hash":"68c5104de7461d425a5dbe521cea0cf00af289c3","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/three-waves.min.js","hash":"704e860183acbaaf8de1be65fe5c958e8105f4bf","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/yarn.lock","hash":"9c71c0a7c033fc709c1e683157b1f12037024694","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1558047868000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1558047868000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1558047868000},{"_id":"themes/hexo-theme-next/source/css/_custom/bootstrap.min.css","hash":"58a360d7ef24d8d05737db1712dd5c086597e862","modified":1558138973382},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1558047868000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/assets.swig","hash":"6958a97fde63e03983ec2394a4f8e408860fb42b","modified":1558047867000},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"ef65cd2dee22a3e3ba5a4d0c5e0ce976383592c0","modified":1558365619474},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"95a68c308aae4a86aa387876f068ee3de2c4bde6","modified":1558364750284},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"0d2bec7229e879dd534f42543fa6a3964c9e9995","modified":1558365463896},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"0810e7c43d6c8adc8434a8fa66eabe0436ab8178","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"f362fbc791dafb378807cabbc58abf03e097af6d","modified":1558362753511},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"0bef9f0dc134215bc4d0984ba3a16a1a0b6f87ec","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"f43c821ea272f80703862260b140932fe4aa0e1f","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"2212511ae14258d93bec57993c0385e5ffbb382b","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"5e12572b18846250e016a872a738026478ceef37","modified":1558362753511},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"35f093fe4c1861661ac1542d6e8ea5a9bbfeb659","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"d5e8ea6336bc2e237d501ed0d5bbcbbfe296c832","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"ba1842dbeb97e46c6c4d2ae0e7a2ca6d610ada67","modified":1558362753511},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"05a5abf02e84ba8f639b6f9533418359f0ae4ecb","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"41f9cdafa00e256561c50ae0b97ab7fcd7c1d6a2","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"ffa870c3fa37a48b01dc6f967e66f5df508d02bf","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"5779cc8086b1cfde9bc4f1afdd85223bdc45f0a0","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/config","hash":"60dc0c15e03f06673c4be0b31eb4844b8750ce74","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/index","hash":"557c37ecc56499361b983ea0b5ca9ba94ebfb1c9","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/packed-refs","hash":"9277089dfa2650d82dc3e99a028028e84aa38c3f","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/config","hash":"e2ecf833d21a96d6267e6979ce1834c1124a995d","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1558047879000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/index","hash":"317bce12bda4e6923f4641c0a9022fe553610f60","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/packed-refs","hash":"aae7f3f6192c7c6f511e300dadab479f006e07da","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/config","hash":"7aac3f671ea9ee22cdf431c0ceb7e937b051a3b5","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/index","hash":"0177777d3029323f598ecab91fb3200ace3703fd","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/packed-refs","hash":"eac20c4e1edccad1fd1483618cca97e06d216ea3","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1558047868000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1558047868000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1558047868000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/config","hash":"f858ff51743e2e8ad94216aea6dd620c6d947584","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/index","hash":"6cdf14edf5c4c62ebeddb68da969d78a10ee5cf1","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/packed-refs","hash":"dc54509f458e7e1a3866959ca1ff715e74344cf8","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/config","hash":"250a00782b562964ece19407742221ae24e56aac","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/index","hash":"d00f5d328d1039d51cc588f734f9780b6c95378a","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/packed-refs","hash":"e6488f9f25ccf4e2b2885984eea4981d7845e016","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/.github/stale.yml","hash":"fd0856f6745db8bd0228079ccb92a662830cc4fb","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/lib/CanvasRenderer.js","hash":"cf8e1ce6e884023ad0d692cf30f399862407fb40","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/lib/Projector.js","hash":"1ad16e96cea2a8a9155bb429c83ef9bdd341ce99","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/src/canvas_lines.js","hash":"650310ff6783671f8ceccf01f840b20d9c87b491","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/src/canvas_sphere.js","hash":"7614790c67d3e79e3390fe688f6b01afad7e3bb1","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/src/three-waves.js","hash":"e98e442f14920e9fb8691846dca3a2225d403048","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1558047868000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1558047868000},{"_id":"themes/hexo-theme-next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1558047868000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1558047868000},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"39dee82d481dd9d44e33658960ec63e47cd0a715","modified":1558362753510},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/github-banner.styl","hash":"ee37e6c465b9b2a7e39175fccfcbed14f2db039b","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"7cc3f36222494c9a1325c5347d7eb9ae53755a32","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"17b95828f9db7f131ec0361a8c0e89b0b5c9bff5","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"7dd9a0378ccff3e4a2003f486b1a34e74c20dac6","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"fb451dc4cc0355b57849c27d3eb110c73562f794","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"381c7c648678435db7d720f6fe11d8ea2fff57ee","modified":1558365790910},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"370cd51be838034b3cb26def9cbab6d548d7779d","modified":1558366215752},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"b3a70a706cbb996ab9868be49f8c7840510f9d01","modified":1558344097846},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reading_progress.styl","hash":"f4e9f870baa56eae423a123062f00e24cc780be1","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"c0ac49fadd33ca4a9a0a04d5ff2ac6560d0ecd9e","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"8bf095377d28881f63a30bd7db97526829103bf2","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"35c0350096921dd8e2222ec41b6c17a4ea6b44f2","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"71a091030f79bf9c441749f3083aeb3313cf141e","modified":1558598890094},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"4427ed3250483ed5b7baad74fa93474bd1eda729","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"cac95b2949be7aff9f54855c08ec9a55d224eb24","modified":1558517949194},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"43bc58daa8d35d5d515dc787ceb21dd77633fe49","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/exturl.styl","hash":"bbf9de14a7a7ebcfc7b89a5aad226a901c44cd7a","modified":1558275407454},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"5d15cc8bbefe44c77a9b9f96bf04a6033a4b35b8","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/algolia-search.styl","hash":"10e9bb3392826a5a8f4cabfc14c6d81645f33fe6","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"76937db9702053d772f6758d9cea4088c2a6e2a3","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"1c06be422bc41fd35e5c7948cdea2c09961207f6","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1558047867000},{"_id":"themes/hexo-theme-next/source/images/background.png","hash":"457d1a76fd6edd8bb78eacbd8a39cf21f870404c","modified":1558111433011},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/hooks/pre-commit.sample","hash":"e6c9fe47f7506171be08ed90baaf91d49bc7fe0c","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/hooks/pre-push.sample","hash":"503c3d2cd9066c2329ae84309c03a4c274f6d90e","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/logs/HEAD","hash":"5d0041a5670d700ca775b062e63db09d30e7d0e3","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1558047879000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1558047879000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1558047879000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1558047879000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/hooks/pre-commit.sample","hash":"e6c9fe47f7506171be08ed90baaf91d49bc7fe0c","modified":1558047879000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1558047879000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1558047879000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1558047879000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1558047879000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/logs/HEAD","hash":"226d2605cdc24fbdc931d3c346d715127d83b0bd","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/hooks/pre-commit.sample","hash":"e6c9fe47f7506171be08ed90baaf91d49bc7fe0c","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/hooks/pre-push.sample","hash":"503c3d2cd9066c2329ae84309c03a4c274f6d90e","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/logs/HEAD","hash":"2e854730ee25a813402a16d857a6f3d0544b43c2","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1558047868000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/hooks/pre-commit.sample","hash":"e6c9fe47f7506171be08ed90baaf91d49bc7fe0c","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/hooks/pre-push.sample","hash":"503c3d2cd9066c2329ae84309c03a4c274f6d90e","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/logs/HEAD","hash":"0f96ecbb913481a4a2fc912d6b8eda3f67046fc2","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/hooks/pre-commit.sample","hash":"e6c9fe47f7506171be08ed90baaf91d49bc7fe0c","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/hooks/pre-push.sample","hash":"503c3d2cd9066c2329ae84309c03a4c274f6d90e","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/logs/HEAD","hash":"ff7c50d125e236987f414bf6767bb5ba914bd57d","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/hooks/pre-push.sample","hash":"503c3d2cd9066c2329ae84309c03a4c274f6d90e","modified":1558047879000},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1558047868000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/01/1e06c7aa90464f2b1d40aae05cf9d69e7667f1","hash":"e9888d4243b096c91da6cd30a348734b88c652e4","modified":1558047913000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/02/c49afbd642c373142ce96b321820b2e31136dc","hash":"1e84c7eb747dd99355ec99a190aca59f10f38a61","modified":1558047913000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1558047912000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/12/e5ad35b941c6dc1c10c0db6a04cd7bc7136d79","hash":"65020d9c30858a2131ec75547ad8daff94916274","modified":1558047912000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/14/222c5cf0874b3d006fcab6244c9e34c13cae11","hash":"32841604a28018f255ed74be25a3fed374729561","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/14/ffa69f0388b6648af6e413387201f1c5dc34b2","hash":"d94589ced41c1438b11e1a02ae2ed8695ec4bfe3","modified":1558047912000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/1a/dff38de35c5dcd90b1c9abb363d60cedc677c3","hash":"e3bb99642f5f820b6e41c5a2dbeaa5a5e7629cf9","modified":1558047912000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/1b/2d9ec86c12358ba35f7db597cccb93c4977154","hash":"7e90faafec65ae60455922b819ad373460c708c4","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/1b/d905fca417b7dc6e1091fbf5dcb99a8e3f44a3","hash":"f904eb01291a0c87f34747183435918e4696a960","modified":1558047912000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/29/c753eafb74ec88615f947d25acb4659340747d","hash":"5d0cc15f306cc2c34a9107c6aeb3576b90343956","modified":1558047914000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/47/b5af07d4d3fd429c6f4b405ff9acd5f4ee7975","hash":"0e69266d563abb092c5b40035331345f771021c2","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1558047912000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/4b/5f7d0162b051571cc9d87ba674ef913a7c5a29","hash":"8738e2f3453a3192d07fb0267d9f9194b910bee7","modified":1558047912000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/5f/7d3c8d8a6340f1efccc4b3eac842788c1628ec","hash":"af2accb69f344e9cfc870ca7dbe8d25c9e103318","modified":1558047912000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/2c/e2f46ca183a46f1b06517b1a2a8f96bcaab1b8","hash":"e9a8ddf8b0af2f52063c05075df107b7aacc0d91","modified":1558047913000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/57/3ad3f32f0689138c4d6f7007621e0cf2bf23ea","hash":"fdb2d9e977cbbd0b44059cf61d5baad92f9df016","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1558047912000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/6c/cc84f8ea3543926a1a1e78b5c50a56c0dc8025","hash":"8b4b97a1e3e0089940bc797e8ee3d6eca9d09d28","modified":1558047913000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/72/c270d58afaf026bd65fea390e277b6d63aa22f","hash":"2ebc915da4f2146762025c321bbd54fca1e7b9eb","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/77/8fba47fc8f68467fb45002edcd717a71a4ea18","hash":"896ae007894c3f537f1723674f06740489bbf73c","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/7d/713d14ed6c435cc41223736376f9e41f8001ed","hash":"fe9cd361e4ab229e32f8a0303b108a5386d09429","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/75/976c6dc20178b5d24b07ba76700a73205a9b52","hash":"532198fa938fafd2b53dd45193e65a7c8c0f8c84","modified":1558047914000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/84/5b1bc2898c9924eff3e1b0bd92b6178b4908db","hash":"7c8453a9632d2e4b2720c4a7d50b289936699d1c","modified":1558047913000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/8a/7ee041ca7a999ccd5f35177f9f806232b93738","hash":"627b29c5fa02783ab8130433036db571143e564f","modified":1558047912000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/a3/8e5bd4193fa1f52aa27eb2a7f32cf103d20a57","hash":"d8897f2030f55a50c5dcea877dd5b0f9a3a977d5","modified":1558047912000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/9b/afab6ef59ce585cbc456d03770e167d2a3c9e2","hash":"32c4243f56b9334f340559d9e7bb7140aadb5959","modified":1558047914000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/a5/57ad3eeef222d2387e98f4418b0438655a2765","hash":"cdaa150ec84c29d84750ef44aa586a600f901d63","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/aa/9916f898bfa69c88a84d6f0e99a549c8831d07","hash":"74c546dc2710eba88138d6a12df1d3e05e03ae35","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/ad/cf15c7f3d6cb69da502326740997e4a0e3bae3","hash":"0d53088c3633db9d45f69b6c12fd3f2cd4d53062","modified":1558047912000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/af/46be34010c865593eec22d79552334f3fac3f1","hash":"5d8888376467232bd9a13f99c8c76a386a5505e5","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/b3/7c278058df61bbd959c9f775f80f3a24b49a16","hash":"3429c10084546b79746b6b0e9f3e4b29fa6443e4","modified":1558047912000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/c3/a4e2326f7650fde4756dadf7c67484cf14aa4b","hash":"4b0e77607c87ea06fe9b612b8ee7cd99f87be559","modified":1558047912000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/cb/cf355438829a21ee86cb3f116a68daab599b5d","hash":"163216cd6c2b363b3bbdf32da39142dbd4ca690b","modified":1558047912000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/d3/6ccff12388f072c23857d33c6abd1f57b3dc86","hash":"a8d4bddb3c913051763dc7d2d3cfc243ef181701","modified":1558047912000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/e1/f0b9c30d5426977a4685d63a0cef6fd6abdd89","hash":"103eeacd4a6750c0e7313b84a571373fa8369579","modified":1558047912000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/e2/d2e185fbd7d888a3658fe97dde4ba595290caf","hash":"4edae1bf781e76b61bdc43395a76574c0d20107b","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/e6/02654d32318f5c7135c521ee586f93235452a7","hash":"c6dc38516b0cefe68f0d466f43afffc9d31c2428","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/e7/237bfe33deeeec901fb5f0a60bac33cbb446d7","hash":"6589766fc012cfd184f634e3747d944efe405797","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/objects/f0/a838932f748272263bc294b178b9a3297a1295","hash":"77694c0d730fa2582dc473d3d3ee782156f4cf74","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/refs/heads/master","hash":"51faea5cd9b558363c460cd1fb22b20e81b1715f","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/02/b27223487ca819cf7167dc23626af595112e25","hash":"e5bbb1906aa9a8e2696817d19d85aeedf82539ed","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/07/4d4d38a37d506f5db482b5c27ad1143bba5aab","hash":"ee76158694b6490056328594b5d15a54faba253e","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/0a/9e6b66e9d710a68e08fcc295fca440eabcb4bc","hash":"aa0b269640b41735ba54a9279f10ddd19ecd5887","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/0d/61683ea74054da2645effdd51d0a3282d6a9ff","hash":"879563c866dbe7efa0074a1ebcd206723e552f27","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/11/8348fe672067e7d9c32c73d586023804eeb565","hash":"2b73c34eb535ff7e7d91cefb5215feddd9f2c36f","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/16/75d42fcbd2aded2e9b42efe38c347ced893495","hash":"979ec745cfdc8dd979785b78c9be7645bb73d922","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/17/ad1e81c2805cc9c5c00846c8bf9bf16524b55a","hash":"8f779f28267873af1e5c71386603042dbaff6211","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/1b/db4ff581f77318e6c4783d8e1ce811c37f13bf","hash":"06b3da6e152ffd68ed4617db1c4e3912f41d8bec","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/18/77388dd9427b36d7c8703038a215b79f1218c2","hash":"8d48c7c0d7427116dbeb32552c576cc4edbe2d38","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/25/42ea91169dbe9da086918ad02160e42310e185","hash":"3c942c82f3ef7fcd9a15276c82fcf59fa141521c","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/25/b729e9ad0151b51f50297ea35280111b953236","hash":"af4bf7f3feb175c6980ee81a84f679149f713987","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/29/de98ce86c01618ebbe3352e213db74feda0dc0","hash":"046bf7ab442c095f0150c96fe06d83855c92092f","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/2b/358da01f778126b38fc4ddf5ecafa625cad38b","hash":"d4613d86e15d9679b8f1f18950b71a182af4b5c8","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/2b/d59834388b6377fd14413f2614f550e35e35f1","hash":"654763c707c65aa3f353f8a9edb0cc0ae4bcccfa","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/36/6ee3e25fa36be8ea88ed1c7913a8de8fd3b820","hash":"81c45f061381dd947da576758992b64b6101fbc8","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/2f/425e03cfa918b2d638bbd37279a8b1e7757508","hash":"283713eda90efb64849519db267b652facfdbd63","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/3f/30e2e442e4fdc1e91d5d1b642662e3900e5d6f","hash":"358397c32831b80fa4828334de7080bdaafe1c52","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/40/b878db5b1c97fc77049537a71bb2e249abe5dc","hash":"929471c4b27858bbdae034381982f996144f6b3d","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/41/bde8ccd130442ef0b3f8b24764a6d72635a485","hash":"4a833bb669ac126a00dec7153f8c263eab47b024","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/41/fcb40408cfe2e9e0d1796ce1384024f7ba2c1c","hash":"600f3ee28c5dc2f1b21f8d9043d271b9601750b1","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/42/c32aba927940c9e92b9928dceee88eacbf4874","hash":"2c7b6bb078f2eb52eead906df3ed4fa136a1e651","modified":1558047884000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/47/1dd1f3ddf970ee3418f801ae787bf98191d47e","hash":"8634518aeeffc4b8b0dbe6ca6159480264cf1916","modified":1558047884000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/48/7e5a296eebd45809199d2f557e340603931bad","hash":"6cf9f9b5ae990bbb0083b37b0c29b269cd8cc735","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/4a/16717bb5a449fab2291e6397c30c6cb34814f1","hash":"5e244da7b9b6dfc9ad924ee5259805d4ae272c2e","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/4a/6e0d94cae4e01312054983b4e2e4007e3fd3b8","hash":"9eff6f1c82336ebdab0503e0ab0f753cd18f01ff","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/4a/7e8d64b8956ffd9339000e62d490f18dcd3ecd","hash":"3cc8fd65b3663a750887093f67bb28696492d5e5","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/4e/7ec652ef197de221d6576a717edf0b583a688a","hash":"e45f3b02a04d04eb3bcd6373ae79d86cbbd62798","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/55/31419f7d03a523182be5373e246e43acdf60d7","hash":"274085edc584079218a79c199bd0c7360a700290","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/58/b257bc636adc71871da51e615e6734c9479f3a","hash":"4e63de59c359c9bf480b47aa5e342ed78663fb58","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/5c/02525c8b55f89f0ec0304cd0d266453bdf0541","hash":"51cab03e6cbebdb421eea45818b1ff7d9ec7783f","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/5c/ffa97fb277e628a550bc1d8f7fa7c5c776129f","hash":"8c4e4a79d14522f34280ef85c794df6f4886e040","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/5e/038b5098480c14a29cefd944e3eb23109473b2","hash":"9c3aba7ff1afc70708a90e2f4f610499ee268d4a","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/5f/1541db4b58002e45b9b5fe19426551a8239a49","hash":"9a50dcb663e39892adbfccab943fb8dc37add2d0","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/60/438c0c99eece781f9c7b2779ab7673ab34ba62","hash":"76032e20bf2916b03d9f795982831868f42a03af","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/61/4795cc61f429929887fde3962027254db90a62","hash":"c4e415dda2e421df728dda51f953cc2f01296378","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/62/150c9d8f54ca62e1af3c9d666bb5e35eb3bdbd","hash":"2998eaea45a0135e879da15851a535ae2940d85e","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/69/d5670af93cd1d3f0acc082583b1d150c5d61b5","hash":"e6c6fdb25f5fc4949594e217ae14d309b2fba4a1","modified":1558047884000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/6d/1188177a8798893f9efe275d4d75d0f9301be9","hash":"b8652b3249ef6662a8dee7c01e5667f7e4f33cc4","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/74/dba5056028cc4bac4f79ffec7da1e076260ffd","hash":"cd7bbf512f3c0291badb58f0679485c18a98c034","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/75/4a45e75b8a6dc256755287312c729adc2fc6c9","hash":"e700708d93a902401e54d96d4d632ae4225cdf2c","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/77/d7bbc93f0a411d2e50b7c67a2827dece42727f","hash":"6865e0eb54a9882e55e70669a44cdddb2da1665e","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/79/c8a354ccacb4edc27acbcc503f26acf6119624","hash":"7a44189d1189ad7aedea595fc8a4ef387de7041d","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/7e/58471cd13382a6bafd05015cd0a5b5a8e899eb","hash":"21ae04d7ac48092d7b07b7278bf099cfc2691e57","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/84/08abfa6c03a2809cb160da5badc6d1050bfbb3","hash":"9d3f29a89223403d1a0292681a330cbf7616c190","modified":1558047884000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/85/839f2b88dfaef92ae7c84c10f446e98d07b852","hash":"9662dba024cf43e039d41f4253e7aa282e2141ba","modified":1558047884000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/8a/7f4f27cc671188881ca5cd80d941720a78be04","hash":"de24124a9660dad2ee4e1d25a3580ac87d42b3e0","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/8d/ae3702857a081653c16320999ed63f3c6fb719","hash":"cc5ed8d3d17451c722a3ebfa3251fff27d348218","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/8e/b07c89ff54bda39a40d6448a6a8ef4df57c8f2","hash":"fadb84b2a2c5dee0b8f67dd53b4e2b8a5b270e92","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/92/f5900e81d1cf9e90787b7138f4285434e45c10","hash":"05c5b8557d69133fd01ebd1b85a5e009a822ca20","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/96/353334c808a19403f7d2f0e880668bf8f0e320","hash":"dbcb9efdc52a50d5f0431394c24b35ff47f1833d","modified":1558047884000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/97/b44840ca6d92e3e650428f433b75a501b1427c","hash":"a899d561a89c4ab798063c1df81d78015992ad15","modified":1558047884000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/9d/a80d05852c1c5aec3e8d31b63d429bcfecc0c5","hash":"392385eddea633b0bea1194c2c66db593c6a9c0a","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/a9/21fc59cd52b57fc3093fbdc04b446bae0a2f8a","hash":"a2e879b7fdb0cf153f8526064a6b8810b2cd8988","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/aa/d78f9de11c827340e4695cbc1f5a73f53ee577","hash":"0f5086a5818caf093dcf60126a7d0f72bc73928b","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/ad/b3297e18bb4d11be9f7305db144e5015f40738","hash":"b44f4417307f3dbb33d30c22700dbfb61c87f198","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/b5/c8b8aa1a6dba7c8152b49ef103a0952f1bb9ca","hash":"d070cad9094ddcf44be0e16b3872f1fb4f05ae0d","modified":1558047884000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/b8/e5e058b339881ced4b4b5c4d89f337ccfb67de","hash":"0d229cce5fbe7e41e4961070dd2e4d76c7b3efb6","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/bc/0570da6c07cf361d794008e58455455a2580be","hash":"822af280dbbe78499a932faf9229f4c467d48cbe","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/bf/05dfc0c17af4b48e94676e1e2feaba911d8c71","hash":"4d8adbebcb8ffb4bc3c61b9c97bd225f128b8e74","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/bf/c91bf59adb7231937b98d35cb952b4bab01fff","hash":"016dc36835bb17ba3f54eebaef4d57f5498015da","modified":1558047884000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/c1/7940ffb480f454472c9083efabce723ff53cd4","hash":"29bbded01d4399f509abd809c00957f182226432","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/c3/75bd4420a3baa49b9a5d52f8040400491ac933","hash":"beb87437d1591c6bec51a6e85176f576092a83f2","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/c6/26688a33395276a262158e171027a61c56150c","hash":"3727c122ab41e9dd1abc6490a40eb28f212c5c8e","modified":1558047884000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/c7/631242bf4ea5781b2d173d999b41c69fdd8ace","hash":"f2d3b9fb648bed7f61dc917d9ad45550c4c70e77","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/ca/799c34c37f63bd64ed9b49413e7fc6db8ab2ef","hash":"4e6ee2dffc199b5954fb34b129fe2f012099463d","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/cd/ea049768c3f2d2b89792c19a523584590292c5","hash":"5e69fbae98becc6ed3be947a2450511294252891","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/ce/70a57b7d6bcddae01e3434d416c27c84b24727","hash":"d8ccbf99469b51ae629347665f96354c264457b4","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/d2/45f9acfffc2e168c17bcc4e115527f21a77521","hash":"76d31ac0c9ca563b5854fe5b6c5ab46ebb202680","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/d3/a06b992cfe7d26e022b14abf5ba563e6e63c4a","hash":"6820962ea4a4da9e9de834c97c1630477c30ef20","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/d4/d4c40411de7936e90c6ebbc19e182ad225cb4c","hash":"f8d44f87905d5dfbeb1fdf5519a5256d27d00120","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/d6/31561b3edf93b81d38f81278d6574c77006e39","hash":"afaad8a2c6944b11695122cf45cedadbc3bd7605","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/db/3b3566df6e7d89575c4150067f61087be1bedb","hash":"118afda770f93908ad97d6ad0bb6a42b21aab9cf","modified":1558047884000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/de/52a356f671fa73a9d9910c26968d47100c655f","hash":"5bd5f521df149c8e24640151b6d83b3c6be1fd30","modified":1558047884000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/df/af7173f5d152681fb2bc7adfdebb54ad195281","hash":"7fc27717b2f7da8f6a6e40ac8d88c75485a505fa","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/e7/aba3f8ec35017b4dd2bc8f5ca94253a8674ce7","hash":"8fe85003f71bf38e6ae367366ae6e95a819d046d","modified":1558047884000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/ef/090e162cd7cc22d2da95d77acac1d7a1eb9c43","hash":"a6997644fb850bedaeeb01adfc90fc404cf80074","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/f4/5d8f110c3034162a1091dafe4b03d2e56b323e","hash":"963dad8248030a8d7b185f4726e40a65a0583c0e","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/f6/c892849ea799eb017a3d5bf05edb602780cd38","hash":"3b568af69c7a3dc7439155fe36b64a65e8b0bb79","modified":1558047884000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/f7/bc8429b09417e69629d9fa0c2874dd5adc30d2","hash":"d8b3844ae942e165b59b6a57c5decdeb35582539","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/fb/0a1d42d6507805651dec61ecc4df11f37dc1a6","hash":"fcef8ee1a40833b2cf5ecae90bfa22002f46b29a","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/objects/fc/63af0044284a5b08f20cf1444a062176d835fe","hash":"9994dd502452c757856b88aa0d1be86540dd7a82","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/refs/heads/master","hash":"fce63708909b2252a3ec110e5bb2519a3d702c79","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/2a/f622a4d7df40a2708946e91d6d7a0df1dc468c","hash":"3da7207fb18d361b83c56f4e35f67e9e945abd82","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/44/6ddf9b6c0e5ade17ca5cb99f9b3a5300919c57","hash":"fb72799ff98445f72fda041337da4cf105d9dcba","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/45/9262fe92f0115707bf8d8764f1886bc5e7c9e0","hash":"36040483f8af76775b7e4b6d87cec53729625399","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/46/cad4f872aa93e813aed99547c4705322ca483f","hash":"b0465d3186e2d58a8a99c56c6e68aa2965a396d4","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/50/dd2a6539498a70226c81a587db486b47e839ff","hash":"3844b0c815d0b4b32c6312c751a826bf9dc2c945","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/51/7c5eb7dcc2cb9769efea2e7375ff6e04123150","hash":"ec53157077d47430f4729bf164999d18d370aeab","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/5a/69ce9c2e4a1a34f6063ae9a121af1555669c69","hash":"dad25cc0f450e2827b5676975f4a70636e3fd2c8","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/5e/8ae972c99b04af7dd56dabfc485e8fdae5094d","hash":"791b3349c5696ccacae00bffbdbb8d88a03e61a9","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/69/39233ece53c9bdb9a1faf3271ed5768b034aad","hash":"5a770d418c1bb7b0f031f4d5416530002032fcf3","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/75/de2b8fa62d52690de32c351c63ab6446104ed5","hash":"52d10122d633ce4895a0690c5955e1b356f5a391","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/7b/c7e3186212b6f2e06d3370502565e2c6326890","hash":"379f3c6486f589fc9c1ab07d0382adacf4f655a2","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/86/1c9f4241fe0eb6af02ad770d5ce04c1f68972b","hash":"7005c3e36015a4af30d4b91bd5a849a7861a073e","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/90/f6477118d05f5f96ce0a63c6f18b7b2baea200","hash":"385f58e92981f27fa54eb52bf60424e87c70a9d8","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/91/f99a0c53b26dd54f56b9e452c68f56b06f8f7e","hash":"3dca8a5629e66599b6e0f146aa32f1b7ce023d89","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/98/67d1132e0e50bbb7df754a63358d70741df6d5","hash":"3cb710a1faee73c08036f5e2df7df3a7ce29e9dd","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/99/be66a33ab4ebc34f62f2880a0e0cc6d334d0f2","hash":"f2346fe8ddd7d7abf38f2946f3083d8150f502d2","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/aa/da83ad9aa55faa2b34ede31b1d41e16966f80b","hash":"b304541ab95b7969a63ba2ec4f60f5391bd8bb44","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/b1/bb278ca2e50dff1b343f9d5ca025272859432f","hash":"74f0afa72a30268d84613fb0d1d893bba866f01d","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/bb/5755c22b6c1b7461319624f0f000bc947882ee","hash":"2b87a2a354a0fa77cbddf461b03b0b8e43c16a4f","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/ca/3466a8cbf05c2982c58199d6ee71ec6d0271ca","hash":"a9b80b5d827b5e84229b1afd7920d9218dce610f","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/objects/d4/95d28a8fab74d23908f6ccef9e4db2625fbacb","hash":"59e6067b0a806deee7bda6460b36c0f63e2e1db5","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/refs/heads/master","hash":"42b96d49f5eae1a58b8413a60a0c2699e94df28d","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/00/4fa4280892c7d18f6151fac22daf51344c02ea","hash":"7a81ed1087c3792f37bd83137d4034179c911627","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/01/36e1990fcbef0586e0bd4b9d90b96900dcd575","hash":"37ac2f94a41384f4cb66cd74c8313099367a5603","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/01/9a385ce3e8b0232ee5edfa6b4e1dcd44cf142e","hash":"6894d6df0722077c5d21d116f33046625cd57ab8","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/03/f74f308aba6eaa459b8e5b1c7e7203aa9d06ef","hash":"fafadfedfbd5b6b7d49061ee85d3568c791e0f3a","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/08/4d73e711ab990007314dab66ac8da236a98212","hash":"aca52af21085b7a579b275a1e7bb5f1a8818e3d4","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/0f/1d02f84180d20e5abcaabc0c1bd312a873867b","hash":"192e0e348a38739f606fdef8bd5f710339067ff6","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/2b/c9c88e86c252b037a36df9a3d3df519b254bfc","hash":"e647f9721e4f2e1cd52bfff3c80683b787f76a11","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/2d/488e7ac12f9be4cba8a7a383e972449b4ecef7","hash":"e477cea6ada0896804b0e8dab23c9d56825a0ece","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/36/58085a9181df88f19f04603b28f6ea21d199cc","hash":"6a467dd51d39b28c1af9c25869e25c6821f6602a","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/48/1ebe947f06e440e41c1a971be0844e852c1d37","hash":"61fea90ca1824db58df6cfc662bc5b371db02224","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/71/4aebae4e17e00cdb0e82893d9fa39d35b20b59","hash":"d09daa7d244ee40035e6eb67f13867182fb8af86","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/72/14afbfc63460dc013ba6368e8c0886597db666","hash":"f67bc8964bd60f5f78fd2437ae946b4e4021a8d6","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/82/2aa7ea95e2f40a1c9808fcdba0353650781cf9","hash":"07db481043efdac756c39b1a1c9f11048787bb1a","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/83/d5a97b3daaa59cccb44af55f6723f431f2e94a","hash":"448c16fa4f53e5123838d4c3593dcfb15f309905","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/8e/0a48f30df2d542c8e86197067f80ce5f794583","hash":"02367707e47c2549ef585f3b2da72c864d6a8307","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/8f/ca1e70cfeea939105e31d7d17f7c3516120b30","hash":"312d55b1a7fbdcc14c54b3805f0827fc42ad94ed","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/98/a2041bc808f55bbcb9d8b53560e22558338bda","hash":"ebb53379aa2d77ea0832973fa3e44846df0f170f","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/a2/7bba2bf42630fc03150b64fc74f2a29c151a27","hash":"b1afe600ba94298a2905a2cf64c900f5954cc146","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/a5/3476a996e477ae4494a5b47aff4237b9859a73","hash":"cd32f255f625f6325f13df5acdef0df20c1a982a","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/a8/63332915ebfd107ca4418c25c80674875c422b","hash":"f12e708237bcf98c072e73e45f1542cfb5646839","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/ae/aa7a68a7131bd03e0bce06f45bfdfa1cd93587","hash":"d7d37380ba502a4050834df40227d612cf911595","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/b1/97881becc7883ad3d3e37cbc6b33f29ef89512","hash":"c044f51aeff15821889c1a2b036ee99b742a35db","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/b2/6b015c6a0aacd5fcbd3fd3a09b0b216855f35c","hash":"6924e4c4558366a76578a2497d2fca15ef39a9f8","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/b6/eda56cb9647d239b26d86f579204cbccf745fe","hash":"12e479d3dfe08df6f9d4d56be2f0a17d9720d846","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/c0/018cb7262951a7eea4001bea16bf6c1db1de0e","hash":"b54299894dbbf00b3187ae3e16a480a91ca75e73","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/c7/8ceb135b768a369ded42f77d4db3f6363bde20","hash":"aa90e157f2a043dad6017bab2e4aa699f6236a63","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/d1/94060fce08431ebef4cb5f4c02739b913373cb","hash":"b9022b117b03703b5fa8af85fc076b692bde33cf","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/e5/dc795cdf7d9163cc736be938a9707f73869c9f","hash":"57163dfa4eebe09d57ede37ee259b7cbb2b1e643","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/f0/acd06a59665dabfb6eb0608f0a797fdcd44158","hash":"f85f3dbe326b8752f6e32c7169ed3b409f4167b7","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/f1/dcdfc585f60cb1614c480c3b06a1632b1b6d8e","hash":"606959b7d91b2ed28c670c607623ce36ab3a0c07","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/f4/5d8f110c3034162a1091dafe4b03d2e56b323e","hash":"963dad8248030a8d7b185f4726e40a65a0583c0e","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/objects/f6/8184f97255dfd504e22775df6450edb9b51d70","hash":"b0a36dcf81780a9f82db6318daa065200e16efee","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/refs/heads/master","hash":"de1c871eebc3a4c2459021ac3233e709765d1957","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/03/c40a4b50e21c63a0e27b1fbcd014168ae3f6da","hash":"987ca2a1169e875a5ac73e8a1a906b9ae88d4d22","modified":1558047929000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/03/eb19e6b3194a820c462bc63177b6fc2bda245f","hash":"0be88820832fa6ea30d56905e98b27798805dc92","modified":1558047930000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/09/3d290f60c3b467d503633531d7ce7cdd42dd75","hash":"ab09bc8bfc9079e408dc6facc1bfd9aa5d6bdef9","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/0b/de10292fcd5dd4b66d1bf60f62ea7d7a30b310","hash":"37710386189fe435ea20541a69c1a9b833b5f50b","modified":1558047930000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/0c/dada082d621dbfdd00f7020c33dc751129167f","hash":"b490c11cdefde6b331a7d4ddb055e34ad08459d8","modified":1558047929000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/1a/f9d30697fd2194a4132a3a6647722be2eb75dc","hash":"0f686b4e26b1e751509ded8a2db697b1d7938004","modified":1558047929000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/1b/3d1cd16f3e6ce99ea92c7e9c0b78ee30a8c346","hash":"16569e1c4912fd762f32b13de839d05b9c319e54","modified":1558047929000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/1f/0b95a965630f47a7264fe9e9456ed7da36c2aa","hash":"6e98b6d7740bf53074339ce383089320fe1962b9","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/21/77c1416c8e91ed918b6d3cf7f333d99d659a24","hash":"7330016805a652c2153bfcfbdd4c3c50e5b5a642","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/29/4f11136ee13277ee96ec3bb56d810f43655298","hash":"a294c3770aa5e7ed386075202f5b88048e1d170d","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/2f/9eba51ec174b1e0c719d12cafa7c3c07140471","hash":"fc994d9d8b3b21ec7c941eea7e3862970e297e9b","modified":1558047929000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/36/3db3ce197d25b8c64db663aa9000a181511461","hash":"f87bc2ce87e37d0ee60eceef8be89dae4c52e01d","modified":1558047929000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/3a/4c8581b3aa0d4f9192de158bd4223a90d646b5","hash":"a64efe9f8e2db0ff3cfb7b5e71fedf229ce290fd","modified":1558047929000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/3a/cef7449b991ee78bb5b7f2f121996b9ec9bba4","hash":"d9165d5939be17750b9edad5d0fc32029e4a23d6","modified":1558047930000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/3c/6fef4314903036253335d4550346f6b927c721","hash":"1ee4e7d110363dc5e2676b675c7f7030731cf3a5","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/3f/f2616b188ab71e1abf2029d7d55834c5643fc5","hash":"65bbc360ee3cc66fba71b9fb0baa3cff744327b9","modified":1558047929000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/52/71f18c203d24b27ec7bd977c2d5c61300cea1a","hash":"cdae53ba376df246585a2f44a86d0c7da98bca1f","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/67/6b9f6189356d0201fd72dd6f98db19628a2ff5","hash":"250795ea0af79524945e66b28f233eb8bd9ee7dd","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/69/a20d65d83035fdb01734a8eabe3340f740a4cb","hash":"9e95b02d8e43ec92e06bee3f60dffb74e8e7b9fa","modified":1558047929000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/6b/128053933889f264c239abe0d381523daa8fa5","hash":"23df1e6daed83528bc2f36980678ecc31e17f09e","modified":1558047929000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/6e/a4473e91dc2dbc452ff446e7cb04cb2ff16da0","hash":"710066cce498e372a932ff272d3d0eb4345fe3cf","modified":1558047929000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/70/0960a662785b70b5c72909810794e1c18e9891","hash":"ea3c3330dd0a213a3cebdc42ee57d43fb8f9813c","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/79/ae5f64ea4be7e1a108b2f1fc8afbca7bfa1fba","hash":"4e28517d80599b1a6051b1d3f657654aca6333b9","modified":1558047929000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/7d/d7c1e8f79dc9a9a99e290147528d7a47d46830","hash":"c2104c89bcf686b243061b456ddc86d916b84360","modified":1558047930000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/7f/6a7ddb8a04644dc980d83c9878b4621acf82f5","hash":"c517caf5d47c9f1eba2ced6800dab03e2e29a130","modified":1558047929000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/80/5e5d92b903742c45e359b26a06cf86376301d8","hash":"6d39f5d10ed1e3acaaef5ac5999945b65ab12b88","modified":1558047929000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/82/69b6fd29a514f9bd746497b298176228bd4061","hash":"cf527c08b5d88d72939a61446d128eba2fb94be2","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/87/782e1008d1f88a9cb63d59407b1cb9e47b0861","hash":"0af5c5e17b27d8114fddd53d7cae8bb3284ae9af","modified":1558047929000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/89/b7ae569312ae577534d7b58647232fb48bfb08","hash":"a265c0a7e24267bd82d11a48f091d2241edc0080","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/8a/2159d7a0c70d394071e8dcc79502d5cd1fc5e4","hash":"58ff19b7a9a65c9e562b9e1c7ee0ed3ac005b15d","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/8e/3ea1a067348d2a9c066fbf201663b462a3ed6c","hash":"f3168176590ac08570ef75b73ecae2b4a455d753","modified":1558047929000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/a4/6866ca175f7c27daaf6b39c94d930bc27d4ce5","hash":"fc416f7f3f62c338bda28bb56bfa6f8fb49421ff","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/a9/27aca23c7f27f5d1ebf2c4baea3aa5d8676143","hash":"dc3e5c853a502fbe7ea3e35c2f7a2bf94318ade4","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/ae/8fa980e909988af2ebd9423658213d2e7e6bba","hash":"9978e4f223de97e23a047986bf21cbf48663a150","modified":1558047929000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/b0/2d36d33210bc68d3e6451c663eb567ebc5721c","hash":"8d3bac2fa021a8f4609a134167edb84fd46254b2","modified":1558047929000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/ce/175226253f7f31da632b93ab6560debab1bf6d","hash":"55c41b0948cb31fad3a52ab7ac91ba93e6c22751","modified":1558047929000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/d0/32ce3fe05be57b72cc925f86149497229cda13","hash":"59e5036e95b496852ad3b918eac2e4b28a5951f2","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/d2/a00ca1067b93b81dae8ea7d0c9838e935595e8","hash":"4b1ecd5271cdf94c10c2e413c7378adb22e940bb","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/d8/8d5765694f92039daac0f944405d4cf61a0d13","hash":"70d2b236fcd955aa4fa95efc2e18c98919003ec6","modified":1558047929000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/d9/0026fb76d55bba50ee4a221c887a0f1a8e8102","hash":"ac0ac5756be4b24f2249be101665ff29ed93d1f9","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/d9/90e2654ec49768cd50d630db99ee00bee2b13c","hash":"6c5cc041391cb5a6b3e0f2f15f30bd62735ac7fa","modified":1558047930000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/df/932438893faefc6b9f5ba9191913dfeedc2a1c","hash":"ac939ae39ab04abc99c0caaef00849585ff4886d","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/e0/52c7542703df4969a95779bd4dc58b568bcb5e","hash":"b1ccf1650011f74939f07233834bdff21baf4952","modified":1558047929000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/e0/ced7e71c43a729f9653b1c4434b95724fc02ed","hash":"98c61b57d8e5e03cf30d402cfcb840c6e610aaa6","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/e5/6e96bd99ebe3f0dc8f02c979703c3666f6dd9e","hash":"b971fcaae8424ea1b507379afdcdff74359a1525","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/ea/7a1bbd08eb930b5f777ec025493ae0c8cb12d4","hash":"3c428fd65f982afbabbf683163bcc88a4eb4cda0","modified":1558047929000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/ec/00e107b97a0b7a9850219894bf4e533c68bf87","hash":"5b7f94788c3c19c8a0f73f1b712d5d79e0236668","modified":1558047930000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/f4/5d8f110c3034162a1091dafe4b03d2e56b323e","hash":"963dad8248030a8d7b185f4726e40a65a0583c0e","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/fa/be1d6949c228188d07df0f4b99b217c7b7f92e","hash":"de53b76740aff0953bcd79853d8addfabfc29f95","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/fe/47fa8f2d9edef52a8ea859537c9286363ee168","hash":"dfaa57c592a229b220a7241bbd0567ec38f4e578","modified":1558047929000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/refs/heads/master","hash":"c4eb74ff2d41c043f28b886ac88aa60782e75c9e","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/logs/refs/heads/master","hash":"5d0041a5670d700ca775b062e63db09d30e7d0e3","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/logs/refs/heads/master","hash":"226d2605cdc24fbdc931d3c346d715127d83b0bd","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/logs/refs/heads/master","hash":"2e854730ee25a813402a16d857a6f3d0544b43c2","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/logs/refs/heads/master","hash":"0f96ecbb913481a4a2fc912d6b8eda3f67046fc2","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/logs/refs/heads/master","hash":"ff7c50d125e236987f414bf6767bb5ba914bd57d","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/images/header-background.jpg","hash":"5d5232dad22f57ff2739170fcca077e7d73424ce","modified":1558047879000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/objects/76/310b5a7e93e66e7d98aaab2960d6354b2288c5","hash":"84de52193b47c83d01eb8800b063ccd83ad42cf9","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/Han/.git/logs/refs/remotes/origin/HEAD","hash":"5d0041a5670d700ca775b062e63db09d30e7d0e3","modified":1558047915000},{"_id":"themes/hexo-theme-next/source/lib/bookmark/.git/logs/refs/remotes/origin/HEAD","hash":"226d2605cdc24fbdc931d3c346d715127d83b0bd","modified":1558047885000},{"_id":"themes/hexo-theme-next/source/lib/canvas-nest/.git/logs/refs/remotes/origin/HEAD","hash":"2e854730ee25a813402a16d857a6f3d0544b43c2","modified":1558047903000},{"_id":"themes/hexo-theme-next/source/lib/reading_progress/.git/logs/refs/remotes/origin/HEAD","hash":"0f96ecbb913481a4a2fc912d6b8eda3f67046fc2","modified":1558047898000},{"_id":"themes/hexo-theme-next/source/lib/three/.git/logs/refs/remotes/origin/HEAD","hash":"ff7c50d125e236987f414bf6767bb5ba914bd57d","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1558047931000},{"_id":"themes/hexo-theme-next/source/images/mountains-nature-sun-valley-rivers-skyscapes-cloud.png","hash":"f3439e586a1ff6698068e203486f8473df4c1fd2","modified":1558111388682},{"_id":"themes/hexo-theme-next/source/css/main_style.css","hash":"9cf9858dce7d5ac9191ff9e877f630e566896581","modified":1558576583783},{"_id":"themes/hexo-theme-next/source/css/bootstrap.min.css","hash":"58a360d7ef24d8d05737db1712dd5c086597e862","modified":1558194849748},{"_id":"themes/hexo-theme-next/source/css/styles.css","hash":"478c8a0dae3147dc9bc9c8498c70c231bd2fc35c","modified":1558598108355},{"_id":"themes/hexo-theme-next/source/images/close.png","hash":"3ca48361cfe0e41163023d03c26296f375bb3eac","modified":1558196865699},{"_id":"themes/hexo-theme-next/source/images/next.png","hash":"777e92c050f600b4519299c3d786b8f2f459fea4","modified":1558196865699},{"_id":"themes/hexo-theme-next/source/images/prev.png","hash":"6640a3432f7ba7aea6129cdf7a5d3eabd47c295c","modified":1558196865700},{"_id":"themes/hexo-theme-next/source/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1558272859295},{"_id":"themes/hexo-theme-next/source/fonts/fontawesome-webfont.woff2?v=4.5.0","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1558272889029},{"_id":"themes/hexo-theme-next/source/css/options.css","hash":"92559e0a43fe7ebcb1aaaf9461e7c8dc49f6e651","modified":1558273371097},{"_id":"themes/hexo-theme-next/source/images/logo.png","hash":"dd905706ba505451630a996a1aab01dcb4bef359","modified":1558273442679},{"_id":"themes/hexo-theme-next/source/css/cff-style.css","hash":"3ece83647713098f12d2f7c9740102889084733a","modified":1558275088617},{"_id":"themes/hexo-theme-next/source/css/classic.css","hash":"545f5b15af406e726b7179fc3dcd270e6eb7a11f","modified":1558450925406},{"_id":"themes/hexo-theme-next/source/css/style1.css","hash":"d9863eb9b861d0dbb220003b00a55d434e8a3c8f","modified":1558450724555},{"_id":"themes/hexo-theme-next/source/images/17818158_1174996802628213_4662550512955031552_n.jpg","hash":"a9157aeefc0a9fcdb78871035f0239a51f8d8deb","modified":1558279747053},{"_id":"themes/hexo-theme-next/source/images/18011985_194692447716449_4036966420095959040_n.jpg","hash":"9902f6ee9bb9ab258715ee7d5aa40d1ccacec8b6","modified":1558279747053},{"_id":"themes/hexo-theme-next/source/images/18096488_1830607597262728_5575911188606222336_n.jpg","hash":"6f3cce5944b7e35662605d8eeb473d7135262f54","modified":1558279747054},{"_id":"themes/hexo-theme-next/source/images/18095990_1760655587597268_1212529865354379264_n.jpg","hash":"04a7893b777198cec7dca3d5a02d6cf4cc849fa0","modified":1558279747054},{"_id":"themes/hexo-theme-next/source/images/18251563_1436576526404535_5034524337537810432_n.jpg","hash":"feca1416ecc30a32c8f9a3248fc20a78ea3bb39a","modified":1558279747055},{"_id":"themes/hexo-theme-next/source/images/18251816_455478884802616_4846069457581244416_n.jpg","hash":"31fa9ddd3a87dbcd6057e7758f906f1843c154e6","modified":1558279747055},{"_id":"themes/hexo-theme-next/source/images/18298992_1905071053110183_5124787653698387968_n.jpg","hash":"bcce1c79484d6b67f5c7857bcdf552b77268e4d1","modified":1558279747056},{"_id":"themes/hexo-theme-next/source/images/18299179_125245014697150_1635022718770348032_n.jpg","hash":"a11bd405d736ae30b0b2bfe799129e5badcec67a","modified":1558279747056},{"_id":"themes/hexo-theme-next/source/images/9583859_120x120.jpg","hash":"0cc07f2230a17e358c451c76a56311c9c4528800","modified":1558279747061},{"_id":"themes/hexo-theme-next/source/images/A7G_Pk7bZm81-620x300.jpg","hash":"1c836206cd5dcf7785cc3aa09e71b6e37a8bb813","modified":1558279747063},{"_id":"themes/hexo-theme-next/source/images/photo-1428908728789-d2de25dbd4e2-e1434466699552-620x300.jpg","hash":"caf05c9b4a906a581fe5a9a14019e47dacd54e6b","modified":1558279747064},{"_id":"themes/hexo-theme-next/source/images/photo-1429637119272-20043840c013-620x300.jpg","hash":"9ac0d0a86c29b73b64e9d4eea2baa9d9101387be","modified":1558279747064},{"_id":"themes/hexo-theme-next/source/images/post4-620x300.jpg","hash":"858e7d571ae8e64127731dd6f2d9b28770aa9d00","modified":1558279747065},{"_id":"themes/hexo-theme-next/source/images/post5-620x300.jpg","hash":"33914a389d04bec268011fabeef71e76a7ba209f","modified":1558279747066},{"_id":"themes/hexo-theme-next/source/images/11843368213_6c58b49694_b-620x300.jpg","hash":"8770ba3f5a682b66a9ca6c24e234979b4f23df03","modified":1558279747052},{"_id":"themes/hexo-theme-next/source/images/1a05816e011a83c0f5d0b1384db57d6f-620x300.jpg","hash":"a279c66a290af24af859aecb8e699112624e4560","modified":1558279747057},{"_id":"themes/hexo-theme-next/source/images/4aa2aae13be4978069e5e2bd87818f76-1024x652.jpg","hash":"a828deb1f288722d473fb441a129b51642d855a5","modified":1558279747060},{"_id":"themes/hexo-theme-next/source/images/1152705a12fb12503720e0bb05f1ca79.jpg","hash":"1b8e077a9f400ec94b93741e48c9a8655c3c3c92","modified":1558279747051},{"_id":"themes/hexo-theme-next/source/images/1.jpg","hash":"d6acee9612d03cb1da1eaa40861dc65760395f51","modified":1558279747051},{"_id":"themes/hexo-theme-next/source/images/3.jpg","hash":"8f24824190bc4b2f58e20228989ab2aaa90a58c0","modified":1558279747059},{"_id":"themes/hexo-theme-next/source/images/2.jpg","hash":"0d69a3453f92d66e3a8d83a965c8cdc5eafea0ee","modified":1558279747058},{"_id":"themes/hexo-theme-next/source/images/260f54ad745397d5eaf5265368610c32.jpg","hash":"3f2727033aadd7f813748c57e0f3d2cbea5b261e","modified":1558279747058},{"_id":"themes/hexo-theme-next/source/images/author.jpg","hash":"3f721018b65fc17b420c5478d12d0e53a1aa63c8","modified":1558279747063},{"_id":"themes/hexo-theme-next/source/images/6.jpg","hash":"305d1c8a71959f89797c31555d085aa7411fba87","modified":1558279747061},{"_id":"themes/hexo-theme-next/source/images/4.jpg","hash":"dd2331e4a7d2d080d5307e280280fff79d9bf390","modified":1558279747060},{"_id":"themes/hexo-theme-next/source/images/picture","hash":"049ed1fb4c34cb7cb714c8a2fa779a48d8f4eeaa","modified":1558279823914},{"_id":"themes/hexo-theme-next/source/images/101147714.html","hash":"8749409945c2dfb96cf0ed3b24f96efdb32521d4","modified":1558279873454},{"_id":"public/js/editplusgenkey.js","hash":"f33c4eab0f18a82efc28609fb599c08b709f7a9c","modified":1558336111003},{"_id":"public/404.html","hash":"65cfc6811c95d974bc2aa9c079254377aeb62037","modified":1558336111004},{"_id":"public/atom.xml","hash":"d93bff2da8283843d162c5e25113473ffe112d2c","modified":1558452809563},{"_id":"public/sitemap.xml","hash":"87411eed7407c6d440afbd931194852e87ca8e58","modified":1558452809563},{"_id":"public/google11af67ed2a64f239.html","hash":"3343d17a9ab68b22ba0bff9ed4f7d86bae5dd291","modified":1558531507069},{"_id":"public/about/index.html","hash":"c7fbe8aaf02dbc81971374a7ac9d13bd73c71e0d","modified":1558531507069},{"_id":"public/categories/index.html","hash":"29c40b08c36e059b62154059be20952659da719b","modified":1558531507104},{"_id":"public/tags/index.html","hash":"93d2168f02135dcd6ae8944fbe8613abde6956a6","modified":1558531507104},{"_id":"public/2018-04-26-kubernetes集群之路etcd集群部署.html","hash":"0075d9560df0df803d7b74a59231d6bf4778cad2","modified":1558531507103},{"_id":"public/2018-03-26-Kubernetes集群之路之TLS证书配置.html","hash":"06739ecc7ad2d56334ccee39241b1d9e125ab575","modified":1558531507103},{"_id":"public/2018-01-26-lua读取redis数据的null判断.html","hash":"682b644de707034bcae6e2be38b5801d77ac9b8a","modified":1558531507104},{"_id":"public/2017-09-06-聊聊Mybatis-Update操作返回值.html","hash":"978ad7ba52d410284f2fe4330459e2da15369e0c","modified":1558531507103},{"_id":"public/2017-08-21-Gradle、Maven项目相互转换.html","hash":"dbee9ccf3289d05f8449034e872615a1b5c2c199","modified":1558531507104},{"_id":"public/2017-07-11-Docker非Root用户运行.html","hash":"436c815582324d6950848953b11fd0a738cf1fc8","modified":1558531507104},{"_id":"public/2017-06-30-Spring-Boot使用Swagger自动生成Api-Doc.html","hash":"1863ab3cdfaeace9110bfb607527c0b4bb1e89bd","modified":1558531507104},{"_id":"public/2017-06-28-解决Git-refusing-to-merge-unrelated-histories问题.html","hash":"7428878e4fd0e7553bbd774e1ca53f54b946ea95","modified":1558531507104},{"_id":"public/2017-06-12-Docker-Compose-链接外部容器的几种方式.html","hash":"8d6f9ffa284fd74947bffcee883a7245b7eb3f3b","modified":1558531507104},{"_id":"public/2017-05-20-解决Mysql的Python驱动安装失败.html","hash":"8d03c22c5e52f558c283b3a0b867411971fd9f32","modified":1558531507104},{"_id":"public/2017-03-21-Android-Studio支持生成Java-Native方法签名.html","hash":"877f2b751f45f2fec02f4df40f5c4c38df2448e9","modified":1558531507104},{"_id":"public/2017-01-13-FFmpeg折腾笔记之编译FFmpeg.html","hash":"dd1e2701faf39cb3eec041ae3ddc0d82a234b7fe","modified":1558531507104},{"_id":"public/2016-11-24-Mac自带VNC-Client.html","hash":"bc8d267662df13678ea9ad1ee89462736eb1d0cf","modified":1558531507104},{"_id":"public/2016-11-24-开启Git大小写敏感.html","hash":"b64030563ecdb852e125ac86c6b08b0c8c909a29","modified":1558531507105},{"_id":"public/2016-10-26-基于LeanCloud、Telegram实现多说评论推送.html","hash":"920c454b164c344b18e930539b53e5349e607793","modified":1558531507105},{"_id":"public/2016-09-10-AndroidProcessbeKilledweShoudIDo.html","hash":"ef40f83bbc3b2e652220d450fa2e28d5071816d4","modified":1558531507105},{"_id":"public/2016-07-03-Android之Keystore文件签名.html","hash":"04c8716c4fe4f468b8ac0f0e19b9f3d02e85674a","modified":1558531507105},{"_id":"public/2016-07-02-RxJava配合Retofit接收错误body.html","hash":"668747a4f4796915938162bbbae262ec4bcd4036","modified":1558531507105},{"_id":"public/2015-10-21-为NexT主题添加文章阅读量统计功能.html","hash":"5ebe6c90e8ac3d4972c7d9dec27b2a2aae2a111f","modified":1558531507105},{"_id":"public/2015-09-04-Create-a-Simple-Android-Keyboard.html","hash":"b6292a355b29c06c92275209ff9c429b4827eea1","modified":1558531507105},{"_id":"public/2015-08-20-MySQL开启远程访问权限.html","hash":"d9d19d9618af835c04139e682f82e03445778549","modified":1558531507105},{"_id":"public/2015-07-25-多说主动邮件提醒.html","hash":"0752a7a5be0d02e928ed693f37de9c29349bf4b8","modified":1558531507105},{"_id":"public/2015-07-18-基于Debian-Linux搭建Git服务器.html","hash":"98b8b6b3c17e0a2cbc11ae6ee2609326deed67a6","modified":1558531507106},{"_id":"public/2015-07-06-自动备份Hexo博客源文件.html","hash":"858271d9a41610ede9c25ec36586241d2fe00bd2","modified":1558531507105},{"_id":"public/2015-07-02-EditPlus-Licenses在线生成器.html","hash":"733d54b81854b409ffca437772e21fff86bb7f53","modified":1558531507106},{"_id":"public/2015-06-30-常见的开源许可证区别.html","hash":"7a5168aaff64e72f3d7fd5ae1a2b0655f1b059be","modified":1558531507106},{"_id":"public/2015-06-29-Git常用命令.html","hash":"cc305ae14b1069a95aceb389b628504db03274e9","modified":1558531507106},{"_id":"public/2015-06-29-Hexo添加文章时自动打开编辑器.html","hash":"4d564c58195b7120e5412bd8717480d45809527d","modified":1558531507106},{"_id":"public/2015-06-02-Shell学习笔记.html","hash":"ebef2f2f462c319c3ba89fa7d0fe871429aafe37","modified":1558531507106},{"_id":"public/2015-04-29-欢迎光临我的博客.html","hash":"cd6221261b858f7e56b897f4881860ff81eed4c8","modified":1558531507106},{"_id":"public/2015-04-27-Debian下配置exim4-邮件服务器.html","hash":"aee52f18268d7c05bd09f5f1303a15b48bb682ad","modified":1558531507106},{"_id":"public/2015-04-24-Linux-学习笔记-软件包管理.html","hash":"a540f0515fa2cd0e5ae67248e060376466c20f09","modified":1558531507107},{"_id":"public/2015-04-06-备份Hexo博客源文件.html","hash":"1258f49d42241c5aae7702eeed92e47a1fe9f080","modified":1558531507107},{"_id":"public/2015-04-05-Android应用关闭所有Activity.html","hash":"cf99fbc3fbb844722ca80f7542fc0fc5cbf73bda","modified":1558531507106},{"_id":"public/2015-04-01-Create-an-Android-IME.html","hash":"4d23e067fd7ae5acb45206dd155aec839df3a5f6","modified":1558531507106},{"_id":"public/archives/index.html","hash":"656e317e268f0fde4075caacdbe150882641cd6b","modified":1558531507117},{"_id":"public/archives/page/2/index.html","hash":"cff3b1847f49a74c80ca6041ab2cba0258b6647d","modified":1558531507119},{"_id":"public/archives/2015/index.html","hash":"76f1573de94a4fbc89ffdc6e41f7bc07728bb2e8","modified":1558531507119},{"_id":"public/archives/2015/04/index.html","hash":"71ec7f11c0fb09cf39e6a3cfc4c33aaa0c9922b4","modified":1558531507118},{"_id":"public/archives/2015/06/index.html","hash":"3df6d06e59a44e8f36127b70f3208e18f6811086","modified":1558531507118},{"_id":"public/archives/2015/07/index.html","hash":"4423f2a85862295e84f9a1f55adbc2109f91719d","modified":1558531507118},{"_id":"public/archives/2015/08/index.html","hash":"b4fb0a06413e5f6d0b1d2477b543fb76ad793a98","modified":1558531507118},{"_id":"public/archives/2015/09/index.html","hash":"b9063f8c2de1de26a397476a925ee042abb19139","modified":1558531507118},{"_id":"public/archives/2015/10/index.html","hash":"b4781f8aa8bd25e168ca035421a422ba63bd1100","modified":1558531507118},{"_id":"public/archives/2016/index.html","hash":"49c4b0a8bc34ecf80bb7a514b6b6e66548ac47e2","modified":1558531507119},{"_id":"public/archives/2016/07/index.html","hash":"c6bc5d812adbd0a28a14b66b30129b3971e63c99","modified":1558531507118},{"_id":"public/archives/2016/09/index.html","hash":"567d688f917c5555435e04131fb383afba6ea519","modified":1558531507120},{"_id":"public/archives/2016/10/index.html","hash":"13172bcec8572d63da2a0e4b5a19c1836b381d7d","modified":1558531507119},{"_id":"public/archives/2016/11/index.html","hash":"5da3772b5b7b7c07e7e9072fb0e86c78209e1654","modified":1558531507119},{"_id":"public/archives/2017/index.html","hash":"32bacbed0e4e06eabde21258a35aa82160ce03db","modified":1558531507119},{"_id":"public/archives/2017/01/index.html","hash":"2001b9bb085efb8b4bd928a9b3035f182fe5296f","modified":1558531507119},{"_id":"public/archives/2017/03/index.html","hash":"179b85ffcd2fbd8309edaaa707aab37d4a19172e","modified":1558531507119},{"_id":"public/archives/2017/05/index.html","hash":"b02e6edabc51c9ea43221d64fbf48019dc0d8886","modified":1558531507119},{"_id":"public/archives/2017/06/index.html","hash":"e1f9bf2ff25ef18fa14f0ab2e6f6c64bf4c2c771","modified":1558531507119},{"_id":"public/archives/2017/07/index.html","hash":"d6f432241134356a7126f11519d9d9f7142bc8e7","modified":1558531507120},{"_id":"public/archives/2017/08/index.html","hash":"97fd8f8fb3ec8f4df415eb40b62c8dca9c1bc5fb","modified":1558531507120},{"_id":"public/archives/2017/09/index.html","hash":"7380e84671855f3809baca442f7769af06ca8ad6","modified":1558531507120},{"_id":"public/archives/2018/index.html","hash":"ab094ad90093590106286b231299be587b7219d8","modified":1558531507120},{"_id":"public/archives/2018/01/index.html","hash":"8d1572f3b093c2a76de314ed2bbaa297c4427423","modified":1558531507120},{"_id":"public/archives/2018/03/index.html","hash":"b562a6d0b01dae48bfe7525b1599512175b13c53","modified":1558531507120},{"_id":"public/archives/2018/04/index.html","hash":"bbd4982f90e3e7db4e67e2e806854dcdc186b28d","modified":1558531507120},{"_id":"public/categories/Android/index.html","hash":"24158f58ce7bc1293b0d9a8b86cf777f02a28443","modified":1558531507107},{"_id":"public/categories/Linux/index.html","hash":"45d5c771f9d74a50a8309dd81ce6eaa4cb1619bb","modified":1558531507107},{"_id":"public/categories/折腾/index.html","hash":"dfd43ef8a1bfdd58415e01c212aae33b50681990","modified":1558531507107},{"_id":"public/categories/Hexo/index.html","hash":"9a07679eefeb80380ff5b7e11cfbafcaf26a8e3e","modified":1558531507107},{"_id":"public/categories/数据库/index.html","hash":"9fe8da11d6382d46805555d091b3d9576a4e49ba","modified":1558531507107},{"_id":"public/categories/学习笔记/index.html","hash":"161bb1b69324c0f34b0d8814eb19950ce1dcb6a2","modified":1558531507107},{"_id":"public/categories/Python/index.html","hash":"2f5eedeec13c1b89b26db5c439fab30b3cba7f93","modified":1558531507107},{"_id":"public/categories/Notes/index.html","hash":"9ee036c6efd11ab724fea971dd2640438b79ff6d","modified":1558531507107},{"_id":"public/index.html","hash":"ce6fc5f721e9a994eb5d15daf6a2082eab8e771b","modified":1558531507107},{"_id":"public/page/2/index.html","hash":"e330160ab669b7bb510a71eff578506d9547cb97","modified":1558531507117},{"_id":"public/page/3/index.html","hash":"17d8134b980aef7957c2799d6a340b934f47a24b","modified":1558531507117},{"_id":"public/page/4/index.html","hash":"2e126e38ebf6ec31c6ef33bb1a68cd376c0f7ca9","modified":1558531507118},{"_id":"public/page/5/index.html","hash":"8ab59c806d432d447ed29319730ca84c9ce18c5c","modified":1558531507117},{"_id":"public/page/6/index.html","hash":"7de1f299c413ba87d941d8804d9e77af27169ff7","modified":1558531507118},{"_id":"public/page/7/index.html","hash":"47fc8953be90eda48bdee7b5eba5fed277b3900a","modified":1558531507118},{"_id":"public/tags/Gradle/index.html","hash":"2690432f2dac4e74f2ffa14d88a2ba7f3bd75660","modified":1558531507121},{"_id":"public/tags/Maven/index.html","hash":"01b6b067b29637c35451995a666c74d0d4aeb0f6","modified":1558531507120},{"_id":"public/tags/Android/index.html","hash":"7cf26144b47a19d9037b4ffd335a0968896d6009","modified":1558531507121},{"_id":"public/tags/Android-Studio/index.html","hash":"6f0caf0be4a0ad852faad755d602b20f42ed0c42","modified":1558531507121},{"_id":"public/tags/JNI/index.html","hash":"9cc67cb068753215ae44817ff453d31aef94a739","modified":1558531507121},{"_id":"public/tags/Activity/index.html","hash":"4976ef8c5e765657e44ea650936aa4d52ef3a033","modified":1558531507121},{"_id":"public/tags/Debian/index.html","hash":"549d1d451847ad472ed49e5cb6522b44f77929a9","modified":1558531507121},{"_id":"public/tags/Linux/index.html","hash":"d83ec02805143053241739710de8df0740b58389","modified":1558531507121},{"_id":"public/tags/Exim4/index.html","hash":"04b4f3f48d72419fa1716465bf304eaeaad2f05b","modified":1558531507122},{"_id":"public/tags/服务器/index.html","hash":"0fbbaa2580f89749d553dc0f77b5ede1ceb17e15","modified":1558531507121},{"_id":"public/tags/Docker/index.html","hash":"b6e35119e5d035749cb1efdda4bbea9fe6623429","modified":1558531507122},{"_id":"public/tags/Docker-Compose/index.html","hash":"3eb02de9c05a49a8dc71121123934c385dd661b4","modified":1558531507122},{"_id":"public/tags/激活/index.html","hash":"0aca4d71fa3834d5928b28c7b99e0fb07d604a81","modified":1558531507122},{"_id":"public/tags/FFmpeg/index.html","hash":"f00b5b09013b1386c82207f993c29795e9ef6c4c","modified":1558531507122},{"_id":"public/tags/NDK/index.html","hash":"c3a72e4b99710dc017d94c8dd2b4afd8c3c83ec6","modified":1558531507122},{"_id":"public/tags/Hexo/index.html","hash":"43da95159911aed80961bc9e9190d84e4cc56904","modified":1558531507122},{"_id":"public/tags/MySQL/index.html","hash":"c63d4d0941f1c0be00dd834c775a8210e7ebc293","modified":1558531507122},{"_id":"public/tags/Mac/index.html","hash":"48fa580634142dbfcb02af7bc2c014413322067c","modified":1558531507123},{"_id":"public/tags/Tips/index.html","hash":"9c6d9afb3c98badd05154cef235e23c9b789774b","modified":1558531507122},{"_id":"public/tags/SHELL/index.html","hash":"d085c218f86e3a471751276a6307ddb9f71923d5","modified":1558531507122},{"_id":"public/tags/笔记/index.html","hash":"db7bc51bdcabbcd76c129b84ba0397da9a6c524e","modified":1558531507122},{"_id":"public/tags/RxJava/index.html","hash":"37f94138db145020de681896e4b2fd38f2136c62","modified":1558531507123},{"_id":"public/tags/Retrofit/index.html","hash":"10e4158590c458595744e4609162602ca7b1d14a","modified":1558531507123},{"_id":"public/tags/Swagger/index.html","hash":"d21a34c62674076742412503eadfd558a77f4197","modified":1558531507123},{"_id":"public/tags/Spring-Boot/index.html","hash":"50ace90c1344708fa5c4a824db8b977391b5fd0d","modified":1558531507123},{"_id":"public/tags/Kotlin/index.html","hash":"06515478797079ad2ba700272b8eadd9382d30b4","modified":1558531507123},{"_id":"public/tags/docker/index.html","hash":"b2a936e638b165d0654d0b26a3f3ba07fe785643","modified":1558531507123},{"_id":"public/tags/kubernetes/index.html","hash":"b29806778a2a8d7b653fd074af8ba77650a0d4a7","modified":1558531507123},{"_id":"public/tags/openresty/index.html","hash":"838b5f63b1df15c0af754b048b179eb88e6456bf","modified":1558531507124},{"_id":"public/tags/lua/index.html","hash":"9aa3da5d875952f79494ab0a8d5e3a8101e46673","modified":1558531507124},{"_id":"public/tags/Redis/index.html","hash":"9beb3075de6f4a38d3d902cd9a3c03309557c914","modified":1558531507123},{"_id":"public/tags/Git/index.html","hash":"912c52f053544605c11fbda2f31c81c032b1ae0a","modified":1558531507123},{"_id":"public/tags/LeanCloud/index.html","hash":"6630710fda8b1ca6b0ed4e76737ed8be8ec60558","modified":1558531507124},{"_id":"public/tags/Python/index.html","hash":"98b4a4ae65f8947c1cf63ba47db93b55f3046001","modified":1558531507124},{"_id":"public/tags/Telegram/index.html","hash":"464c642536acddf856b52ae5d66aca6cfbc83809","modified":1558531507124},{"_id":"public/tags/多说/index.html","hash":"6f21c06f1a139903903f5c8dddb109626bd908f3","modified":1558531507124},{"_id":"public/tags/欢迎/index.html","hash":"d9cecb654e8430acd93e73b8fdb7ebf60d6497cf","modified":1558531507124},{"_id":"public/tags/Mybatis/index.html","hash":"817c5e202426a811e3cef4bc49fe755aa4ce59ce","modified":1558531507124},{"_id":"public/tags/JDBC/index.html","hash":"2fa95c70c3ef4ece96b5e6daa20fbc2e05065571","modified":1558531507124},{"_id":"public/tags/KeyStore/index.html","hash":"144ee083f2ff8138226cf794b0ec9e65ce8a281f","modified":1558531507125},{"_id":"public/tags/linux/index.html","hash":"4e05304bc247413af7542d79d0b56ad1ca9428a3","modified":1558531507125},{"_id":"public/tags/rpm/index.html","hash":"3dbedc4aaadcd9eac99036920cf9b38f09386aa8","modified":1558531507125},{"_id":"public/tags/apt/index.html","hash":"e35a6706b2ddee4a16cd745753800906f863245a","modified":1558531507125},{"_id":"public/tags/yum/index.html","hash":"f006606c69201d13cabde0a0f54b6ec4e061fa25","modified":1558531507125},{"_id":"public/tags/IME/index.html","hash":"66c4634c4b6675568ba6cd1ff6cd92b7c0e59153","modified":1558531507125},{"_id":"public/tags/android/index.html","hash":"5e8fe490bd519b7fdd215037440e96be190673c2","modified":1558531507125},{"_id":"public/CNAME","hash":"27ccdd6482836d9fff4a6b5c86451c69ceed2cf1","modified":1558336111120},{"_id":"public/robots.txt","hash":"3684d3bc44ec384dbc3d382251ab59c942de6331","modified":1558336111120},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1558336111120},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1558336111120},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1558336111121},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1558336111121},{"_id":"public/images/avatar.jpg","hash":"1d6d672dbc5651325306da7cdacd330137c3d4cd","modified":1558336111121},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1558336111121},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1558336111121},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1558336111121},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1558336111121},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1558336111121},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1558336111121},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1558336111121},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1558336111121},{"_id":"public/images/loading.gif","hash":"cf720b50cf8dde0e1a84ce1c6a77788bfc5882d5","modified":1558336111121},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1558336111121},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1558336111121},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1558336111121},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1558336111121},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1558336111122},{"_id":"public/lib/bookmark/LICENSE","hash":"1440355648a72be5b7625fe6fa055b462fcc78b0","modified":1558336111122},{"_id":"public/lib/Han/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1558336111122},{"_id":"public/lib/canvas-nest/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1558336111122},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1558336111122},{"_id":"public/lib/reading_progress/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1558336111122},{"_id":"public/lib/three/LICENSE","hash":"b29db4c99aa5b8d574026f68804051ff4b75466e","modified":1558336111122},{"_id":"public/lib/three/yarn.lock","hash":"9c71c0a7c033fc709c1e683157b1f12037024694","modified":1558336111122},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1558336111122},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1558336111122},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1558336111122},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1558336111122},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1558336111122},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1558336111122},{"_id":"public/images/close.png","hash":"3ca48361cfe0e41163023d03c26296f375bb3eac","modified":1558336111122},{"_id":"public/images/next.png","hash":"777e92c050f600b4519299c3d786b8f2f459fea4","modified":1558336111122},{"_id":"public/images/prev.png","hash":"6640a3432f7ba7aea6129cdf7a5d3eabd47c295c","modified":1558336111123},{"_id":"public/images/logo.png","hash":"dd905706ba505451630a996a1aab01dcb4bef359","modified":1558336111123},{"_id":"public/images/17818158_1174996802628213_4662550512955031552_n.jpg","hash":"a9157aeefc0a9fcdb78871035f0239a51f8d8deb","modified":1558336111123},{"_id":"public/images/18011985_194692447716449_4036966420095959040_n.jpg","hash":"9902f6ee9bb9ab258715ee7d5aa40d1ccacec8b6","modified":1558336111123},{"_id":"public/images/18096488_1830607597262728_5575911188606222336_n.jpg","hash":"6f3cce5944b7e35662605d8eeb473d7135262f54","modified":1558336111123},{"_id":"public/images/18251563_1436576526404535_5034524337537810432_n.jpg","hash":"feca1416ecc30a32c8f9a3248fc20a78ea3bb39a","modified":1558336111123},{"_id":"public/images/18251816_455478884802616_4846069457581244416_n.jpg","hash":"31fa9ddd3a87dbcd6057e7758f906f1843c154e6","modified":1558336111123},{"_id":"public/images/18298992_1905071053110183_5124787653698387968_n.jpg","hash":"bcce1c79484d6b67f5c7857bcdf552b77268e4d1","modified":1558336111123},{"_id":"public/images/18095990_1760655587597268_1212529865354379264_n.jpg","hash":"04a7893b777198cec7dca3d5a02d6cf4cc849fa0","modified":1558336111123},{"_id":"public/images/18299179_125245014697150_1635022718770348032_n.jpg","hash":"a11bd405d736ae30b0b2bfe799129e5badcec67a","modified":1558336111123},{"_id":"public/images/9583859_120x120.jpg","hash":"0cc07f2230a17e358c451c76a56311c9c4528800","modified":1558336111123},{"_id":"public/images/photo-1428908728789-d2de25dbd4e2-e1434466699552-620x300.jpg","hash":"caf05c9b4a906a581fe5a9a14019e47dacd54e6b","modified":1558336111123},{"_id":"public/images/photo-1429637119272-20043840c013-620x300.jpg","hash":"9ac0d0a86c29b73b64e9d4eea2baa9d9101387be","modified":1558336111123},{"_id":"public/images/picture","hash":"049ed1fb4c34cb7cb714c8a2fa779a48d8f4eeaa","modified":1558336111123},{"_id":"public/favicon.ico","hash":"e004748c3b7baf71c8e3e714e92da6bc3b2c653a","modified":1558336111593},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1558336111596},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1558336111597},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"638c652d623280a58144f93e7b552c66d1667a11","modified":1558336111598},{"_id":"public/images/11843368213_6c58b49694_b-620x300.jpg","hash":"8770ba3f5a682b66a9ca6c24e234979b4f23df03","modified":1558336111598},{"_id":"public/images/1a05816e011a83c0f5d0b1384db57d6f-620x300.jpg","hash":"a279c66a290af24af859aecb8e699112624e4560","modified":1558336111598},{"_id":"public/images/4aa2aae13be4978069e5e2bd87818f76-1024x652.jpg","hash":"a828deb1f288722d473fb441a129b51642d855a5","modified":1558336111598},{"_id":"public/images/post4-620x300.jpg","hash":"858e7d571ae8e64127731dd6f2d9b28770aa9d00","modified":1558336111598},{"_id":"public/images/A7G_Pk7bZm81-620x300.jpg","hash":"1c836206cd5dcf7785cc3aa09e71b6e37a8bb813","modified":1558336111598},{"_id":"public/images/post5-620x300.jpg","hash":"33914a389d04bec268011fabeef71e76a7ba209f","modified":1558336111598},{"_id":"public/css/flexslider.css","hash":"7f567b5d26e5aee5c7cc965195e0424a1efc434a","modified":1558336111606},{"_id":"public/css/lightbox.css","hash":"386e3bd1ac4c6f8776af694f401933db319d34d4","modified":1558336111607},{"_id":"public/css/owl.carousel.css","hash":"097c8d67412f44534449ed4cadc6dd22b025801d","modified":1558336111607},{"_id":"public/css/style.css","hash":"9ecf6b9265199eaabae74ac0eef8bdc937cdf121","modified":1558336111607},{"_id":"public/css/owl.theme.css","hash":"d2ca10ebff9784a7fb75545ba6352a7be2a65ee2","modified":1558336111607},{"_id":"public/js/jflickrfeed.min.js","hash":"f90324d39c99c4be577d53cbe6db1661f010a7e0","modified":1558336111607},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1558336111608},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1558336111608},{"_id":"public/js/src/bootstrap.js","hash":"40de94fd18fcbd67a327d63b0d1e242a08aa5404","modified":1558336111608},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1558336111608},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1558336111608},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1558336111608},{"_id":"public/js/src/post-details.js","hash":"d1333fb588d4521b4d1e9c69aef06e0ad1bf0b12","modified":1558336111608},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1558336111608},{"_id":"public/lib/bookmark/index.js","hash":"5e5cba645a1a4531ccbb4782df2f7a075626393f","modified":1558336111608},{"_id":"public/lib/bookmark/bookmark.min.js","hash":"9e525329553335c2484f6faf9e933a6bbee9ab6d","modified":1558336111608},{"_id":"public/lib/bookmark/package.json","hash":"9f06f3432c12b68a2c2fe3f318455b35a965a1da","modified":1558336111608},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1558336111608},{"_id":"public/lib/canvas-nest/canvas-nest-nomobile.min.js","hash":"956eada198babd00f028e8908767cb158926c3f3","modified":1558336111608},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1558336111608},{"_id":"public/lib/reading_progress/package.json","hash":"e404a0bdf26df62eb89173c6fe5f5824345801c5","modified":1558336111608},{"_id":"public/lib/reading_progress/reading_progress.js","hash":"ec68a79421cfba022ac53f46813d013dd48617c0","modified":1558336111608},{"_id":"public/lib/reading_progress/reading_progress.min.js","hash":"b768dc009e6d37dd952632c317f6c33e6e2d89ad","modified":1558336111608},{"_id":"public/lib/three/package.json","hash":"d64e9f4ce441b50e48aa0993e190481223665989","modified":1558336111608},{"_id":"public/lib/three/gulpfile.js","hash":"edd1868be72fde796b0b1f3a7a0316b3c896962a","modified":1558336111608},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1558336111608},{"_id":"public/lib/three/src/canvas_lines.js","hash":"650310ff6783671f8ceccf01f840b20d9c87b491","modified":1558336111609},{"_id":"public/lib/three/src/canvas_sphere.js","hash":"7614790c67d3e79e3390fe688f6b01afad7e3bb1","modified":1558336111609},{"_id":"public/lib/three/src/three-waves.js","hash":"e98e442f14920e9fb8691846dca3a2225d403048","modified":1558336111609},{"_id":"public/css/styles.css","hash":"f854641f62b4da48361a1d435ea13d7fb602d3bc","modified":1558336111609},{"_id":"public/css/options.css","hash":"92559e0a43fe7ebcb1aaaf9461e7c8dc49f6e651","modified":1558336111609},{"_id":"public/css/style1.css","hash":"b08a287802a97cbf1ebc4677b9abd2923f69a19a","modified":1558336111609},{"_id":"public/css/classic.css","hash":"794e405867c59c421cf3ac77e416552def68e307","modified":1558336111609},{"_id":"public/lib/Han/README.html","hash":"3d63363c9ed86205d8caffa56a7876be76eef434","modified":1558336111609},{"_id":"public/lib/bookmark/README.html","hash":"be0c3f6a13505fb32611ef5e7269a7e4f35eecc9","modified":1558336111609},{"_id":"public/lib/canvas-nest/README.html","hash":"dac952f5cf0e6eedfb8d33bab710356798bb0ca5","modified":1558336111609},{"_id":"public/lib/reading_progress/README.html","hash":"3287121425b2e90fc66e6410984e80a8c85d9ecd","modified":1558336111609},{"_id":"public/lib/three/README.html","hash":"b9ead5e5ec2847bc3ae33c34e5d1a2c39dd747e9","modified":1558336111609},{"_id":"public/css/main.css","hash":"f40cf7b79af14712c19b2cb56d3be62783b4efd8","modified":1558336111609},{"_id":"public/images/1152705a12fb12503720e0bb05f1ca79.jpg","hash":"1b8e077a9f400ec94b93741e48c9a8655c3c3c92","modified":1558336111609},{"_id":"public/js/jquery-migrate.min.js","hash":"90532aff6d4121954254cdf04994d834f7ec169b","modified":1558336111618},{"_id":"public/js/jquery.form.min.js","hash":"374aa1f8db17575b0e35eabc46ad82062e09106c","modified":1558336111618},{"_id":"public/js/src/motion.js","hash":"50e57f8acb6924c6999cdcc664ddd3f0730d2061","modified":1558336111619},{"_id":"public/js/src/utils.js","hash":"4284c67ea1435de2acd523f6d48c0d073fd1ad03","modified":1558336111619},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1558336111619},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1558336111619},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1558336111619},{"_id":"public/css/cff-style.css","hash":"24979c4466f6fb2047ab1377ae2cdc9b238f2181","modified":1558336111619},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1558336111619},{"_id":"public/lib/three/canvas_lines.min.js","hash":"97f0e67570574dc8597c5819970508d4e7f7af25","modified":1558336111624},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"333fed4c256c7081e07c7844c097b7970b45b248","modified":1558336111624},{"_id":"public/lib/three/three-waves.min.js","hash":"704e860183acbaaf8de1be65fe5c958e8105f4bf","modified":1558336111625},{"_id":"public/lib/three/lib/Projector.js","hash":"1ad16e96cea2a8a9155bb429c83ef9bdd341ce99","modified":1558336111625},{"_id":"public/images/1.jpg","hash":"d6acee9612d03cb1da1eaa40861dc65760395f51","modified":1558336111625},{"_id":"public/images/3.jpg","hash":"8f24824190bc4b2f58e20228989ab2aaa90a58c0","modified":1558336111625},{"_id":"public/css/font-awesome.min.css","hash":"ddb3fcb91001dc8c764597f8472555718614b47c","modified":1558336111630},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1558336111630},{"_id":"public/lib/three/lib/CanvasRenderer.js","hash":"cf8e1ce6e884023ad0d692cf30f399862407fb40","modified":1558336111631},{"_id":"public/images/author.jpg","hash":"3f721018b65fc17b420c5478d12d0e53a1aa63c8","modified":1558336111631},{"_id":"public/images/2.jpg","hash":"0d69a3453f92d66e3a8d83a965c8cdc5eafea0ee","modified":1558336111631},{"_id":"public/images/260f54ad745397d5eaf5265368610c32.jpg","hash":"3f2727033aadd7f813748c57e0f3d2cbea5b261e","modified":1558336111632},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1558336111637},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1558336111640},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1558336111641},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1558336111641},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1558336111651},{"_id":"public/css/main_style.css","hash":"7c479b33a9a95b2310b1454a240742e4ed71deb5","modified":1558336111654},{"_id":"public/images/101147714.html","hash":"3455928f4aef881f7b1bc767b244ee90e6995967","modified":1558336111655},{"_id":"public/images/background.png","hash":"457d1a76fd6edd8bb78eacbd8a39cf21f870404c","modified":1558336111655},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1558336111662},{"_id":"public/images/6.jpg","hash":"305d1c8a71959f89797c31555d085aa7411fba87","modified":1558336111667},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1558336111673},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1558336111676},{"_id":"public/js/jquery.js","hash":"076524186dbbdd4c41afbbd6b260d9e46a095811","modified":1558336111679},{"_id":"public/images/4.jpg","hash":"dd2331e4a7d2d080d5307e280280fff79d9bf390","modified":1558336111679},{"_id":"public/images/header-background.jpg","hash":"5d5232dad22f57ff2739170fcca077e7d73424ce","modified":1558336111680},{"_id":"public/css/bootstrap.min.css","hash":"58a360d7ef24d8d05737db1712dd5c086597e862","modified":1558336111682},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1558336111685},{"_id":"public/images/mountains-nature-sun-valley-rivers-skyscapes-cloud.png","hash":"f3439e586a1ff6698068e203486f8473df4c1fd2","modified":1558336111687},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1558336111692},{"_id":"themes/hexo-theme-next/source/js/custom.js","hash":"3590de70be3dd55eccddb163908f9bd2627d208e","modified":1558596283083},{"_id":"themes/hexo-theme-next/source/js/menu.js","hash":"6d0c1a6a71e618bf7cb7f99154f266258caf00ed","modified":1558580871650},{"_id":"public/js/menu.js","hash":"251484c8f7f05c590f0b6e1ecaf7f515cc073c04","modified":1558452811874},{"_id":"public/js/custom.js","hash":"15e79682cb99df49f822dca9eaa2eefbefcdbad5","modified":1558452811878},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/indagate.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558487009641},{"_id":"themes/hexo-theme-next/source/css/_variables/Indagate.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558487081133},{"_id":"themes/hexo-theme-next/source/css/_mixins/Indagate.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1558487120036},{"_id":"themes/hexo-theme-next/source/images/wechat-qcode.png","hash":"941bdc74cacc6bf4f8309bff948db2bf95a7a8b2","modified":1558577216109},{"_id":"themes/hexo-theme-next/source/images/wechatpay.jpg","hash":"04c2350b5c6ea8a11c3baf571c70329363d133ac","modified":1558597606811},{"_id":"themes/hexo-theme-next/source/js/Valine.min.js","hash":"9f02172f175681e3783f44e0e34248e6d418b678","modified":1554099983000}],"Category":[{"name":"Android","_id":"cjvtoyb8w000j2ev2ubmqt3i6"},{"name":"Linux","_id":"cjvtoyb93000t2ev2jl1pe76i"},{"name":"折腾","_id":"cjvtoyb96000z2ev2c7tfux1k"},{"name":"Hexo","_id":"cjvtoyb9a00172ev22w5naagj"},{"name":"数据库","_id":"cjvtoyb9d001e2ev229keckvw"},{"name":"学习笔记","_id":"cjvtoyb9g001m2ev20ut2rx7o"},{"name":"Python","_id":"cjvtoyb9k001v2ev27n8mejfo"},{"name":"Notes","_id":"cjvtoyb9n00232ev2958soutr"}],"Data":[],"Page":[{"layout":"false","_content":"<!DOCTYPE html>\n<html>\n    <head>\n        <title>页面没有找到</title>\n\t\t\t <meta charset=\"utf-8\"/>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n        <link href=\"//fonts.googleapis.com/css?family=Lato:100\" rel=\"stylesheet\" type=\"text/css\">\n\n        <style>\n            html, body {\n                height: 100%;\n            }\n\n            body {\n                margin: 0;\n                padding: 0;\n                width: 100%;\n                color: #B0BEC5;\n                display: table;\n                font-weight: 100;\n                font-family: 'Lato';\n            }\n\n            .container {\n                text-align: center;\n                display: table-cell;\n                vertical-align: middle;\n            }\n\n            .content {\n                text-align: center;\n                display: inline-block;\n            }\n\n            .title {\n                font-size: 72px;\n                margin-bottom: 40px;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"content\">\n                <div class=\"title\">404 NO FOUND</div>\n                <a href=\"http://doublemine.github.io\">返回首页</a>\n            </div>\n        </div>\n    </body>\n</html>\n","source":"404.html","raw":"layout: false\n---\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>页面没有找到</title>\n\t\t\t <meta charset=\"utf-8\"/>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n        <link href=\"//fonts.googleapis.com/css?family=Lato:100\" rel=\"stylesheet\" type=\"text/css\">\n\n        <style>\n            html, body {\n                height: 100%;\n            }\n\n            body {\n                margin: 0;\n                padding: 0;\n                width: 100%;\n                color: #B0BEC5;\n                display: table;\n                font-weight: 100;\n                font-family: 'Lato';\n            }\n\n            .container {\n                text-align: center;\n                display: table-cell;\n                vertical-align: middle;\n            }\n\n            .content {\n                text-align: center;\n                display: inline-block;\n            }\n\n            .title {\n                font-size: 72px;\n                margin-bottom: 40px;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"content\">\n                <div class=\"title\">404 NO FOUND</div>\n                <a href=\"http://doublemine.github.io\">返回首页</a>\n            </div>\n        </div>\n    </body>\n</html>\n","date":"2019-05-16T15:24:05.639Z","updated":"2019-05-16T22:56:27.000Z","path":"404.html","title":"","comments":1,"_id":"cjvtoyb6900002ev2it7yn26m","content":"<!DOCTYPE html>\n<html>\n    <head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n        <title>页面没有找到</title>\n\t\t\t <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n        <link href=\"//fonts.googleapis.com/css?family=Lato:100\" rel=\"stylesheet\" type=\"text/css\">\n\n        <style>\n            html, body {\n                height: 100%;\n            }\n\n            body {\n                margin: 0;\n                padding: 0;\n                width: 100%;\n                color: #B0BEC5;\n                display: table;\n                font-weight: 100;\n                font-family: 'Lato';\n            }\n\n            .container {\n                text-align: center;\n                display: table-cell;\n                vertical-align: middle;\n            }\n\n            .content {\n                text-align: center;\n                display: inline-block;\n            }\n\n            .title {\n                font-size: 72px;\n                margin-bottom: 40px;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"content\">\n                <div class=\"title\">404 NO FOUND</div>\n                <a href=\"http://doublemine.github.io\" target=\"_blank\" rel=\"noopener\">返回首页</a>\n            </div>\n        </div>\n    </body>\n</html>\n","site":{"data":{}},"excerpt":"","more":"<!DOCTYPE html>\n<html>\n    <head><meta name=\"generator\" content=\"Hexo 3.8.0\">\n        <title>页面没有找到</title>\n\t\t\t <meta charset=\"utf-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, maximum-scale=1\">\n        <link href=\"//fonts.googleapis.com/css?family=Lato:100\" rel=\"stylesheet\" type=\"text/css\">\n\n        <style>\n            html, body {\n                height: 100%;\n            }\n\n            body {\n                margin: 0;\n                padding: 0;\n                width: 100%;\n                color: #B0BEC5;\n                display: table;\n                font-weight: 100;\n                font-family: 'Lato';\n            }\n\n            .container {\n                text-align: center;\n                display: table-cell;\n                vertical-align: middle;\n            }\n\n            .content {\n                text-align: center;\n                display: inline-block;\n            }\n\n            .title {\n                font-size: 72px;\n                margin-bottom: 40px;\n            }\n        </style>\n    </head>\n    <body>\n        <div class=\"container\">\n            <div class=\"content\">\n                <div class=\"title\">404 NO FOUND</div>\n                <a href=\"http://doublemine.github.io\" target=\"_blank\" rel=\"noopener\">返回首页</a>\n            </div>\n        </div>\n    </body>\n</html>\n"},{"_content":"google-site-verification: google11af67ed2a64f239.html","source":"google11af67ed2a64f239.html","raw":"google-site-verification: google11af67ed2a64f239.html","date":"2019-05-16T15:24:05.640Z","updated":"2019-05-16T22:56:27.000Z","path":"google11af67ed2a64f239.html","title":"","comments":1,"layout":"page","_id":"cjvtoyb6b00012ev2xerlv5fl","content":"google-site-verification: google11af67ed2a64f239.html","site":{"data":{}},"excerpt":"","more":"google-site-verification: google11af67ed2a64f239.html"},{"date":"2015-04-01T07:54:47.000Z","type":"about","_content":"\n\n\n<blockquote class=\"blockquote-center\">\n\nYou got a dream, you gotta protect it. People can't do something themselves,they wanna tell you you can't do it.If you want something, go get it. Period.\n\n</blockquote>\n\n\n\n--------\n\n\n\n<!-- 在校大学生、懒癌晚期、轻度强迫症患者，爱好折腾的学生党。喜欢一切有意思的技术和事情。乱七八糟的技术都有玩过一点，杂而不精。希望自己能对自己喜欢的事物始终保持兴趣和热情。目前从嵌入式Linux驱动开发学习转向移动互联、Web方向的学习。希望自己对热衷的事情能够一直坚持下去。 -->\n","source":"about/index.md","raw":"date: 2015-04-01 15:54:47\ntype: \"about\"\n---\n\n\n\n<blockquote class=\"blockquote-center\">\n\nYou got a dream, you gotta protect it. People can't do something themselves,they wanna tell you you can't do it.If you want something, go get it. Period.\n\n</blockquote>\n\n\n\n--------\n\n\n\n<!-- 在校大学生、懒癌晚期、轻度强迫症患者，爱好折腾的学生党。喜欢一切有意思的技术和事情。乱七八糟的技术都有玩过一点，杂而不精。希望自己能对自己喜欢的事物始终保持兴趣和热情。目前从嵌入式Linux驱动开发学习转向移动互联、Web方向的学习。希望自己对热衷的事情能够一直坚持下去。 -->\n","updated":"2019-05-16T22:56:27.000Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"cjvtoyb8f00032ev2275py8v1","content":"<blockquote class=\"blockquote-center\"><br><br>You got a dream, you gotta protect it. People can’t do something themselves,they wanna tell you you can’t do it.If you want something, go get it. Period.<br><br></blockquote>\n\n\n\n<hr>\n<!-- 在校大学生、懒癌晚期、轻度强迫症患者，爱好折腾的学生党。喜欢一切有意思的技术和事情。乱七八糟的技术都有玩过一点，杂而不精。希望自己能对自己喜欢的事物始终保持兴趣和热情。目前从嵌入式Linux驱动开发学习转向移动互联、Web方向的学习。希望自己对热衷的事情能够一直坚持下去。 -->\n","site":{"data":{}},"excerpt":"","more":"<blockquote class=\"blockquote-center\"><br><br>You got a dream, you gotta protect it. People can’t do something themselves,they wanna tell you you can’t do it.If you want something, go get it. Period.<br><br></blockquote>\n\n\n\n<hr>\n<!-- 在校大学生、懒癌晚期、轻度强迫症患者，爱好折腾的学生党。喜欢一切有意思的技术和事情。乱七八糟的技术都有玩过一点，杂而不精。希望自己能对自己喜欢的事物始终保持兴趣和热情。目前从嵌入式Linux驱动开发学习转向移动互联、Web方向的学习。希望自己对热衷的事情能够一直坚持下去。 -->\n"},{"title":"categories","date":"2015-04-01T07:56:13.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"title: \"categories\"\ndate: 2015-04-01 15:56:13\ntype: \"categories\"\ncomments: false\n---\n","updated":"2019-05-16T22:56:27.000Z","path":"categories/index.html","layout":"page","_id":"cjvtoyb8i00052ev2y559n23v","content":"","site":{"data":{}},"excerpt":"","more":""},{"_content":"/**\n * Created by ĩ on 2015-7-5 0005.\n */\nfunction generateEditplusLicence() {\n    var list = [0, 49345, 49537, 320, 49921, 960, 640, 49729, 50689, 1728, 1920, 51009, 1280, 50625, 50305, 1088, 52225, 3264, 3456, 52545, 3840, 53185, 52865, 3648, 2560, 51905, 52097, 2880, 51457, 2496, 2176, 51265, 55297, 6336, 6528, 55617, 6912, 56257, 55937, 6720, 7680, 57025, 57217, 8000, 56577, 7616, 7296, 56385, 5120, 54465, 54657, 5440, 55041, 6080, 5760, 54849, 53761, 4800, 4992, 54081, 4352, 53697, 53377, 4160, 61441, 12480, 12672, 61761, 13056, 62401, 62081, 12864, 13824, 63169, 63361, 14144, 62721, 13760, 13440, 62529, 15360, 64705, 64897, 15680, 65281, 16320, 16000, 65089, 64001, 15040, 15232, 64321, 14592, 63937, 63617, 14400, 10240, 59585, 59777, 10560, 60161, 11200, 10880, 59969, 60929, 11968, 12160, 61249, 11520, 60865, 60545, 11328, 58369, 9408, 9600, 58689, 9984, 59329, 59009, 9792, 8704, 58049, 58241, 9024, 57601, 8640, 8320, 57409, 40961, 24768, 24960, 41281, 25344, 41921, 41601, 25152, 26112, 42689, 42881, 26432, 42241, 26048, 25728, 42049, 27648, 44225, 44417, 27968, 44801, 28608, 28288, 44609, 43521, 27328, 27520, 43841, 26880, 43457, 43137, 26688, 30720, 47297, 47489, 31040, 47873, 31680, 31360, 47681, 48641, 32448, 32640, 48961, 32000, 48577, 48257, 31808, 46081, 29888, 30080, 46401, 30464, 47041, 46721, 30272, 29184, 45761, 45953, 29504, 45313, 29120, 28800, 45121, 20480, 37057, 37249, 20800, 37633, 21440, 21120, 37441, 38401, 22208, 22400, 38721, 21760, 38337, 38017, 21568, 39937, 23744, 23936, 40257, 24320, 40897, 40577, 24128, 23040, 39617, 39809, 23360, 39169, 22976, 22656, 38977, 34817, 18624, 18816, 35137, 19200, 35777, 35457, 19008, 19968, 36545, 36737, 20288, 36097, 19904, 19584, 35905, 17408, 33985, 34177, 17728, 34561, 18368, 18048, 34369, 33281, 17088, 17280, 33601, 16640, 33217, 32897, 16448];\n    var hexchars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n    var regcode = new Array(29);\n    var i = 0, j = 0, k = 0;\n    var len, temp, sum, result;\n    var username = document.getElementById(\"username\").value;\n    username = username.replace(/^\\s+|\\s+$/g, \"\");\n\n    for (i = 0; i < 5; i++, k++) {\n        for (j = 0; j < 5; j++, k++) {\n            regcode[k] = hexchars[parseInt(Math.random() * 16)];\n        }\n        if (k == 29) break;\n        regcode[k] = '-';\n    }\n\n    len = username.length;\n\n    sum = 1;\n    for (i = 0; i < len; i++)\n        sum += username.charCodeAt(i);\n    temp = (parseInt((sum + 23) / 6) + 3) * 7 % 16;\n    regcode[6] = hexchars[temp & 0xF];\n\n    sum = 1;\n    for (i = 0; i < len; i++)\n        sum += username.charCodeAt(i);\n    temp = parseInt((3 * sum + 39) / 8) % 16;\n    regcode[9] = hexchars[temp & 0xF];\n\n    sum = 1;\n    for (i = 0; i < len; i++)\n        sum += username.charCodeAt(i);\n    temp = parseInt((3 * sum + 19) / 9) % 16;\n    regcode[7] = hexchars[temp & 0xF];\n\n    sum = 1;\n    for (i = 0; i < len; i++)\n        sum += username.charCodeAt(i);\n    temp = parseInt((sum + 10) / 3) * 8 % 16;\n    regcode[10] = hexchars[temp & 0xF];\n\n    sum = 1;\n    for (i = 0; i < len; i++)\n        sum += username.charCodeAt(i);\n    temp = (parseInt((9 * sum + 10) / 3) + 36) % 16;\n    regcode[4] = hexchars[temp & 0xF];\n\n    sum = 1;\n    for (i = 0; i < len; i++)\n        sum += username.charCodeAt(i);\n    temp = parseInt((5 * sum + 11) / 5) % 16;\n    regcode[8] = hexchars[temp & 0xF];\n\n    result = 0;\n    for (i = 0; i < len; i++)\n        result = ((result >> 8) & 0xFF) ^ list[username.charCodeAt(i) ^ (result & 0xFF)];\n    result = result.toString(16).toUpperCase();\n    regcode[2] = result.charAt(0);\n    regcode[3] = result.charAt(1);\n\n    len = regcode.length;\n    result = 0;\n    for (i = 2; i < len; i++)\n        result = ((result >> 8) & 0xFF) ^ list[regcode[i].toString().charCodeAt(0) ^ (result & 0xFF)];\n    result = result.toString(16).toUpperCase();\n    regcode[0] = result.charAt(0);\n    regcode[1] = result.charAt(1);\n\n    document.getElementById(\"regcode\").value = regcode.join(\"\");\n}","source":"js/editplusgenkey.js","raw":"/**\n * Created by ĩ on 2015-7-5 0005.\n */\nfunction generateEditplusLicence() {\n    var list = [0, 49345, 49537, 320, 49921, 960, 640, 49729, 50689, 1728, 1920, 51009, 1280, 50625, 50305, 1088, 52225, 3264, 3456, 52545, 3840, 53185, 52865, 3648, 2560, 51905, 52097, 2880, 51457, 2496, 2176, 51265, 55297, 6336, 6528, 55617, 6912, 56257, 55937, 6720, 7680, 57025, 57217, 8000, 56577, 7616, 7296, 56385, 5120, 54465, 54657, 5440, 55041, 6080, 5760, 54849, 53761, 4800, 4992, 54081, 4352, 53697, 53377, 4160, 61441, 12480, 12672, 61761, 13056, 62401, 62081, 12864, 13824, 63169, 63361, 14144, 62721, 13760, 13440, 62529, 15360, 64705, 64897, 15680, 65281, 16320, 16000, 65089, 64001, 15040, 15232, 64321, 14592, 63937, 63617, 14400, 10240, 59585, 59777, 10560, 60161, 11200, 10880, 59969, 60929, 11968, 12160, 61249, 11520, 60865, 60545, 11328, 58369, 9408, 9600, 58689, 9984, 59329, 59009, 9792, 8704, 58049, 58241, 9024, 57601, 8640, 8320, 57409, 40961, 24768, 24960, 41281, 25344, 41921, 41601, 25152, 26112, 42689, 42881, 26432, 42241, 26048, 25728, 42049, 27648, 44225, 44417, 27968, 44801, 28608, 28288, 44609, 43521, 27328, 27520, 43841, 26880, 43457, 43137, 26688, 30720, 47297, 47489, 31040, 47873, 31680, 31360, 47681, 48641, 32448, 32640, 48961, 32000, 48577, 48257, 31808, 46081, 29888, 30080, 46401, 30464, 47041, 46721, 30272, 29184, 45761, 45953, 29504, 45313, 29120, 28800, 45121, 20480, 37057, 37249, 20800, 37633, 21440, 21120, 37441, 38401, 22208, 22400, 38721, 21760, 38337, 38017, 21568, 39937, 23744, 23936, 40257, 24320, 40897, 40577, 24128, 23040, 39617, 39809, 23360, 39169, 22976, 22656, 38977, 34817, 18624, 18816, 35137, 19200, 35777, 35457, 19008, 19968, 36545, 36737, 20288, 36097, 19904, 19584, 35905, 17408, 33985, 34177, 17728, 34561, 18368, 18048, 34369, 33281, 17088, 17280, 33601, 16640, 33217, 32897, 16448];\n    var hexchars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n    var regcode = new Array(29);\n    var i = 0, j = 0, k = 0;\n    var len, temp, sum, result;\n    var username = document.getElementById(\"username\").value;\n    username = username.replace(/^\\s+|\\s+$/g, \"\");\n\n    for (i = 0; i < 5; i++, k++) {\n        for (j = 0; j < 5; j++, k++) {\n            regcode[k] = hexchars[parseInt(Math.random() * 16)];\n        }\n        if (k == 29) break;\n        regcode[k] = '-';\n    }\n\n    len = username.length;\n\n    sum = 1;\n    for (i = 0; i < len; i++)\n        sum += username.charCodeAt(i);\n    temp = (parseInt((sum + 23) / 6) + 3) * 7 % 16;\n    regcode[6] = hexchars[temp & 0xF];\n\n    sum = 1;\n    for (i = 0; i < len; i++)\n        sum += username.charCodeAt(i);\n    temp = parseInt((3 * sum + 39) / 8) % 16;\n    regcode[9] = hexchars[temp & 0xF];\n\n    sum = 1;\n    for (i = 0; i < len; i++)\n        sum += username.charCodeAt(i);\n    temp = parseInt((3 * sum + 19) / 9) % 16;\n    regcode[7] = hexchars[temp & 0xF];\n\n    sum = 1;\n    for (i = 0; i < len; i++)\n        sum += username.charCodeAt(i);\n    temp = parseInt((sum + 10) / 3) * 8 % 16;\n    regcode[10] = hexchars[temp & 0xF];\n\n    sum = 1;\n    for (i = 0; i < len; i++)\n        sum += username.charCodeAt(i);\n    temp = (parseInt((9 * sum + 10) / 3) + 36) % 16;\n    regcode[4] = hexchars[temp & 0xF];\n\n    sum = 1;\n    for (i = 0; i < len; i++)\n        sum += username.charCodeAt(i);\n    temp = parseInt((5 * sum + 11) / 5) % 16;\n    regcode[8] = hexchars[temp & 0xF];\n\n    result = 0;\n    for (i = 0; i < len; i++)\n        result = ((result >> 8) & 0xFF) ^ list[username.charCodeAt(i) ^ (result & 0xFF)];\n    result = result.toString(16).toUpperCase();\n    regcode[2] = result.charAt(0);\n    regcode[3] = result.charAt(1);\n\n    len = regcode.length;\n    result = 0;\n    for (i = 2; i < len; i++)\n        result = ((result >> 8) & 0xFF) ^ list[regcode[i].toString().charCodeAt(0) ^ (result & 0xFF)];\n    result = result.toString(16).toUpperCase();\n    regcode[0] = result.charAt(0);\n    regcode[1] = result.charAt(1);\n\n    document.getElementById(\"regcode\").value = regcode.join(\"\");\n}","date":"2019-05-16T15:24:05.639Z","updated":"2019-05-16T22:56:27.000Z","path":"js/editplusgenkey.js","layout":"false","title":"","comments":1,"_id":"cjvtoyb8l00072ev22tcn8bd4","content":"/**\n * Created by ĩ on 2015-7-5 0005.\n */\nfunction generateEditplusLicence() {\n    var list = [0, 49345, 49537, 320, 49921, 960, 640, 49729, 50689, 1728, 1920, 51009, 1280, 50625, 50305, 1088, 52225, 3264, 3456, 52545, 3840, 53185, 52865, 3648, 2560, 51905, 52097, 2880, 51457, 2496, 2176, 51265, 55297, 6336, 6528, 55617, 6912, 56257, 55937, 6720, 7680, 57025, 57217, 8000, 56577, 7616, 7296, 56385, 5120, 54465, 54657, 5440, 55041, 6080, 5760, 54849, 53761, 4800, 4992, 54081, 4352, 53697, 53377, 4160, 61441, 12480, 12672, 61761, 13056, 62401, 62081, 12864, 13824, 63169, 63361, 14144, 62721, 13760, 13440, 62529, 15360, 64705, 64897, 15680, 65281, 16320, 16000, 65089, 64001, 15040, 15232, 64321, 14592, 63937, 63617, 14400, 10240, 59585, 59777, 10560, 60161, 11200, 10880, 59969, 60929, 11968, 12160, 61249, 11520, 60865, 60545, 11328, 58369, 9408, 9600, 58689, 9984, 59329, 59009, 9792, 8704, 58049, 58241, 9024, 57601, 8640, 8320, 57409, 40961, 24768, 24960, 41281, 25344, 41921, 41601, 25152, 26112, 42689, 42881, 26432, 42241, 26048, 25728, 42049, 27648, 44225, 44417, 27968, 44801, 28608, 28288, 44609, 43521, 27328, 27520, 43841, 26880, 43457, 43137, 26688, 30720, 47297, 47489, 31040, 47873, 31680, 31360, 47681, 48641, 32448, 32640, 48961, 32000, 48577, 48257, 31808, 46081, 29888, 30080, 46401, 30464, 47041, 46721, 30272, 29184, 45761, 45953, 29504, 45313, 29120, 28800, 45121, 20480, 37057, 37249, 20800, 37633, 21440, 21120, 37441, 38401, 22208, 22400, 38721, 21760, 38337, 38017, 21568, 39937, 23744, 23936, 40257, 24320, 40897, 40577, 24128, 23040, 39617, 39809, 23360, 39169, 22976, 22656, 38977, 34817, 18624, 18816, 35137, 19200, 35777, 35457, 19008, 19968, 36545, 36737, 20288, 36097, 19904, 19584, 35905, 17408, 33985, 34177, 17728, 34561, 18368, 18048, 34369, 33281, 17088, 17280, 33601, 16640, 33217, 32897, 16448];\n    var hexchars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n    var regcode = new Array(29);\n    var i = 0, j = 0, k = 0;\n    var len, temp, sum, result;\n    var username = document.getElementById(\"username\").value;\n    username = username.replace(/^\\s+|\\s+$/g, \"\");\n\n    for (i = 0; i < 5; i++, k++) {\n        for (j = 0; j < 5; j++, k++) {\n            regcode[k] = hexchars[parseInt(Math.random() * 16)];\n        }\n        if (k == 29) break;\n        regcode[k] = '-';\n    }\n\n    len = username.length;\n\n    sum = 1;\n    for (i = 0; i < len; i++)\n        sum += username.charCodeAt(i);\n    temp = (parseInt((sum + 23) / 6) + 3) * 7 % 16;\n    regcode[6] = hexchars[temp & 0xF];\n\n    sum = 1;\n    for (i = 0; i < len; i++)\n        sum += username.charCodeAt(i);\n    temp = parseInt((3 * sum + 39) / 8) % 16;\n    regcode[9] = hexchars[temp & 0xF];\n\n    sum = 1;\n    for (i = 0; i < len; i++)\n        sum += username.charCodeAt(i);\n    temp = parseInt((3 * sum + 19) / 9) % 16;\n    regcode[7] = hexchars[temp & 0xF];\n\n    sum = 1;\n    for (i = 0; i < len; i++)\n        sum += username.charCodeAt(i);\n    temp = parseInt((sum + 10) / 3) * 8 % 16;\n    regcode[10] = hexchars[temp & 0xF];\n\n    sum = 1;\n    for (i = 0; i < len; i++)\n        sum += username.charCodeAt(i);\n    temp = (parseInt((9 * sum + 10) / 3) + 36) % 16;\n    regcode[4] = hexchars[temp & 0xF];\n\n    sum = 1;\n    for (i = 0; i < len; i++)\n        sum += username.charCodeAt(i);\n    temp = parseInt((5 * sum + 11) / 5) % 16;\n    regcode[8] = hexchars[temp & 0xF];\n\n    result = 0;\n    for (i = 0; i < len; i++)\n        result = ((result >> 8) & 0xFF) ^ list[username.charCodeAt(i) ^ (result & 0xFF)];\n    result = result.toString(16).toUpperCase();\n    regcode[2] = result.charAt(0);\n    regcode[3] = result.charAt(1);\n\n    len = regcode.length;\n    result = 0;\n    for (i = 2; i < len; i++)\n        result = ((result >> 8) & 0xFF) ^ list[regcode[i].toString().charCodeAt(0) ^ (result & 0xFF)];\n    result = result.toString(16).toUpperCase();\n    regcode[0] = result.charAt(0);\n    regcode[1] = result.charAt(1);\n\n    document.getElementById(\"regcode\").value = regcode.join(\"\");\n}","site":{"data":{}},"excerpt":"","more":"/**\n * Created by ĩ on 2015-7-5 0005.\n */\nfunction generateEditplusLicence() {\n    var list = [0, 49345, 49537, 320, 49921, 960, 640, 49729, 50689, 1728, 1920, 51009, 1280, 50625, 50305, 1088, 52225, 3264, 3456, 52545, 3840, 53185, 52865, 3648, 2560, 51905, 52097, 2880, 51457, 2496, 2176, 51265, 55297, 6336, 6528, 55617, 6912, 56257, 55937, 6720, 7680, 57025, 57217, 8000, 56577, 7616, 7296, 56385, 5120, 54465, 54657, 5440, 55041, 6080, 5760, 54849, 53761, 4800, 4992, 54081, 4352, 53697, 53377, 4160, 61441, 12480, 12672, 61761, 13056, 62401, 62081, 12864, 13824, 63169, 63361, 14144, 62721, 13760, 13440, 62529, 15360, 64705, 64897, 15680, 65281, 16320, 16000, 65089, 64001, 15040, 15232, 64321, 14592, 63937, 63617, 14400, 10240, 59585, 59777, 10560, 60161, 11200, 10880, 59969, 60929, 11968, 12160, 61249, 11520, 60865, 60545, 11328, 58369, 9408, 9600, 58689, 9984, 59329, 59009, 9792, 8704, 58049, 58241, 9024, 57601, 8640, 8320, 57409, 40961, 24768, 24960, 41281, 25344, 41921, 41601, 25152, 26112, 42689, 42881, 26432, 42241, 26048, 25728, 42049, 27648, 44225, 44417, 27968, 44801, 28608, 28288, 44609, 43521, 27328, 27520, 43841, 26880, 43457, 43137, 26688, 30720, 47297, 47489, 31040, 47873, 31680, 31360, 47681, 48641, 32448, 32640, 48961, 32000, 48577, 48257, 31808, 46081, 29888, 30080, 46401, 30464, 47041, 46721, 30272, 29184, 45761, 45953, 29504, 45313, 29120, 28800, 45121, 20480, 37057, 37249, 20800, 37633, 21440, 21120, 37441, 38401, 22208, 22400, 38721, 21760, 38337, 38017, 21568, 39937, 23744, 23936, 40257, 24320, 40897, 40577, 24128, 23040, 39617, 39809, 23360, 39169, 22976, 22656, 38977, 34817, 18624, 18816, 35137, 19200, 35777, 35457, 19008, 19968, 36545, 36737, 20288, 36097, 19904, 19584, 35905, 17408, 33985, 34177, 17728, 34561, 18368, 18048, 34369, 33281, 17088, 17280, 33601, 16640, 33217, 32897, 16448];\n    var hexchars = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'];\n    var regcode = new Array(29);\n    var i = 0, j = 0, k = 0;\n    var len, temp, sum, result;\n    var username = document.getElementById(\"username\").value;\n    username = username.replace(/^\\s+|\\s+$/g, \"\");\n\n    for (i = 0; i < 5; i++, k++) {\n        for (j = 0; j < 5; j++, k++) {\n            regcode[k] = hexchars[parseInt(Math.random() * 16)];\n        }\n        if (k == 29) break;\n        regcode[k] = '-';\n    }\n\n    len = username.length;\n\n    sum = 1;\n    for (i = 0; i < len; i++)\n        sum += username.charCodeAt(i);\n    temp = (parseInt((sum + 23) / 6) + 3) * 7 % 16;\n    regcode[6] = hexchars[temp & 0xF];\n\n    sum = 1;\n    for (i = 0; i < len; i++)\n        sum += username.charCodeAt(i);\n    temp = parseInt((3 * sum + 39) / 8) % 16;\n    regcode[9] = hexchars[temp & 0xF];\n\n    sum = 1;\n    for (i = 0; i < len; i++)\n        sum += username.charCodeAt(i);\n    temp = parseInt((3 * sum + 19) / 9) % 16;\n    regcode[7] = hexchars[temp & 0xF];\n\n    sum = 1;\n    for (i = 0; i < len; i++)\n        sum += username.charCodeAt(i);\n    temp = parseInt((sum + 10) / 3) * 8 % 16;\n    regcode[10] = hexchars[temp & 0xF];\n\n    sum = 1;\n    for (i = 0; i < len; i++)\n        sum += username.charCodeAt(i);\n    temp = (parseInt((9 * sum + 10) / 3) + 36) % 16;\n    regcode[4] = hexchars[temp & 0xF];\n\n    sum = 1;\n    for (i = 0; i < len; i++)\n        sum += username.charCodeAt(i);\n    temp = parseInt((5 * sum + 11) / 5) % 16;\n    regcode[8] = hexchars[temp & 0xF];\n\n    result = 0;\n    for (i = 0; i < len; i++)\n        result = ((result >> 8) & 0xFF) ^ list[username.charCodeAt(i) ^ (result & 0xFF)];\n    result = result.toString(16).toUpperCase();\n    regcode[2] = result.charAt(0);\n    regcode[3] = result.charAt(1);\n\n    len = regcode.length;\n    result = 0;\n    for (i = 2; i < len; i++)\n        result = ((result >> 8) & 0xFF) ^ list[regcode[i].toString().charCodeAt(0) ^ (result & 0xFF)];\n    result = result.toString(16).toUpperCase();\n    regcode[0] = result.charAt(0);\n    regcode[1] = result.charAt(1);\n\n    document.getElementById(\"regcode\").value = regcode.join(\"\");\n}"},{"date":"2015-04-02T09:25:57.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"date: 2015-04-02 17:25:57\ntype: \"tags\"\ncomments: false\n---\n","updated":"2019-05-16T22:56:27.000Z","path":"tags/index.html","title":"","layout":"page","_id":"cjvtoyb8n000a2ev2gaedf0p8","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Apache HttpClient引发的血案","date":"2017-12-06T14:39:05.000Z","_content":"","source":"_drafts/Apache-HttpClient引发的血案.md","raw":"---\ntitle: Apache HttpClient引发的血案\ndate: 2017-12-06 22:39:05\ntags:\n---\n","slug":"Apache-HttpClient引发的血案","published":0,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb8a00022ev2jxgp369f","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Gradle、Maven项目相互转换","date":"2017-08-21T15:01:21.000Z","_content":"\n  {% note info%}\n  在开发Android项目的时候，使用的是`Gradle`构建工具，喜欢它的灵活和方便，在转向Java后端开发的时候更多时候使用的是`Maven`构建工具，然而看着漫天的尖括号，心里实在是难受。虽然只是一个构建工具，本着折腾的心，我还是更认可和看好`Gradle`。然而很多时候你的队友并没有习惯去使用或者快速熟悉`Gradle`构建工具，那么这个时候就需要将`Gradle`项目转换为Maven项目了，或者将Maven项目转换为`Gradle`项目\n  {%endnote%}\n\n<!--more-->\n\n### 安装Gradle／Maven\n\n首先是安装构建工具，这个没啥好说的。\n\n##### Windows\n\n打开Powershell或者Cmder执行以下命令完成安装：\n\n```powershell\nchoco install gradle\nchoco install maven\n```\n\n`choco`为windows下的一款包管理工具，可以方便安装管理配置一些常见的软件包，如果你没有安装`choco`的话，请移步：https://chocolatey.org/\n\n\n\n#### Mac\n\n打开Terminal，执行以下命令安装：\n\n```shell\nbrew install gradle\nbrew install maven\n```\n\n### Maven to Gradle\n\n需要特别说明的是，`Gradle`对`Maven`的支持是比较完善的，因此，转换也是非常的简单，在`pom.xml`文件所在的目录下执行：\n\n```shell\ngradle init   # 根据pom.xml内容生成对应的gradle配置\ngradle build  # 开启gradle构建\n```\n\n-----------\n\n\n\n### Gradle to Maven\n\n`Gradle`项目转`Maven`项目需要借助一个Gradle插件，在项目的`module`的`build.gradle`文件中加入以下配置即可：\n\n```groovy\napply plugin: 'maven'\n```\n\n通过双击`Idea`的Gradle Tasks GUI或者执行命令来完成转换:1\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fj5phmgqn8j20ok0tan0w.jpg \"Idea Gradle Tasks GUI\")\n\n```shell\ngradle install\n```\n\n完成之后，将会在当前`Module`项目的`build`目录下的`poms`文件下生成`pom-default.xml`，将其拷贝到项目的根目录下即可。\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fj5pn78lbhj20ik0g4jsk.jpg)\n\n---------------------\n\n通过实际测试，这样的生成的`pom-default.xml`文件是不能用于直接`maven`构建的，因为生成的`pom-default.xml`文件中的`groupId`还需要我们手动指定下。这样显然是不清真的，于是我们可以在`build.gradle`文件中将其事先定义好，这样生成的pom文件就不用我们再手动更改了：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fj5pvzyw2xj20ni0dign1.jpg)\n\n然而这样我们还是觉得麻烦，毕竟需要手动复制到项目根目录，再重新命名。我们还可以通过`hook`Gradle中`Maven`插件的`install`Task来完成自动的复制和命名,编辑`build.gradle`:\n\n```gr\ntask convert2Maven {\n    doLast {\n        file(\"$buildDir/poms/pom-default.xml\").renameTo(file(\"$rootDir/pom.xml\"))\n    }\n}\ninstall.dependsOn(convert2Maven)\n```\n\n此时，再执行`gradle install`这个task就可以看到gradle已经自动为我们在项目的根目录下生成好了`pom.xml`文件啦。\n\n","source":"_drafts/Gradle、Maven项目相互转换.md","raw":"---\ntitle: Gradle、Maven项目相互转换\ndate: 2017-08-21 23:01:21\ntags:\n  - Gradle\n  - Maven\n---\n\n  {% note info%}\n  在开发Android项目的时候，使用的是`Gradle`构建工具，喜欢它的灵活和方便，在转向Java后端开发的时候更多时候使用的是`Maven`构建工具，然而看着漫天的尖括号，心里实在是难受。虽然只是一个构建工具，本着折腾的心，我还是更认可和看好`Gradle`。然而很多时候你的队友并没有习惯去使用或者快速熟悉`Gradle`构建工具，那么这个时候就需要将`Gradle`项目转换为Maven项目了，或者将Maven项目转换为`Gradle`项目\n  {%endnote%}\n\n<!--more-->\n\n### 安装Gradle／Maven\n\n首先是安装构建工具，这个没啥好说的。\n\n##### Windows\n\n打开Powershell或者Cmder执行以下命令完成安装：\n\n```powershell\nchoco install gradle\nchoco install maven\n```\n\n`choco`为windows下的一款包管理工具，可以方便安装管理配置一些常见的软件包，如果你没有安装`choco`的话，请移步：https://chocolatey.org/\n\n\n\n#### Mac\n\n打开Terminal，执行以下命令安装：\n\n```shell\nbrew install gradle\nbrew install maven\n```\n\n### Maven to Gradle\n\n需要特别说明的是，`Gradle`对`Maven`的支持是比较完善的，因此，转换也是非常的简单，在`pom.xml`文件所在的目录下执行：\n\n```shell\ngradle init   # 根据pom.xml内容生成对应的gradle配置\ngradle build  # 开启gradle构建\n```\n\n-----------\n\n\n\n### Gradle to Maven\n\n`Gradle`项目转`Maven`项目需要借助一个Gradle插件，在项目的`module`的`build.gradle`文件中加入以下配置即可：\n\n```groovy\napply plugin: 'maven'\n```\n\n通过双击`Idea`的Gradle Tasks GUI或者执行命令来完成转换:1\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fj5phmgqn8j20ok0tan0w.jpg \"Idea Gradle Tasks GUI\")\n\n```shell\ngradle install\n```\n\n完成之后，将会在当前`Module`项目的`build`目录下的`poms`文件下生成`pom-default.xml`，将其拷贝到项目的根目录下即可。\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fj5pn78lbhj20ik0g4jsk.jpg)\n\n---------------------\n\n通过实际测试，这样的生成的`pom-default.xml`文件是不能用于直接`maven`构建的，因为生成的`pom-default.xml`文件中的`groupId`还需要我们手动指定下。这样显然是不清真的，于是我们可以在`build.gradle`文件中将其事先定义好，这样生成的pom文件就不用我们再手动更改了：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fj5pvzyw2xj20ni0dign1.jpg)\n\n然而这样我们还是觉得麻烦，毕竟需要手动复制到项目根目录，再重新命名。我们还可以通过`hook`Gradle中`Maven`插件的`install`Task来完成自动的复制和命名,编辑`build.gradle`:\n\n```gr\ntask convert2Maven {\n    doLast {\n        file(\"$buildDir/poms/pom-default.xml\").renameTo(file(\"$rootDir/pom.xml\"))\n    }\n}\ninstall.dependsOn(convert2Maven)\n```\n\n此时，再执行`gradle install`这个task就可以看到gradle已经自动为我们在项目的根目录下生成好了`pom.xml`文件啦。\n\n","slug":"Gradle、Maven项目相互转换","published":0,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb8g00042ev2igq6chng","content":"  <div class=\"note info\"><p>在开发Android项目的时候，使用的是<code>Gradle</code>构建工具，喜欢它的灵活和方便，在转向Java后端开发的时候更多时候使用的是<code>Maven</code>构建工具，然而看着漫天的尖括号，心里实在是难受。虽然只是一个构建工具，本着折腾的心，我还是更认可和看好<code>Gradle</code>。然而很多时候你的队友并没有习惯去使用或者快速熟悉<code>Gradle</code>构建工具，那么这个时候就需要将<code>Gradle</code>项目转换为Maven项目了，或者将Maven项目转换为<code>Gradle</code>项目</p></div>\n<a id=\"more\"></a>\n<h3 id=\"安装Gradle／Maven\"><a href=\"#安装Gradle／Maven\" class=\"headerlink\" title=\"安装Gradle／Maven\"></a>安装Gradle／Maven</h3><p>首先是安装构建工具，这个没啥好说的。</p>\n<h5 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h5><p>打开Powershell或者Cmder执行以下命令完成安装：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choco install gradle</span><br><span class=\"line\">choco install maven</span><br></pre></td></tr></table></figure>\n<p><code>choco</code>为windows下的一款包管理工具，可以方便安装管理配置一些常见的软件包，如果你没有安装<code>choco</code>的话，请移步：<a href=\"https://chocolatey.org/\" target=\"_blank\" rel=\"noopener\">https://chocolatey.org/</a></p>\n<h4 id=\"Mac\"><a href=\"#Mac\" class=\"headerlink\" title=\"Mac\"></a>Mac</h4><p>打开Terminal，执行以下命令安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install gradle</span><br><span class=\"line\">brew install maven</span><br></pre></td></tr></table></figure>\n<h3 id=\"Maven-to-Gradle\"><a href=\"#Maven-to-Gradle\" class=\"headerlink\" title=\"Maven to Gradle\"></a>Maven to Gradle</h3><p>需要特别说明的是，<code>Gradle</code>对<code>Maven</code>的支持是比较完善的，因此，转换也是非常的简单，在<code>pom.xml</code>文件所在的目录下执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle init   # 根据pom.xml内容生成对应的gradle配置</span><br><span class=\"line\">gradle build  # 开启gradle构建</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Gradle-to-Maven\"><a href=\"#Gradle-to-Maven\" class=\"headerlink\" title=\"Gradle to Maven\"></a>Gradle to Maven</h3><p><code>Gradle</code>项目转<code>Maven</code>项目需要借助一个Gradle插件，在项目的<code>module</code>的<code>build.gradle</code>文件中加入以下配置即可：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'maven'</span></span><br></pre></td></tr></table></figure>\n<p>通过双击<code>Idea</code>的Gradle Tasks GUI或者执行命令来完成转换:1</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fj5phmgqn8j20ok0tan0w.jpg\" alt title=\"Idea Gradle Tasks GUI\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle install</span><br></pre></td></tr></table></figure>\n<p>完成之后，将会在当前<code>Module</code>项目的<code>build</code>目录下的<code>poms</code>文件下生成<code>pom-default.xml</code>，将其拷贝到项目的根目录下即可。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fj5pn78lbhj20ik0g4jsk.jpg\" alt></p>\n<hr>\n<p>通过实际测试，这样的生成的<code>pom-default.xml</code>文件是不能用于直接<code>maven</code>构建的，因为生成的<code>pom-default.xml</code>文件中的<code>groupId</code>还需要我们手动指定下。这样显然是不清真的，于是我们可以在<code>build.gradle</code>文件中将其事先定义好，这样生成的pom文件就不用我们再手动更改了：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fj5pvzyw2xj20ni0dign1.jpg\" alt></p>\n<p>然而这样我们还是觉得麻烦，毕竟需要手动复制到项目根目录，再重新命名。我们还可以通过<code>hook</code>Gradle中<code>Maven</code>插件的<code>install</code>Task来完成自动的复制和命名,编辑<code>build.gradle</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task convert2Maven &#123;</span><br><span class=\"line\">    doLast &#123;</span><br><span class=\"line\">        file(&quot;$buildDir/poms/pom-default.xml&quot;).renameTo(file(&quot;$rootDir/pom.xml&quot;))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">install.dependsOn(convert2Maven)</span><br></pre></td></tr></table></figure>\n<p>此时，再执行<code>gradle install</code>这个task就可以看到gradle已经自动为我们在项目的根目录下生成好了<code>pom.xml</code>文件啦。</p>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>在开发Android项目的时候，使用的是<code>Gradle</code>构建工具，喜欢它的灵活和方便，在转向Java后端开发的时候更多时候使用的是<code>Maven</code>构建工具，然而看着漫天的尖括号，心里实在是难受。虽然只是一个构建工具，本着折腾的心，我还是更认可和看好<code>Gradle</code>。然而很多时候你的队友并没有习惯去使用或者快速熟悉<code>Gradle</code>构建工具，那么这个时候就需要将<code>Gradle</code>项目转换为Maven项目了，或者将Maven项目转换为<code>Gradle</code>项目</p></div>","more":"<h3 id=\"安装Gradle／Maven\"><a href=\"#安装Gradle／Maven\" class=\"headerlink\" title=\"安装Gradle／Maven\"></a>安装Gradle／Maven</h3><p>首先是安装构建工具，这个没啥好说的。</p>\n<h5 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h5><p>打开Powershell或者Cmder执行以下命令完成安装：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choco install gradle</span><br><span class=\"line\">choco install maven</span><br></pre></td></tr></table></figure>\n<p><code>choco</code>为windows下的一款包管理工具，可以方便安装管理配置一些常见的软件包，如果你没有安装<code>choco</code>的话，请移步：<a href=\"https://chocolatey.org/\" target=\"_blank\" rel=\"noopener\">https://chocolatey.org/</a></p>\n<h4 id=\"Mac\"><a href=\"#Mac\" class=\"headerlink\" title=\"Mac\"></a>Mac</h4><p>打开Terminal，执行以下命令安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install gradle</span><br><span class=\"line\">brew install maven</span><br></pre></td></tr></table></figure>\n<h3 id=\"Maven-to-Gradle\"><a href=\"#Maven-to-Gradle\" class=\"headerlink\" title=\"Maven to Gradle\"></a>Maven to Gradle</h3><p>需要特别说明的是，<code>Gradle</code>对<code>Maven</code>的支持是比较完善的，因此，转换也是非常的简单，在<code>pom.xml</code>文件所在的目录下执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle init   # 根据pom.xml内容生成对应的gradle配置</span><br><span class=\"line\">gradle build  # 开启gradle构建</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Gradle-to-Maven\"><a href=\"#Gradle-to-Maven\" class=\"headerlink\" title=\"Gradle to Maven\"></a>Gradle to Maven</h3><p><code>Gradle</code>项目转<code>Maven</code>项目需要借助一个Gradle插件，在项目的<code>module</code>的<code>build.gradle</code>文件中加入以下配置即可：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'maven'</span></span><br></pre></td></tr></table></figure>\n<p>通过双击<code>Idea</code>的Gradle Tasks GUI或者执行命令来完成转换:1</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fj5phmgqn8j20ok0tan0w.jpg\" alt title=\"Idea Gradle Tasks GUI\"></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle install</span><br></pre></td></tr></table></figure>\n<p>完成之后，将会在当前<code>Module</code>项目的<code>build</code>目录下的<code>poms</code>文件下生成<code>pom-default.xml</code>，将其拷贝到项目的根目录下即可。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fj5pn78lbhj20ik0g4jsk.jpg\" alt></p>\n<hr>\n<p>通过实际测试，这样的生成的<code>pom-default.xml</code>文件是不能用于直接<code>maven</code>构建的，因为生成的<code>pom-default.xml</code>文件中的<code>groupId</code>还需要我们手动指定下。这样显然是不清真的，于是我们可以在<code>build.gradle</code>文件中将其事先定义好，这样生成的pom文件就不用我们再手动更改了：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fj5pvzyw2xj20ni0dign1.jpg\" alt></p>\n<p>然而这样我们还是觉得麻烦，毕竟需要手动复制到项目根目录，再重新命名。我们还可以通过<code>hook</code>Gradle中<code>Maven</code>插件的<code>install</code>Task来完成自动的复制和命名,编辑<code>build.gradle</code>:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task convert2Maven &#123;</span><br><span class=\"line\">    doLast &#123;</span><br><span class=\"line\">        file(&quot;$buildDir/poms/pom-default.xml&quot;).renameTo(file(&quot;$rootDir/pom.xml&quot;))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">install.dependsOn(convert2Maven)</span><br></pre></td></tr></table></figure>\n<p>此时，再执行<code>gradle install</code>这个task就可以看到gradle已经自动为我们在项目的根目录下生成好了<code>pom.xml</code>文件啦。</p>"},{"title":"RestTemplate基本使用","date":"2017-07-21T14:57:45.000Z","_content":"","source":"_drafts/RestTemplate基本使用.md","raw":"---\ntitle: RestTemplate基本使用\ndate: 2017-07-21 22:57:45\ntags:\n---\n","slug":"RestTemplate基本使用","published":0,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb8k00062ev21jyp5z6z","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"SSH命令的几种使用姿势","date":"2017-12-26T14:39:38.000Z","_content":"","source":"_drafts/SSH命令的几种使用姿势.md","raw":"---\ntitle: SSH命令的几种使用姿势\ndate: 2017-12-26 22:39:38\ntags:\n---\n","slug":"SSH命令的几种使用姿势","published":0,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb8n00092ev2zmkv2vdi","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"使用Docker加速你的Proxy部署","date":"2017-11-26T14:40:08.000Z","_content":"","source":"_drafts/使用Docker加速你的Proxy部署.md","raw":"---\ntitle: 使用Docker加速你的Proxy部署\ndate: 2017-11-26 22:40:08\ntags:\n---\n","slug":"使用Docker加速你的Proxy部署","published":0,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb8p000b2ev2hvqdwmlg","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"常见的几种排序算法","date":"2017-08-21T15:01:21.000Z","_content":"","source":"_drafts/常见的几种排序算法.md","raw":"---\ntitle: 常见的几种排序算法\ndate: 2017-08-21 23:01:21\ntags:\n---\n","slug":"常见的几种排序算法","published":0,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb8q000c2ev2pvhbvk2j","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Android Studio生成Java方法描述符","date":"2017-03-21T13:32:50.000Z","_content":"\n\n\n{% note info %}在日常的Android NDK开发中，会不可避免的用到C与Java代码相互调用的情况。Java调用C的方法还好，C调用Java的方法就比较麻烦了。需要编写看着就头疼的Java方法描述符才能正确的调用Java方法。 {% endnote %}\n\n\n\n其中常见的Java方法域和描述符如下表所示：\n\n\n\n|        Java类型         |           签名           |\n| :-------------------: | :--------------------: |\n|        Boolean        |           Z            |\n|         Byte          |           B            |\n|         Char          |           C            |\n|         Short         |           S            |\n|          Int          |           I            |\n|         Long          |           J            |\n|         Float         |           F            |\n|        Double         |           D            |\n| Fully-qualified-class | Lfully-qualified-class |\n|        type[]         |         [type          |\n|      Method type      |   (arg-type)ret-type   |\n\n\n\n通过上述对照表，我们可以通过C代码查找一个为`String`类型的Java静态字段，例如:\n\n```c\njfieldID staticJavaFieldId;\nstaticJavaFieldId = env->GetStaticFieldID(clazz, \"mStaticField\", \"Ljava/lang/String;\");\n/**\n* do something...\n**/\n```\n\n\n\n<!--more-->\n\n-----------------------------\n\n\n\n借助`javap`我们可以很方便的得知一个`class`文件其中包含对应的描述符。如下：\n\n```Java\n$ javap -s -p com.xiamo.test.Message\n  \nCompiled from \"Message.java\"\npublic class com.xiamo.test.Message {\n  private static final java.lang.String TAG;\n    descriptor: Ljava/lang/String;\n  public static final int CHECK_POINT;\n    descriptor: I\n  public static final int ERROR_NOT_SERVER;\n    descriptor: I\n  public int errorCode;\n    descriptor: I\n  public java.lang.String message;\n    descriptor: Ljava/lang/String;\n  public com.xiamo.test.Message();\n    descriptor: ()V\n```\n\n\n\n但是每次需要查看对应类的方法描述符的时候都需要手动敲一次命令，这样显然不够清真。好在`Android Studio`为我们提供了`External Tools`。我们可以用它来自定义这个操作简化我们的双手。\n\n\n\n### 设置External Tools\n\n\n\n打开`Android Studio`的设置页面，在`Tools`选项卡中选中`External Tools`，如下图所示：\n\n\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/image/jni/external%20tools.png \"选择External Tools\")\n\n\n\n点击右侧区域的`+`新增一个`Tools`,在选卡中填入如下图所示的参数:\n\n\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/image/jni/config.png \"设置External Tools\")\n\n\n\n- `Name` 为你要设置的`External Tools`的名字，便于你自己标识就行，此处我设置为`JNI Descriptor Generator`\n- `Program`为`Tools`执行的命令的路径，如果你需要替换为你自己JDK中的`javap`修改这个值就行，此处使用`Android Studio`自带的`JDK`路径，填入`$JDKPath$/bin/javap`\n- `Parameters`为命令执行的参数，我们要获取方法描述符，所以设置为：`-s -p $FileClass$`\n- `Working directory`为上述设置好的工具执行的目录，设置为`$ModuleFileDir$/build/intermediates/classes/debug`\n\n点击保存，我们的`External Tools`就设置好啦。这个时候在`Tools`—>`External Tools`中就可以看到我们设置好的`Tools`了。需要注意的是这个时候点击改工具查看当前我们选中的Java源文件的文件操作符，是可能会报错找不到指定的class文件。\n\n\n\n这是因为我们指定的`Working directory`中还没有生成class文件，选择`Build`选项中的`Make Project`，等待make完成，再次点击`Tools`—>`External Tools—>` `JNI Descriptor Generator` 即可生成对应Java源文件的文件描述符了。这样我们就可以愉快的调用使用C调用Java中的方法咯。","source":"_posts/Android-Studio支持生成Java-Native方法签名.md","raw":"---\ntitle: Android Studio生成Java方法描述符\ndate: 2017-03-21 21:32:50\ntags: \n - Android\n - Android Studio\n - JNI\n---\n\n\n\n{% note info %}在日常的Android NDK开发中，会不可避免的用到C与Java代码相互调用的情况。Java调用C的方法还好，C调用Java的方法就比较麻烦了。需要编写看着就头疼的Java方法描述符才能正确的调用Java方法。 {% endnote %}\n\n\n\n其中常见的Java方法域和描述符如下表所示：\n\n\n\n|        Java类型         |           签名           |\n| :-------------------: | :--------------------: |\n|        Boolean        |           Z            |\n|         Byte          |           B            |\n|         Char          |           C            |\n|         Short         |           S            |\n|          Int          |           I            |\n|         Long          |           J            |\n|         Float         |           F            |\n|        Double         |           D            |\n| Fully-qualified-class | Lfully-qualified-class |\n|        type[]         |         [type          |\n|      Method type      |   (arg-type)ret-type   |\n\n\n\n通过上述对照表，我们可以通过C代码查找一个为`String`类型的Java静态字段，例如:\n\n```c\njfieldID staticJavaFieldId;\nstaticJavaFieldId = env->GetStaticFieldID(clazz, \"mStaticField\", \"Ljava/lang/String;\");\n/**\n* do something...\n**/\n```\n\n\n\n<!--more-->\n\n-----------------------------\n\n\n\n借助`javap`我们可以很方便的得知一个`class`文件其中包含对应的描述符。如下：\n\n```Java\n$ javap -s -p com.xiamo.test.Message\n  \nCompiled from \"Message.java\"\npublic class com.xiamo.test.Message {\n  private static final java.lang.String TAG;\n    descriptor: Ljava/lang/String;\n  public static final int CHECK_POINT;\n    descriptor: I\n  public static final int ERROR_NOT_SERVER;\n    descriptor: I\n  public int errorCode;\n    descriptor: I\n  public java.lang.String message;\n    descriptor: Ljava/lang/String;\n  public com.xiamo.test.Message();\n    descriptor: ()V\n```\n\n\n\n但是每次需要查看对应类的方法描述符的时候都需要手动敲一次命令，这样显然不够清真。好在`Android Studio`为我们提供了`External Tools`。我们可以用它来自定义这个操作简化我们的双手。\n\n\n\n### 设置External Tools\n\n\n\n打开`Android Studio`的设置页面，在`Tools`选项卡中选中`External Tools`，如下图所示：\n\n\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/image/jni/external%20tools.png \"选择External Tools\")\n\n\n\n点击右侧区域的`+`新增一个`Tools`,在选卡中填入如下图所示的参数:\n\n\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/image/jni/config.png \"设置External Tools\")\n\n\n\n- `Name` 为你要设置的`External Tools`的名字，便于你自己标识就行，此处我设置为`JNI Descriptor Generator`\n- `Program`为`Tools`执行的命令的路径，如果你需要替换为你自己JDK中的`javap`修改这个值就行，此处使用`Android Studio`自带的`JDK`路径，填入`$JDKPath$/bin/javap`\n- `Parameters`为命令执行的参数，我们要获取方法描述符，所以设置为：`-s -p $FileClass$`\n- `Working directory`为上述设置好的工具执行的目录，设置为`$ModuleFileDir$/build/intermediates/classes/debug`\n\n点击保存，我们的`External Tools`就设置好啦。这个时候在`Tools`—>`External Tools`中就可以看到我们设置好的`Tools`了。需要注意的是这个时候点击改工具查看当前我们选中的Java源文件的文件操作符，是可能会报错找不到指定的class文件。\n\n\n\n这是因为我们指定的`Working directory`中还没有生成class文件，选择`Build`选项中的`Make Project`，等待make完成，再次点击`Tools`—>`External Tools—>` `JNI Descriptor Generator` 即可生成对应Java源文件的文件描述符了。这样我们就可以愉快的调用使用C调用Java中的方法咯。","slug":"Android-Studio支持生成Java-Native方法签名","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb8r000e2ev24cswqdub","content":"<div class=\"note info\"><p>在日常的Android NDK开发中，会不可避免的用到C与Java代码相互调用的情况。Java调用C的方法还好，C调用Java的方法就比较麻烦了。需要编写看着就头疼的Java方法描述符才能正确的调用Java方法。 </p></div>\n<p>其中常见的Java方法域和描述符如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Java类型</th>\n<th style=\"text-align:center\">签名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">Z</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Byte</td>\n<td style=\"text-align:center\">B</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Char</td>\n<td style=\"text-align:center\">C</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Short</td>\n<td style=\"text-align:center\">S</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Int</td>\n<td style=\"text-align:center\">I</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Long</td>\n<td style=\"text-align:center\">J</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Float</td>\n<td style=\"text-align:center\">F</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Double</td>\n<td style=\"text-align:center\">D</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Fully-qualified-class</td>\n<td style=\"text-align:center\">Lfully-qualified-class</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">type[]</td>\n<td style=\"text-align:center\">[type</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Method type</td>\n<td style=\"text-align:center\">(arg-type)ret-type</td>\n</tr>\n</tbody>\n</table>\n<p>通过上述对照表，我们可以通过C代码查找一个为<code>String</code>类型的Java静态字段，例如:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jfieldID staticJavaFieldId;</span><br><span class=\"line\">staticJavaFieldId = env-&gt;GetStaticFieldID(clazz, <span class=\"string\">\"mStaticField\"</span>, <span class=\"string\">\"Ljava/lang/String;\"</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* do something...</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<hr>\n<p>借助<code>javap</code>我们可以很方便的得知一个<code>class</code>文件其中包含对应的描述符。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javap -s -p com.xiamo.test.Message</span><br><span class=\"line\">  </span><br><span class=\"line\">Compiled from <span class=\"string\">\"Message.java\"</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">xiamo</span>.<span class=\"title\">test</span>.<span class=\"title\">Message</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> java.lang.String TAG;</span><br><span class=\"line\">    descriptor: Ljava/lang/String;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CHECK_POINT;</span><br><span class=\"line\">    descriptor: I</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> ERROR_NOT_SERVER;</span><br><span class=\"line\">    descriptor: I</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> errorCode;</span><br><span class=\"line\">    descriptor: I</span><br><span class=\"line\">  <span class=\"keyword\">public</span> java.lang.String message;</span><br><span class=\"line\">    descriptor: Ljava/lang/String;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> com.xiamo.test.Message();</span><br><span class=\"line\">    descriptor: ()V</span><br></pre></td></tr></table></figure>\n<p>但是每次需要查看对应类的方法描述符的时候都需要手动敲一次命令，这样显然不够清真。好在<code>Android Studio</code>为我们提供了<code>External Tools</code>。我们可以用它来自定义这个操作简化我们的双手。</p>\n<h3 id=\"设置External-Tools\"><a href=\"#设置External-Tools\" class=\"headerlink\" title=\"设置External Tools\"></a>设置External Tools</h3><p>打开<code>Android Studio</code>的设置页面，在<code>Tools</code>选项卡中选中<code>External Tools</code>，如下图所示：</p>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/image/jni/external%20tools.png\" alt title=\"选择External Tools\"></p>\n<p>点击右侧区域的<code>+</code>新增一个<code>Tools</code>,在选卡中填入如下图所示的参数:</p>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/image/jni/config.png\" alt title=\"设置External Tools\"></p>\n<ul>\n<li><code>Name</code> 为你要设置的<code>External Tools</code>的名字，便于你自己标识就行，此处我设置为<code>JNI Descriptor Generator</code></li>\n<li><code>Program</code>为<code>Tools</code>执行的命令的路径，如果你需要替换为你自己JDK中的<code>javap</code>修改这个值就行，此处使用<code>Android Studio</code>自带的<code>JDK</code>路径，填入<code>$JDKPath$/bin/javap</code></li>\n<li><code>Parameters</code>为命令执行的参数，我们要获取方法描述符，所以设置为：<code>-s -p $FileClass$</code></li>\n<li><code>Working directory</code>为上述设置好的工具执行的目录，设置为<code>$ModuleFileDir$/build/intermediates/classes/debug</code></li>\n</ul>\n<p>点击保存，我们的<code>External Tools</code>就设置好啦。这个时候在<code>Tools</code>—&gt;<code>External Tools</code>中就可以看到我们设置好的<code>Tools</code>了。需要注意的是这个时候点击改工具查看当前我们选中的Java源文件的文件操作符，是可能会报错找不到指定的class文件。</p>\n<p>这是因为我们指定的<code>Working directory</code>中还没有生成class文件，选择<code>Build</code>选项中的<code>Make Project</code>，等待make完成，再次点击<code>Tools</code>—&gt;<code>External Tools—&gt;</code> <code>JNI Descriptor Generator</code> 即可生成对应Java源文件的文件描述符了。这样我们就可以愉快的调用使用C调用Java中的方法咯。</p>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>在日常的Android NDK开发中，会不可避免的用到C与Java代码相互调用的情况。Java调用C的方法还好，C调用Java的方法就比较麻烦了。需要编写看着就头疼的Java方法描述符才能正确的调用Java方法。 </p></div>\n<p>其中常见的Java方法域和描述符如下表所示：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">Java类型</th>\n<th style=\"text-align:center\">签名</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">Boolean</td>\n<td style=\"text-align:center\">Z</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Byte</td>\n<td style=\"text-align:center\">B</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Char</td>\n<td style=\"text-align:center\">C</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Short</td>\n<td style=\"text-align:center\">S</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Int</td>\n<td style=\"text-align:center\">I</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Long</td>\n<td style=\"text-align:center\">J</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Float</td>\n<td style=\"text-align:center\">F</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Double</td>\n<td style=\"text-align:center\">D</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Fully-qualified-class</td>\n<td style=\"text-align:center\">Lfully-qualified-class</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">type[]</td>\n<td style=\"text-align:center\">[type</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">Method type</td>\n<td style=\"text-align:center\">(arg-type)ret-type</td>\n</tr>\n</tbody>\n</table>\n<p>通过上述对照表，我们可以通过C代码查找一个为<code>String</code>类型的Java静态字段，例如:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jfieldID staticJavaFieldId;</span><br><span class=\"line\">staticJavaFieldId = env-&gt;GetStaticFieldID(clazz, <span class=\"string\">\"mStaticField\"</span>, <span class=\"string\">\"Ljava/lang/String;\"</span>);</span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">* do something...</span></span><br><span class=\"line\"><span class=\"comment\">**/</span></span><br></pre></td></tr></table></figure>","more":"<hr>\n<p>借助<code>javap</code>我们可以很方便的得知一个<code>class</code>文件其中包含对应的描述符。如下：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ javap -s -p com.xiamo.test.Message</span><br><span class=\"line\">  </span><br><span class=\"line\">Compiled from <span class=\"string\">\"Message.java\"</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">com</span>.<span class=\"title\">xiamo</span>.<span class=\"title\">test</span>.<span class=\"title\">Message</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> java.lang.String TAG;</span><br><span class=\"line\">    descriptor: Ljava/lang/String;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> CHECK_POINT;</span><br><span class=\"line\">    descriptor: I</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> ERROR_NOT_SERVER;</span><br><span class=\"line\">    descriptor: I</span><br><span class=\"line\">  <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> errorCode;</span><br><span class=\"line\">    descriptor: I</span><br><span class=\"line\">  <span class=\"keyword\">public</span> java.lang.String message;</span><br><span class=\"line\">    descriptor: Ljava/lang/String;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> com.xiamo.test.Message();</span><br><span class=\"line\">    descriptor: ()V</span><br></pre></td></tr></table></figure>\n<p>但是每次需要查看对应类的方法描述符的时候都需要手动敲一次命令，这样显然不够清真。好在<code>Android Studio</code>为我们提供了<code>External Tools</code>。我们可以用它来自定义这个操作简化我们的双手。</p>\n<h3 id=\"设置External-Tools\"><a href=\"#设置External-Tools\" class=\"headerlink\" title=\"设置External Tools\"></a>设置External Tools</h3><p>打开<code>Android Studio</code>的设置页面，在<code>Tools</code>选项卡中选中<code>External Tools</code>，如下图所示：</p>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/image/jni/external%20tools.png\" alt title=\"选择External Tools\"></p>\n<p>点击右侧区域的<code>+</code>新增一个<code>Tools</code>,在选卡中填入如下图所示的参数:</p>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/image/jni/config.png\" alt title=\"设置External Tools\"></p>\n<ul>\n<li><code>Name</code> 为你要设置的<code>External Tools</code>的名字，便于你自己标识就行，此处我设置为<code>JNI Descriptor Generator</code></li>\n<li><code>Program</code>为<code>Tools</code>执行的命令的路径，如果你需要替换为你自己JDK中的<code>javap</code>修改这个值就行，此处使用<code>Android Studio</code>自带的<code>JDK</code>路径，填入<code>$JDKPath$/bin/javap</code></li>\n<li><code>Parameters</code>为命令执行的参数，我们要获取方法描述符，所以设置为：<code>-s -p $FileClass$</code></li>\n<li><code>Working directory</code>为上述设置好的工具执行的目录，设置为<code>$ModuleFileDir$/build/intermediates/classes/debug</code></li>\n</ul>\n<p>点击保存，我们的<code>External Tools</code>就设置好啦。这个时候在<code>Tools</code>—&gt;<code>External Tools</code>中就可以看到我们设置好的<code>Tools</code>了。需要注意的是这个时候点击改工具查看当前我们选中的Java源文件的文件操作符，是可能会报错找不到指定的class文件。</p>\n<p>这是因为我们指定的<code>Working directory</code>中还没有生成class文件，选择<code>Build</code>选项中的<code>Make Project</code>，等待make完成，再次点击<code>Tools</code>—&gt;<code>External Tools—&gt;</code> <code>JNI Descriptor Generator</code> 即可生成对应Java源文件的文件描述符了。这样我们就可以愉快的调用使用C调用Java中的方法咯。</p>"},{"title":"当Android应用被强杀之后","isupdate":false,"date":"2016-09-10T11:00:20.000Z","updatetime":null,"_content":"\nAndroid应用在后台运行的时候很容易被强杀，尤其是在国内XX助手、XX管家、XX大师之类的应用大行其道之下。如果我们开发的应用没有被用户加入白名单，很大程度上会被系统因为内存不足或者用户主动给应用在后台运行的时候杀掉。这个时候问题就来了：\n\n- **如何保证我们的应用在被强杀之后用户再次回到应用来保证应用的稳定性而不Crash？**\n\n\n为了说明上述问题，我们来简单模拟这样一个过程:\n\n\n> APP --> ActivityA --> ActivityB -->ActivityC --> Pressed Home\n\n假设APP在Activity C页面用户按下`Home`键应用退到后台运行。这个时候启动DDMS，选中该APP的进程，Kill。然后我们从运行APP历史列表中选中该APP并将其置于前台，这个时候回到该应用的界面还是Activity C。再点击返回按钮回到ActivityB，在某些性能比较差一点的机器上可能会出现短暂的黑屏然后才会显示出ActivityB。这是因为该Activity实例其实在Kill该APP进程的时候已经被销毁了，但是Android系统虽然销毁了Activity实例，却并没有销毁该APP的Activity栈。因此我们点击返回按钮还是会回到ActivityB。但是需要重新构建该ActivityB的实例。\n\n这样看貌似并没有什么问题，然而事情并不会这么简单（废话，不然我写这篇博客干嘛。。），如果ActivityB中引用了静态变量并尝试获取其值的时候，这个时候是会出现NPE的。\n\n<!--more-->\n\n我们简单来总结下上述过程:\n\n 1. 当应用在后台被Kill，整个APP进程都被销毁，所有变量都被清空，包括Application的实例。\n\n 2. 虽然所有变量和实例都被销毁，但是Activity栈并没有被清空，所以我们回到应用还能得知页面的打开顺序。\n\n 3. 当应用被强杀时，会自动调用`onSaveInstance`方法去保存一些核心变量，然而这在面对N多的页面的时候显然不是一件省心的事情，而且你也不能保证你的队友也会这么做。。\n\n 4. 在某些性能比较低或者页面逻辑比较复杂的页面会黑屏是因为需要重建ActivityB的实例，也就是需要重走Activity的声明周期`OnCreate`，性能差点的机器上自然就会有短暂的黑屏了。\n\n\n\n如果APP中没有静态变量的引用，那就不会出现NEP，但是一旦引用了静态变量，这个时候可能就比较危险了。（静态变量包括全局的登录状态，全局的用户配置、标志位之类的数据）当然了，如果你能将所有的静态变量修改到单例中去，并将其持久化，为NULL的时候再去取的话，原则上来说这样也可以避免NPE。然而要是这样做的话很大程度上会减缓开发的进度，而且指不定哪个队友就给你挖坑了。然后你怎么挂的都不知道。。\n\n为了一劳永逸的解决这个问题，我们需要冷静下来思考一下:**既然APP被强杀了，为啥还要回到原先的页面中去而不是重走启动APP的流程?**\n\n我们虽然不能阻止Android系统销毁实例却保存Activity栈，也不想多写那些持久化或者Cache静态变量代码（这将是一件费力而且不太讨好的事情）所以我们唯一能做的就是检测应用是否被强杀，并且在被强杀之后重走启动流程而不是回到原先的逻辑当中。\n\n以下给出我的一种实现方式，如果你有更好的想法，欢迎和我交流:\n\n\n```java\n\npublic abstract class BaseActivity extends AppCompatActivity {\n  \n  private static int FLAG;\n  private final static int FLAG_NOT_INIT = 200;\n\n  @Override protected void onCreate(@Nullable Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    if (FLAG != FLAG_NOT_INIT) {\n      if (this.getClass() == LauncherActivity.class) {\n        FLAG = FLAG_NOT_INIT;\n      } else {\n        reLauncher();\n      }\n    }\n  }\n}\n\n```\n\n我们实例化上述场景，给出一种对应关系:\n\nActivityA --> 启动页\n\nActivityB --> 主页\n\nActivityC --> 详情页\n\n其中将ActivityB的`launchMode`设置为`singleTask`，并且在BaseActivity中使用静态变量FLAG进行判断当前应用是否被强杀，如果被强杀则利用ActivityB的`launchMode`特性清空栈并重新初始化即可。\n\n\n\n###### 有关Activity的启动模式相关文章，可参阅[Activity启动模式图文详解](http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0520/2897.html)\n\n\n","source":"_posts/AndroidProcessbeKilledweShoudIDo.md","raw":"title: 当Android应用被强杀之后\nisupdate: false\ndate: 2016-09-10 19:00:20\nupdatetime:\ntags: Android\ncategories: Android\n---\n\nAndroid应用在后台运行的时候很容易被强杀，尤其是在国内XX助手、XX管家、XX大师之类的应用大行其道之下。如果我们开发的应用没有被用户加入白名单，很大程度上会被系统因为内存不足或者用户主动给应用在后台运行的时候杀掉。这个时候问题就来了：\n\n- **如何保证我们的应用在被强杀之后用户再次回到应用来保证应用的稳定性而不Crash？**\n\n\n为了说明上述问题，我们来简单模拟这样一个过程:\n\n\n> APP --> ActivityA --> ActivityB -->ActivityC --> Pressed Home\n\n假设APP在Activity C页面用户按下`Home`键应用退到后台运行。这个时候启动DDMS，选中该APP的进程，Kill。然后我们从运行APP历史列表中选中该APP并将其置于前台，这个时候回到该应用的界面还是Activity C。再点击返回按钮回到ActivityB，在某些性能比较差一点的机器上可能会出现短暂的黑屏然后才会显示出ActivityB。这是因为该Activity实例其实在Kill该APP进程的时候已经被销毁了，但是Android系统虽然销毁了Activity实例，却并没有销毁该APP的Activity栈。因此我们点击返回按钮还是会回到ActivityB。但是需要重新构建该ActivityB的实例。\n\n这样看貌似并没有什么问题，然而事情并不会这么简单（废话，不然我写这篇博客干嘛。。），如果ActivityB中引用了静态变量并尝试获取其值的时候，这个时候是会出现NPE的。\n\n<!--more-->\n\n我们简单来总结下上述过程:\n\n 1. 当应用在后台被Kill，整个APP进程都被销毁，所有变量都被清空，包括Application的实例。\n\n 2. 虽然所有变量和实例都被销毁，但是Activity栈并没有被清空，所以我们回到应用还能得知页面的打开顺序。\n\n 3. 当应用被强杀时，会自动调用`onSaveInstance`方法去保存一些核心变量，然而这在面对N多的页面的时候显然不是一件省心的事情，而且你也不能保证你的队友也会这么做。。\n\n 4. 在某些性能比较低或者页面逻辑比较复杂的页面会黑屏是因为需要重建ActivityB的实例，也就是需要重走Activity的声明周期`OnCreate`，性能差点的机器上自然就会有短暂的黑屏了。\n\n\n\n如果APP中没有静态变量的引用，那就不会出现NEP，但是一旦引用了静态变量，这个时候可能就比较危险了。（静态变量包括全局的登录状态，全局的用户配置、标志位之类的数据）当然了，如果你能将所有的静态变量修改到单例中去，并将其持久化，为NULL的时候再去取的话，原则上来说这样也可以避免NPE。然而要是这样做的话很大程度上会减缓开发的进度，而且指不定哪个队友就给你挖坑了。然后你怎么挂的都不知道。。\n\n为了一劳永逸的解决这个问题，我们需要冷静下来思考一下:**既然APP被强杀了，为啥还要回到原先的页面中去而不是重走启动APP的流程?**\n\n我们虽然不能阻止Android系统销毁实例却保存Activity栈，也不想多写那些持久化或者Cache静态变量代码（这将是一件费力而且不太讨好的事情）所以我们唯一能做的就是检测应用是否被强杀，并且在被强杀之后重走启动流程而不是回到原先的逻辑当中。\n\n以下给出我的一种实现方式，如果你有更好的想法，欢迎和我交流:\n\n\n```java\n\npublic abstract class BaseActivity extends AppCompatActivity {\n  \n  private static int FLAG;\n  private final static int FLAG_NOT_INIT = 200;\n\n  @Override protected void onCreate(@Nullable Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n    if (FLAG != FLAG_NOT_INIT) {\n      if (this.getClass() == LauncherActivity.class) {\n        FLAG = FLAG_NOT_INIT;\n      } else {\n        reLauncher();\n      }\n    }\n  }\n}\n\n```\n\n我们实例化上述场景，给出一种对应关系:\n\nActivityA --> 启动页\n\nActivityB --> 主页\n\nActivityC --> 详情页\n\n其中将ActivityB的`launchMode`设置为`singleTask`，并且在BaseActivity中使用静态变量FLAG进行判断当前应用是否被强杀，如果被强杀则利用ActivityB的`launchMode`特性清空栈并重新初始化即可。\n\n\n\n###### 有关Activity的启动模式相关文章，可参阅[Activity启动模式图文详解](http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0520/2897.html)\n\n\n","slug":"AndroidProcessbeKilledweShoudIDo","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb8s000f2ev2oio1vdzp","content":"<p>Android应用在后台运行的时候很容易被强杀，尤其是在国内XX助手、XX管家、XX大师之类的应用大行其道之下。如果我们开发的应用没有被用户加入白名单，很大程度上会被系统因为内存不足或者用户主动给应用在后台运行的时候杀掉。这个时候问题就来了：</p>\n<ul>\n<li><strong>如何保证我们的应用在被强杀之后用户再次回到应用来保证应用的稳定性而不Crash？</strong></li>\n</ul>\n<p>为了说明上述问题，我们来简单模拟这样一个过程:</p>\n<blockquote>\n<p>APP –&gt; ActivityA –&gt; ActivityB –&gt;ActivityC –&gt; Pressed Home</p>\n</blockquote>\n<p>假设APP在Activity C页面用户按下<code>Home</code>键应用退到后台运行。这个时候启动DDMS，选中该APP的进程，Kill。然后我们从运行APP历史列表中选中该APP并将其置于前台，这个时候回到该应用的界面还是Activity C。再点击返回按钮回到ActivityB，在某些性能比较差一点的机器上可能会出现短暂的黑屏然后才会显示出ActivityB。这是因为该Activity实例其实在Kill该APP进程的时候已经被销毁了，但是Android系统虽然销毁了Activity实例，却并没有销毁该APP的Activity栈。因此我们点击返回按钮还是会回到ActivityB。但是需要重新构建该ActivityB的实例。</p>\n<p>这样看貌似并没有什么问题，然而事情并不会这么简单（废话，不然我写这篇博客干嘛。。），如果ActivityB中引用了静态变量并尝试获取其值的时候，这个时候是会出现NPE的。</p>\n<a id=\"more\"></a>\n<p>我们简单来总结下上述过程:</p>\n<ol>\n<li><p>当应用在后台被Kill，整个APP进程都被销毁，所有变量都被清空，包括Application的实例。</p>\n</li>\n<li><p>虽然所有变量和实例都被销毁，但是Activity栈并没有被清空，所以我们回到应用还能得知页面的打开顺序。</p>\n</li>\n<li><p>当应用被强杀时，会自动调用<code>onSaveInstance</code>方法去保存一些核心变量，然而这在面对N多的页面的时候显然不是一件省心的事情，而且你也不能保证你的队友也会这么做。。</p>\n</li>\n<li><p>在某些性能比较低或者页面逻辑比较复杂的页面会黑屏是因为需要重建ActivityB的实例，也就是需要重走Activity的声明周期<code>OnCreate</code>，性能差点的机器上自然就会有短暂的黑屏了。</p>\n</li>\n</ol>\n<p>如果APP中没有静态变量的引用，那就不会出现NEP，但是一旦引用了静态变量，这个时候可能就比较危险了。（静态变量包括全局的登录状态，全局的用户配置、标志位之类的数据）当然了，如果你能将所有的静态变量修改到单例中去，并将其持久化，为NULL的时候再去取的话，原则上来说这样也可以避免NPE。然而要是这样做的话很大程度上会减缓开发的进度，而且指不定哪个队友就给你挖坑了。然后你怎么挂的都不知道。。</p>\n<p>为了一劳永逸的解决这个问题，我们需要冷静下来思考一下:<strong>既然APP被强杀了，为啥还要回到原先的页面中去而不是重走启动APP的流程?</strong></p>\n<p>我们虽然不能阻止Android系统销毁实例却保存Activity栈，也不想多写那些持久化或者Cache静态变量代码（这将是一件费力而且不太讨好的事情）所以我们唯一能做的就是检测应用是否被强杀，并且在被强杀之后重走启动流程而不是回到原先的逻辑当中。</p>\n<p>以下给出我的一种实现方式，如果你有更好的想法，欢迎和我交流:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> FLAG;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> FLAG_NOT_INIT = <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (FLAG != FLAG_NOT_INIT) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.getClass() == LauncherActivity.class) &#123;</span><br><span class=\"line\">        FLAG = FLAG_NOT_INIT;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reLauncher();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们实例化上述场景，给出一种对应关系:</p>\n<p>ActivityA –&gt; 启动页</p>\n<p>ActivityB –&gt; 主页</p>\n<p>ActivityC –&gt; 详情页</p>\n<p>其中将ActivityB的<code>launchMode</code>设置为<code>singleTask</code>，并且在BaseActivity中使用静态变量FLAG进行判断当前应用是否被强杀，如果被强杀则利用ActivityB的<code>launchMode</code>特性清空栈并重新初始化即可。</p>\n<h6 id=\"有关Activity的启动模式相关文章，可参阅Activity启动模式图文详解\"><a href=\"#有关Activity的启动模式相关文章，可参阅Activity启动模式图文详解\" class=\"headerlink\" title=\"有关Activity的启动模式相关文章，可参阅Activity启动模式图文详解\"></a>有关Activity的启动模式相关文章，可参阅<a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0520/2897.html\" target=\"_blank\" rel=\"noopener\">Activity启动模式图文详解</a></h6>","site":{"data":{}},"excerpt":"<p>Android应用在后台运行的时候很容易被强杀，尤其是在国内XX助手、XX管家、XX大师之类的应用大行其道之下。如果我们开发的应用没有被用户加入白名单，很大程度上会被系统因为内存不足或者用户主动给应用在后台运行的时候杀掉。这个时候问题就来了：</p>\n<ul>\n<li><strong>如何保证我们的应用在被强杀之后用户再次回到应用来保证应用的稳定性而不Crash？</strong></li>\n</ul>\n<p>为了说明上述问题，我们来简单模拟这样一个过程:</p>\n<blockquote>\n<p>APP –&gt; ActivityA –&gt; ActivityB –&gt;ActivityC –&gt; Pressed Home</p>\n</blockquote>\n<p>假设APP在Activity C页面用户按下<code>Home</code>键应用退到后台运行。这个时候启动DDMS，选中该APP的进程，Kill。然后我们从运行APP历史列表中选中该APP并将其置于前台，这个时候回到该应用的界面还是Activity C。再点击返回按钮回到ActivityB，在某些性能比较差一点的机器上可能会出现短暂的黑屏然后才会显示出ActivityB。这是因为该Activity实例其实在Kill该APP进程的时候已经被销毁了，但是Android系统虽然销毁了Activity实例，却并没有销毁该APP的Activity栈。因此我们点击返回按钮还是会回到ActivityB。但是需要重新构建该ActivityB的实例。</p>\n<p>这样看貌似并没有什么问题，然而事情并不会这么简单（废话，不然我写这篇博客干嘛。。），如果ActivityB中引用了静态变量并尝试获取其值的时候，这个时候是会出现NPE的。</p>","more":"<p>我们简单来总结下上述过程:</p>\n<ol>\n<li><p>当应用在后台被Kill，整个APP进程都被销毁，所有变量都被清空，包括Application的实例。</p>\n</li>\n<li><p>虽然所有变量和实例都被销毁，但是Activity栈并没有被清空，所以我们回到应用还能得知页面的打开顺序。</p>\n</li>\n<li><p>当应用被强杀时，会自动调用<code>onSaveInstance</code>方法去保存一些核心变量，然而这在面对N多的页面的时候显然不是一件省心的事情，而且你也不能保证你的队友也会这么做。。</p>\n</li>\n<li><p>在某些性能比较低或者页面逻辑比较复杂的页面会黑屏是因为需要重建ActivityB的实例，也就是需要重走Activity的声明周期<code>OnCreate</code>，性能差点的机器上自然就会有短暂的黑屏了。</p>\n</li>\n</ol>\n<p>如果APP中没有静态变量的引用，那就不会出现NEP，但是一旦引用了静态变量，这个时候可能就比较危险了。（静态变量包括全局的登录状态，全局的用户配置、标志位之类的数据）当然了，如果你能将所有的静态变量修改到单例中去，并将其持久化，为NULL的时候再去取的话，原则上来说这样也可以避免NPE。然而要是这样做的话很大程度上会减缓开发的进度，而且指不定哪个队友就给你挖坑了。然后你怎么挂的都不知道。。</p>\n<p>为了一劳永逸的解决这个问题，我们需要冷静下来思考一下:<strong>既然APP被强杀了，为啥还要回到原先的页面中去而不是重走启动APP的流程?</strong></p>\n<p>我们虽然不能阻止Android系统销毁实例却保存Activity栈，也不想多写那些持久化或者Cache静态变量代码（这将是一件费力而且不太讨好的事情）所以我们唯一能做的就是检测应用是否被强杀，并且在被强杀之后重走启动流程而不是回到原先的逻辑当中。</p>\n<p>以下给出我的一种实现方式，如果你有更好的想法，欢迎和我交流:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">BaseActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">AppCompatActivity</span> </span>&#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> FLAG;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> FLAG_NOT_INIT = <span class=\"number\">200</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(@Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">super</span>.onCreate(savedInstanceState);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (FLAG != FLAG_NOT_INIT) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.getClass() == LauncherActivity.class) &#123;</span><br><span class=\"line\">        FLAG = FLAG_NOT_INIT;</span><br><span class=\"line\">      &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        reLauncher();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们实例化上述场景，给出一种对应关系:</p>\n<p>ActivityA –&gt; 启动页</p>\n<p>ActivityB –&gt; 主页</p>\n<p>ActivityC –&gt; 详情页</p>\n<p>其中将ActivityB的<code>launchMode</code>设置为<code>singleTask</code>，并且在BaseActivity中使用静态变量FLAG进行判断当前应用是否被强杀，如果被强杀则利用ActivityB的<code>launchMode</code>特性清空栈并重新初始化即可。</p>\n<h6 id=\"有关Activity的启动模式相关文章，可参阅Activity启动模式图文详解\"><a href=\"#有关Activity的启动模式相关文章，可参阅Activity启动模式图文详解\" class=\"headerlink\" title=\"有关Activity的启动模式相关文章，可参阅Activity启动模式图文详解\"></a>有关Activity的启动模式相关文章，可参阅<a href=\"http://www.jcodecraeer.com/a/anzhuokaifa/androidkaifa/2015/0520/2897.html\" target=\"_blank\" rel=\"noopener\">Activity启动模式图文详解</a></h6>"},{"title":"Android应用关闭所有Activity","date":"2015-04-05T15:45:54.000Z","_content":"### 前言\n>在Android开发中，常常想在某一个Activity或者Service中关闭所有打开的Activity。一直没有十分统一可行的方法。下面结合网络和自己的在项目中遇到的情况，给出一种实现方法。\n><!-- more -->\n- 创建一个类CloseAllActivity继承`Application`类。\n- 在该类内部创建一个`List`集合，用于保存打开的Activity。\n- 创建一个`public void addActivity(Activity activity)`方法,用于在Activity的`onCreate(Bundle bundle)`中调用。使该Activity被添加到List集合中。\n- 创建一个静态对象，并将其实例化一次，避免每次使用都得实例化。\n- 在需要添加到List集合中的Activity中，调用。\n- 编写一个exit()函数，关闭List集合中的所有Activity。\n\n>CloseAllActivity类具体代码如下:\n\n```java\npublic class CloseAllActivity extends Application {\n\n\t\tprivate List<Activity> activityList = new LinkedList<Activity>();\n\t\tprivate static CloseAllActivity instance;// 创建的静态对象，避免每次使用的实例化\n\n\t\tprivate CloseAllActivity() {\n\t\t\t// 空构造函数\n\t\t}\n\n\t\t// 实例化一次\n\t\tpublic synchronized static CloseAllActivity getInstance() {\n\t\t\tif (instance == null) {\n\t\t\t\tinstance = new CloseAllActivity();\n\t\t\t}\n\t\t\treturn instance;\n\t\t}\n\n\t\t/**\n\t\t * \n\t\t * @param activity\n\t\t *            将当前activity添加到activity集合中\n\t\t */\n\t\tpublic void addActivity(Activity activity) {\n\t\t\tactivityList.add(activity);\n\t\t}\n\n\t\tpublic void exit() {\n\t\t\ttry {\n\t\t\t\tfor (Activity activity : activityList) {\n\t\t\t\t\tif (activity != null) {\n\t\t\t\t\t\tactivity.finish();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLog.e(\"xiamo\", \"关闭activity错误：\" + e.toString());\n\t\t\t} finally {\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\t\t}\n\n\t}\n```\n\n>需要添加到List集合中关闭的Activity中，引用的方法为:\n```java\npublic void onCreate(Bundle bundle) {\n        super.onCreate(bundle);\n        CloseAllActivity.getInstance().addActivity(this);\n          ....\n              ....\n\t}\n```","source":"_posts/Android应用关闭所有Activity.md","raw":"title: \"Android应用关闭所有Activity\"\ndate: 2015-04-05 23:45:54\ncategories: Android\ntags:\n- Android\n- Activity\n---\n### 前言\n>在Android开发中，常常想在某一个Activity或者Service中关闭所有打开的Activity。一直没有十分统一可行的方法。下面结合网络和自己的在项目中遇到的情况，给出一种实现方法。\n><!-- more -->\n- 创建一个类CloseAllActivity继承`Application`类。\n- 在该类内部创建一个`List`集合，用于保存打开的Activity。\n- 创建一个`public void addActivity(Activity activity)`方法,用于在Activity的`onCreate(Bundle bundle)`中调用。使该Activity被添加到List集合中。\n- 创建一个静态对象，并将其实例化一次，避免每次使用都得实例化。\n- 在需要添加到List集合中的Activity中，调用。\n- 编写一个exit()函数，关闭List集合中的所有Activity。\n\n>CloseAllActivity类具体代码如下:\n\n```java\npublic class CloseAllActivity extends Application {\n\n\t\tprivate List<Activity> activityList = new LinkedList<Activity>();\n\t\tprivate static CloseAllActivity instance;// 创建的静态对象，避免每次使用的实例化\n\n\t\tprivate CloseAllActivity() {\n\t\t\t// 空构造函数\n\t\t}\n\n\t\t// 实例化一次\n\t\tpublic synchronized static CloseAllActivity getInstance() {\n\t\t\tif (instance == null) {\n\t\t\t\tinstance = new CloseAllActivity();\n\t\t\t}\n\t\t\treturn instance;\n\t\t}\n\n\t\t/**\n\t\t * \n\t\t * @param activity\n\t\t *            将当前activity添加到activity集合中\n\t\t */\n\t\tpublic void addActivity(Activity activity) {\n\t\t\tactivityList.add(activity);\n\t\t}\n\n\t\tpublic void exit() {\n\t\t\ttry {\n\t\t\t\tfor (Activity activity : activityList) {\n\t\t\t\t\tif (activity != null) {\n\t\t\t\t\t\tactivity.finish();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\tLog.e(\"xiamo\", \"关闭activity错误：\" + e.toString());\n\t\t\t} finally {\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\t\t}\n\n\t}\n```\n\n>需要添加到List集合中关闭的Activity中，引用的方法为:\n```java\npublic void onCreate(Bundle bundle) {\n        super.onCreate(bundle);\n        CloseAllActivity.getInstance().addActivity(this);\n          ....\n              ....\n\t}\n```","slug":"Android应用关闭所有Activity","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb8u000h2ev2wxv1stxu","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>在Android开发中，常常想在某一个Activity或者Service中关闭所有打开的Activity。一直没有十分统一可行的方法。下面结合网络和自己的在项目中遇到的情况，给出一种实现方法。<br><a id=\"more\"></a></p>\n<ul>\n<li>创建一个类CloseAllActivity继承<code>Application</code>类。</li>\n<li>在该类内部创建一个<code>List</code>集合，用于保存打开的Activity。</li>\n<li>创建一个<code>public void addActivity(Activity activity)</code>方法,用于在Activity的<code>onCreate(Bundle bundle)</code>中调用。使该Activity被添加到List集合中。</li>\n<li>创建一个静态对象，并将其实例化一次，避免每次使用都得实例化。</li>\n<li>在需要添加到List集合中的Activity中，调用。</li>\n<li>编写一个exit()函数，关闭List集合中的所有Activity。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>CloseAllActivity类具体代码如下:</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CloseAllActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> List&lt;Activity&gt; activityList = <span class=\"keyword\">new</span> LinkedList&lt;Activity&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> CloseAllActivity instance;<span class=\"comment\">// 创建的静态对象，避免每次使用的实例化</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">CloseAllActivity</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 空构造函数</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 实例化一次</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> CloseAllActivity <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tinstance = <span class=\"keyword\">new</span> CloseAllActivity();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * <span class=\"doctag\">@param</span> activity</span></span><br><span class=\"line\"><span class=\"comment\">\t\t *            将当前activity添加到activity集合中</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addActivity</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">\t\t\tactivityList.add(activity);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (Activity activity : activityList) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (activity != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tactivity.finish();</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\tLog.e(<span class=\"string\">\"xiamo\"</span>, <span class=\"string\">\"关闭activity错误：\"</span> + e.toString());</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t\tSystem.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>需要添加到List集合中关闭的Activity中，引用的方法为:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle bundle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(bundle);</span><br><span class=\"line\">        CloseAllActivity.getInstance().addActivity(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">          ....</span><br><span class=\"line\">              ....</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>在Android开发中，常常想在某一个Activity或者Service中关闭所有打开的Activity。一直没有十分统一可行的方法。下面结合网络和自己的在项目中遇到的情况，给出一种实现方法。<br>","more":"</p>\n<ul>\n<li>创建一个类CloseAllActivity继承<code>Application</code>类。</li>\n<li>在该类内部创建一个<code>List</code>集合，用于保存打开的Activity。</li>\n<li>创建一个<code>public void addActivity(Activity activity)</code>方法,用于在Activity的<code>onCreate(Bundle bundle)</code>中调用。使该Activity被添加到List集合中。</li>\n<li>创建一个静态对象，并将其实例化一次，避免每次使用都得实例化。</li>\n<li>在需要添加到List集合中的Activity中，调用。</li>\n<li>编写一个exit()函数，关闭List集合中的所有Activity。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>CloseAllActivity类具体代码如下:</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CloseAllActivity</span> <span class=\"keyword\">extends</span> <span class=\"title\">Application</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> List&lt;Activity&gt; activityList = <span class=\"keyword\">new</span> LinkedList&lt;Activity&gt;();</span><br><span class=\"line\">\t\t<span class=\"keyword\">private</span> <span class=\"keyword\">static</span> CloseAllActivity instance;<span class=\"comment\">// 创建的静态对象，避免每次使用的实例化</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">private</span> <span class=\"title\">CloseAllActivity</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 空构造函数</span></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">// 实例化一次</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> CloseAllActivity <span class=\"title\">getInstance</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (instance == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\tinstance = <span class=\"keyword\">new</span> CloseAllActivity();</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> instance;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">\t\t * </span></span><br><span class=\"line\"><span class=\"comment\">\t\t * <span class=\"doctag\">@param</span> activity</span></span><br><span class=\"line\"><span class=\"comment\">\t\t *            将当前activity添加到activity集合中</span></span><br><span class=\"line\"><span class=\"comment\">\t\t */</span></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">addActivity</span><span class=\"params\">(Activity activity)</span> </span>&#123;</span><br><span class=\"line\">\t\t\tactivityList.add(activity);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">exit</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (Activity activity : activityList) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (activity != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\tactivity.finish();</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">catch</span> (Exception e) &#123;</span><br><span class=\"line\">\t\t\t\tLog.e(<span class=\"string\">\"xiamo\"</span>, <span class=\"string\">\"关闭activity错误：\"</span> + e.toString());</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">\t\t\t\tSystem.exit(<span class=\"number\">0</span>);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>需要添加到List集合中关闭的Activity中，引用的方法为:<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onCreate</span><span class=\"params\">(Bundle bundle)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">super</span>.onCreate(bundle);</span><br><span class=\"line\">        CloseAllActivity.getInstance().addActivity(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">          ....</span><br><span class=\"line\">              ....</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></p>\n</blockquote>"},{"title":"Debian下配置exim4 邮件服务器","date":"2015-04-27T03:19:53.000Z","isupdate":true,"updatetime":"2015-07-18T16:00:00.000Z","_content":"\n### 前言\n\n>由于博主在[DigitalOcean](https://www.digitalocean.com/?refcode=f07fa4a5aaf1)上购入了一台VPS,并在上面搭建托管了一些服务，不定时的需要登录到服务器上进行管理查看错误日志，比较麻烦。于是打算编写一个`shell`脚本，来监控服务器的一些问题，并在发现问题的时候自动邮件通知到我。\n\n\n<!-- more -->\n\n>因此，第一步当然得是有一个可用的MTA服务器了。还好Debian默认安装了`Exim4`,可以直接使用。\n\n\n### 安装exim4\n\n- 如果你的服务器或者Linux上没有安装`exim4`，请执行以下命令进行安装：\n\n```bash\n# apt-get install exim4-daemon-light mailutils\n```\n\n### 配置exim4\n\n>配置`exim4`有两种方式:\n\n 1. 使用图形化界面配置\n 2. 编辑配置文件进行配置\n\n\n在这里我们还是选择比较亲民的图形化界面配置吧。。（博主懒~~）\n\n#### 图形化界面配置exim4\n\n\n\n在终端中运行以下命令:\n\n```bash\n# dpkg-reconfigure exim4-config\n```\n\n##### 配置邮件系统类型\n\n>将会出现一个图形化的配置界面。如下图所示:\n\n<center>![](http://i3.piimg.com/5468f666400f4765.jpg)</center>\n\n根据自己的需要选择:\n\n- 这里博主考虑到只需要能够发送邮件即可，加上安全性考虑，选择`mail sent by smarthost;no local mail`。\n- 如果你是要搭建邮件服务器，进行接收和发送邮件。请选择`internet site;mail is sent and received directly using SMTP`。\n\n##### 系统邮件名称\n\n>回车过后，将会来到配置系统邮件名称的界面，如图:\n\n<center>![](http://i3.piimg.com/6b56408a64016c4f.jpg)</center>\n\n此处填写你用来发送邮件的邮件域名。例如:你的邮件地址为:<font color=red>`xiamo@gmail.com`</font>,则此处填写为<font color=red>`gmail.com`</font>\n\n##### 监听入站STMP连接IP地址\n\n>回车过后，将会配置exim4要监听的入站STMP连接的ip地址，如图:\n\n![](http://i3.piimg.com/60bfc1ae6462025a.jpg)\n\n\n博主填写的为`127.0.0.1`，这表示只监听本地端口，也就是只有本机才能够发邮件，外部不能访问。\n\n\n##### 其它可接收邮件的目的地址\n\n>回车过后，将会配置其它可以接收邮件的目的地址，如图：\n\n![](http://i3.piimg.com/8c8a5fd6997e07f8.jpg)\n\n此处直接留空即可。\n\n\n##### 配置本地可见域名\n\n>回车确认之后，将会配置本地用户可见的域名，如图:\n\n![](http://i3.piimg.com/0361c3bae4e09b4b.jpg)\n\n\n此处和配置`系统邮件名称`一样，填写发邮件的邮箱域名。例如:`gmail.com`。\n\n\n##### 配置发邮件的主机名。\n\n>回车确认之后，将会配置发邮件使用的smarthost的ip地址或主机名，如图:\n\n![](http://i3.piimg.com/fb1bc44dba574379.jpg)\n\n此处填写外部的STMP地址，因为博主使用的gmail，所以填写的是Gmail的STMP地址:`smtp.gmail.com`。\n\n##### 配置DNS查询量\n\n>回车确认之后，将会配置DNS查询量，如图:\n\n![](http://i3.piimg.com/869d4e0d3ef4c9bc.jpg)\n\n此处选择`NO`，来提高响应速度。如果您的服务器资源宝贵可以使用`Yes`。不过可能会出现一些延迟问题。\n\n##### 配置文件拆分\n\n>回车过后，将会询问你是否要将配置文件拆分为小文件，如图:\n\n![](http://i3.piimg.com/142101ddb8358d8f.jpg)\n\n此处建议选择`NO`，如果你不搭建复杂的邮件服务器的话，保持默认就可以了。不用拆分配置文件。\n\n\n>至此，图形化界面就完成配置了。不过呢，现在还不能发送邮件，还需要一些其他的配置。\n\n#### 修改配置文件\n\n##### 配置发送邮箱的账号和密码\n\n现在需要配置发送邮件的邮箱账号和密码，需要编辑`/etc/exim4/passwd.client`这个文件。使用命令:\n\n```bash\n# vim /etc/exim4/passwwd.client\n```\n在文件末尾加入以下内容:\n```bash\n*:xiamo@gmail.com:password\n```\n格式为: <font color=red>`发件邮箱STMP服务器:发件邮箱账号:发件邮箱密码`</font>,因为我们在图形化界面中已经配置过STMP服务器地址了，所以这里可以使用通配符`*`代替。当然，你也可以填写SMTP地址:\n\n```bash\n    stmp.gmail.com:xiamo@gmail.com:password\n```\n\n\n##### 配置系统邮箱\n\n现在，我们需要配置系统`mail`命令的默认邮箱，需要编辑`/etc/email-addresses`这个文件。使用命令:\n\n```bash\n# vim /etc/email-addresses\n```\n\n在文件末尾加入以下内容:\n\n```bash\n    root: xiamo@gmail.com\n```\n\n格式为:<font color-red>`系统用户名: 发件邮箱地址`</font>。注意：冒号`:`后有一个空格。\n\n##### 配置exim4，使其支持明文密码\n\n现在，我们需要对`/etc/exim4/exim4.conf.template`这个文件进行编辑，使用命令:\n\n```bash\n# vim /etc/exim4/exim4.conf.template\n```\n在`1996`行上一行，也就是`cram_md5:`上方（博主的文件是1996行）加入以下内容:\n\n```bash\nAUTH_CLIENT_ALLOW_NOTLS_PASSWORDS=1\n```\n\n然后保存退出。\n\n键入以下命令重启`exim4`：\n```bash\n# service exim4 restart \n```\n至此，exim4邮件配置就完成了。是不是很简单呢~~\n\n### 发送测试邮件\n\n配置完成需要发送一封测试邮件看看服务可用不呢~，键入命令:\n\n```bash\n# mail wanghaokoko1994@gmail.com\n```\n其中，`wanghaokoko1994@gmail.com`为你想要发送到的邮箱地址，接着按提示输入主题、邮件内容。然后再使用`Ctrl` + `D`组合键完成输入，即可完成发送:\n```bash\nmail wanghaokoko1994@gmail.com\nSubject: test email\nhello,this is a test email!\nEOT\n```\n\n### 可能出现的错误\n\n有的时候可能会遇到exim4抛出的错误，如下:\n```bash\ndebian ALERT: exim paniclog /var/log/exim4/paniclog has non-zero size, mail system possibly broken\n```\n针对这个情况，可以使用以下方法解决:\n\n- 停止`exim4`\n\n```bash\nservice exim4 stop\n```\n- 删除`paniclog`文件\n\n```bash\n rm /var/log/exim4/paniclog\n```\n- 启动`exim4`\n\n```bash\nservice exim4 start\n```\n\n\n这样，错误问题就完美解决了~\n\n\n\n\n\n","source":"_posts/Debian下配置exim4-邮件服务器.md","raw":"title: \"Debian下配置exim4 邮件服务器\"\ndate: 2015-04-27 11:19:53\nisupdate: true\nupdatetime: 2015-07-19\ncategories: Linux\ntags:\n- Debian\n- Linux\n- Exim4\n- 服务器\n---\n\n### 前言\n\n>由于博主在[DigitalOcean](https://www.digitalocean.com/?refcode=f07fa4a5aaf1)上购入了一台VPS,并在上面搭建托管了一些服务，不定时的需要登录到服务器上进行管理查看错误日志，比较麻烦。于是打算编写一个`shell`脚本，来监控服务器的一些问题，并在发现问题的时候自动邮件通知到我。\n\n\n<!-- more -->\n\n>因此，第一步当然得是有一个可用的MTA服务器了。还好Debian默认安装了`Exim4`,可以直接使用。\n\n\n### 安装exim4\n\n- 如果你的服务器或者Linux上没有安装`exim4`，请执行以下命令进行安装：\n\n```bash\n# apt-get install exim4-daemon-light mailutils\n```\n\n### 配置exim4\n\n>配置`exim4`有两种方式:\n\n 1. 使用图形化界面配置\n 2. 编辑配置文件进行配置\n\n\n在这里我们还是选择比较亲民的图形化界面配置吧。。（博主懒~~）\n\n#### 图形化界面配置exim4\n\n\n\n在终端中运行以下命令:\n\n```bash\n# dpkg-reconfigure exim4-config\n```\n\n##### 配置邮件系统类型\n\n>将会出现一个图形化的配置界面。如下图所示:\n\n<center>![](http://i3.piimg.com/5468f666400f4765.jpg)</center>\n\n根据自己的需要选择:\n\n- 这里博主考虑到只需要能够发送邮件即可，加上安全性考虑，选择`mail sent by smarthost;no local mail`。\n- 如果你是要搭建邮件服务器，进行接收和发送邮件。请选择`internet site;mail is sent and received directly using SMTP`。\n\n##### 系统邮件名称\n\n>回车过后，将会来到配置系统邮件名称的界面，如图:\n\n<center>![](http://i3.piimg.com/6b56408a64016c4f.jpg)</center>\n\n此处填写你用来发送邮件的邮件域名。例如:你的邮件地址为:<font color=red>`xiamo@gmail.com`</font>,则此处填写为<font color=red>`gmail.com`</font>\n\n##### 监听入站STMP连接IP地址\n\n>回车过后，将会配置exim4要监听的入站STMP连接的ip地址，如图:\n\n![](http://i3.piimg.com/60bfc1ae6462025a.jpg)\n\n\n博主填写的为`127.0.0.1`，这表示只监听本地端口，也就是只有本机才能够发邮件，外部不能访问。\n\n\n##### 其它可接收邮件的目的地址\n\n>回车过后，将会配置其它可以接收邮件的目的地址，如图：\n\n![](http://i3.piimg.com/8c8a5fd6997e07f8.jpg)\n\n此处直接留空即可。\n\n\n##### 配置本地可见域名\n\n>回车确认之后，将会配置本地用户可见的域名，如图:\n\n![](http://i3.piimg.com/0361c3bae4e09b4b.jpg)\n\n\n此处和配置`系统邮件名称`一样，填写发邮件的邮箱域名。例如:`gmail.com`。\n\n\n##### 配置发邮件的主机名。\n\n>回车确认之后，将会配置发邮件使用的smarthost的ip地址或主机名，如图:\n\n![](http://i3.piimg.com/fb1bc44dba574379.jpg)\n\n此处填写外部的STMP地址，因为博主使用的gmail，所以填写的是Gmail的STMP地址:`smtp.gmail.com`。\n\n##### 配置DNS查询量\n\n>回车确认之后，将会配置DNS查询量，如图:\n\n![](http://i3.piimg.com/869d4e0d3ef4c9bc.jpg)\n\n此处选择`NO`，来提高响应速度。如果您的服务器资源宝贵可以使用`Yes`。不过可能会出现一些延迟问题。\n\n##### 配置文件拆分\n\n>回车过后，将会询问你是否要将配置文件拆分为小文件，如图:\n\n![](http://i3.piimg.com/142101ddb8358d8f.jpg)\n\n此处建议选择`NO`，如果你不搭建复杂的邮件服务器的话，保持默认就可以了。不用拆分配置文件。\n\n\n>至此，图形化界面就完成配置了。不过呢，现在还不能发送邮件，还需要一些其他的配置。\n\n#### 修改配置文件\n\n##### 配置发送邮箱的账号和密码\n\n现在需要配置发送邮件的邮箱账号和密码，需要编辑`/etc/exim4/passwd.client`这个文件。使用命令:\n\n```bash\n# vim /etc/exim4/passwwd.client\n```\n在文件末尾加入以下内容:\n```bash\n*:xiamo@gmail.com:password\n```\n格式为: <font color=red>`发件邮箱STMP服务器:发件邮箱账号:发件邮箱密码`</font>,因为我们在图形化界面中已经配置过STMP服务器地址了，所以这里可以使用通配符`*`代替。当然，你也可以填写SMTP地址:\n\n```bash\n    stmp.gmail.com:xiamo@gmail.com:password\n```\n\n\n##### 配置系统邮箱\n\n现在，我们需要配置系统`mail`命令的默认邮箱，需要编辑`/etc/email-addresses`这个文件。使用命令:\n\n```bash\n# vim /etc/email-addresses\n```\n\n在文件末尾加入以下内容:\n\n```bash\n    root: xiamo@gmail.com\n```\n\n格式为:<font color-red>`系统用户名: 发件邮箱地址`</font>。注意：冒号`:`后有一个空格。\n\n##### 配置exim4，使其支持明文密码\n\n现在，我们需要对`/etc/exim4/exim4.conf.template`这个文件进行编辑，使用命令:\n\n```bash\n# vim /etc/exim4/exim4.conf.template\n```\n在`1996`行上一行，也就是`cram_md5:`上方（博主的文件是1996行）加入以下内容:\n\n```bash\nAUTH_CLIENT_ALLOW_NOTLS_PASSWORDS=1\n```\n\n然后保存退出。\n\n键入以下命令重启`exim4`：\n```bash\n# service exim4 restart \n```\n至此，exim4邮件配置就完成了。是不是很简单呢~~\n\n### 发送测试邮件\n\n配置完成需要发送一封测试邮件看看服务可用不呢~，键入命令:\n\n```bash\n# mail wanghaokoko1994@gmail.com\n```\n其中，`wanghaokoko1994@gmail.com`为你想要发送到的邮箱地址，接着按提示输入主题、邮件内容。然后再使用`Ctrl` + `D`组合键完成输入，即可完成发送:\n```bash\nmail wanghaokoko1994@gmail.com\nSubject: test email\nhello,this is a test email!\nEOT\n```\n\n### 可能出现的错误\n\n有的时候可能会遇到exim4抛出的错误，如下:\n```bash\ndebian ALERT: exim paniclog /var/log/exim4/paniclog has non-zero size, mail system possibly broken\n```\n针对这个情况，可以使用以下方法解决:\n\n- 停止`exim4`\n\n```bash\nservice exim4 stop\n```\n- 删除`paniclog`文件\n\n```bash\n rm /var/log/exim4/paniclog\n```\n- 启动`exim4`\n\n```bash\nservice exim4 start\n```\n\n\n这样，错误问题就完美解决了~\n\n\n\n\n\n","slug":"Debian下配置exim4-邮件服务器","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb8w000k2ev2pa6rwqpd","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>由于博主在<a href=\"https://www.digitalocean.com/?refcode=f07fa4a5aaf1\" target=\"_blank\" rel=\"noopener\">DigitalOcean</a>上购入了一台VPS,并在上面搭建托管了一些服务，不定时的需要登录到服务器上进行管理查看错误日志，比较麻烦。于是打算编写一个<code>shell</code>脚本，来监控服务器的一些问题，并在发现问题的时候自动邮件通知到我。</p>\n</blockquote>\n<a id=\"more\"></a>\n<blockquote>\n<p>因此，第一步当然得是有一个可用的MTA服务器了。还好Debian默认安装了<code>Exim4</code>,可以直接使用。</p>\n</blockquote>\n<h3 id=\"安装exim4\"><a href=\"#安装exim4\" class=\"headerlink\" title=\"安装exim4\"></a>安装exim4</h3><ul>\n<li>如果你的服务器或者Linux上没有安装<code>exim4</code>，请执行以下命令进行安装：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># apt-get install exim4-daemon-light mailutils</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"配置exim4\"><a href=\"#配置exim4\" class=\"headerlink\" title=\"配置exim4\"></a>配置exim4</h3><blockquote>\n<p>配置<code>exim4</code>有两种方式:</p>\n</blockquote>\n<ol>\n<li>使用图形化界面配置</li>\n<li>编辑配置文件进行配置</li>\n</ol>\n<p>在这里我们还是选择比较亲民的图形化界面配置吧。。（博主懒~~）</p>\n<h4 id=\"图形化界面配置exim4\"><a href=\"#图形化界面配置exim4\" class=\"headerlink\" title=\"图形化界面配置exim4\"></a>图形化界面配置exim4</h4><p>在终端中运行以下命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># dpkg-reconfigure exim4-config</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"配置邮件系统类型\"><a href=\"#配置邮件系统类型\" class=\"headerlink\" title=\"配置邮件系统类型\"></a>配置邮件系统类型</h5><blockquote>\n<p>将会出现一个图形化的配置界面。如下图所示:</p>\n</blockquote>\n<center><img src=\"http://i3.piimg.com/5468f666400f4765.jpg\" alt></center>\n\n<p>根据自己的需要选择:</p>\n<ul>\n<li>这里博主考虑到只需要能够发送邮件即可，加上安全性考虑，选择<code>mail sent by smarthost;no local mail</code>。</li>\n<li>如果你是要搭建邮件服务器，进行接收和发送邮件。请选择<code>internet site;mail is sent and received directly using SMTP</code>。</li>\n</ul>\n<h5 id=\"系统邮件名称\"><a href=\"#系统邮件名称\" class=\"headerlink\" title=\"系统邮件名称\"></a>系统邮件名称</h5><blockquote>\n<p>回车过后，将会来到配置系统邮件名称的界面，如图:</p>\n</blockquote>\n<center><img src=\"http://i3.piimg.com/6b56408a64016c4f.jpg\" alt></center>\n\n<p>此处填写你用来发送邮件的邮件域名。例如:你的邮件地址为:<font color=\"red\"><a href=\"mailto:`xiamo@gmail.com\" target=\"_blank\" rel=\"noopener\">`xiamo@gmail.com</a><code>&lt;/font&gt;,则此处填写为&lt;font color=red&gt;</code>gmail.com`</font></p>\n<h5 id=\"监听入站STMP连接IP地址\"><a href=\"#监听入站STMP连接IP地址\" class=\"headerlink\" title=\"监听入站STMP连接IP地址\"></a>监听入站STMP连接IP地址</h5><blockquote>\n<p>回车过后，将会配置exim4要监听的入站STMP连接的ip地址，如图:</p>\n</blockquote>\n<p><img src=\"http://i3.piimg.com/60bfc1ae6462025a.jpg\" alt></p>\n<p>博主填写的为<code>127.0.0.1</code>，这表示只监听本地端口，也就是只有本机才能够发邮件，外部不能访问。</p>\n<h5 id=\"其它可接收邮件的目的地址\"><a href=\"#其它可接收邮件的目的地址\" class=\"headerlink\" title=\"其它可接收邮件的目的地址\"></a>其它可接收邮件的目的地址</h5><blockquote>\n<p>回车过后，将会配置其它可以接收邮件的目的地址，如图：</p>\n</blockquote>\n<p><img src=\"http://i3.piimg.com/8c8a5fd6997e07f8.jpg\" alt></p>\n<p>此处直接留空即可。</p>\n<h5 id=\"配置本地可见域名\"><a href=\"#配置本地可见域名\" class=\"headerlink\" title=\"配置本地可见域名\"></a>配置本地可见域名</h5><blockquote>\n<p>回车确认之后，将会配置本地用户可见的域名，如图:</p>\n</blockquote>\n<p><img src=\"http://i3.piimg.com/0361c3bae4e09b4b.jpg\" alt></p>\n<p>此处和配置<code>系统邮件名称</code>一样，填写发邮件的邮箱域名。例如:<code>gmail.com</code>。</p>\n<h5 id=\"配置发邮件的主机名。\"><a href=\"#配置发邮件的主机名。\" class=\"headerlink\" title=\"配置发邮件的主机名。\"></a>配置发邮件的主机名。</h5><blockquote>\n<p>回车确认之后，将会配置发邮件使用的smarthost的ip地址或主机名，如图:</p>\n</blockquote>\n<p><img src=\"http://i3.piimg.com/fb1bc44dba574379.jpg\" alt></p>\n<p>此处填写外部的STMP地址，因为博主使用的gmail，所以填写的是Gmail的STMP地址:<code>smtp.gmail.com</code>。</p>\n<h5 id=\"配置DNS查询量\"><a href=\"#配置DNS查询量\" class=\"headerlink\" title=\"配置DNS查询量\"></a>配置DNS查询量</h5><blockquote>\n<p>回车确认之后，将会配置DNS查询量，如图:</p>\n</blockquote>\n<p><img src=\"http://i3.piimg.com/869d4e0d3ef4c9bc.jpg\" alt></p>\n<p>此处选择<code>NO</code>，来提高响应速度。如果您的服务器资源宝贵可以使用<code>Yes</code>。不过可能会出现一些延迟问题。</p>\n<h5 id=\"配置文件拆分\"><a href=\"#配置文件拆分\" class=\"headerlink\" title=\"配置文件拆分\"></a>配置文件拆分</h5><blockquote>\n<p>回车过后，将会询问你是否要将配置文件拆分为小文件，如图:</p>\n</blockquote>\n<p><img src=\"http://i3.piimg.com/142101ddb8358d8f.jpg\" alt></p>\n<p>此处建议选择<code>NO</code>，如果你不搭建复杂的邮件服务器的话，保持默认就可以了。不用拆分配置文件。</p>\n<blockquote>\n<p>至此，图形化界面就完成配置了。不过呢，现在还不能发送邮件，还需要一些其他的配置。</p>\n</blockquote>\n<h4 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h4><h5 id=\"配置发送邮箱的账号和密码\"><a href=\"#配置发送邮箱的账号和密码\" class=\"headerlink\" title=\"配置发送邮箱的账号和密码\"></a>配置发送邮箱的账号和密码</h5><p>现在需要配置发送邮件的邮箱账号和密码，需要编辑<code>/etc/exim4/passwd.client</code>这个文件。使用命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim /etc/exim4/passwwd.client</span></span><br></pre></td></tr></table></figure>\n<p>在文件末尾加入以下内容:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*:xiamo@gmail.com:password</span><br></pre></td></tr></table></figure></p>\n<p>格式为: <font color=\"red\"><code>发件邮箱STMP服务器:发件邮箱账号:发件邮箱密码</code></font>,因为我们在图形化界面中已经配置过STMP服务器地址了，所以这里可以使用通配符<code>*</code>代替。当然，你也可以填写SMTP地址:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stmp.gmail.com:xiamo@gmail.com:password</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置系统邮箱\"><a href=\"#配置系统邮箱\" class=\"headerlink\" title=\"配置系统邮箱\"></a>配置系统邮箱</h5><p>现在，我们需要配置系统<code>mail</code>命令的默认邮箱，需要编辑<code>/etc/email-addresses</code>这个文件。使用命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim /etc/email-addresses</span></span><br></pre></td></tr></table></figure>\n<p>在文件末尾加入以下内容:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root: xiamo@gmail.com</span><br></pre></td></tr></table></figure>\n<p>格式为:<font color-red><code>系统用户名: 发件邮箱地址</code></font>。注意：冒号<code>:</code>后有一个空格。</p>\n<h5 id=\"配置exim4，使其支持明文密码\"><a href=\"#配置exim4，使其支持明文密码\" class=\"headerlink\" title=\"配置exim4，使其支持明文密码\"></a>配置exim4，使其支持明文密码</h5><p>现在，我们需要对<code>/etc/exim4/exim4.conf.template</code>这个文件进行编辑，使用命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim /etc/exim4/exim4.conf.template</span></span><br></pre></td></tr></table></figure>\n<p>在<code>1996</code>行上一行，也就是<code>cram_md5:</code>上方（博主的文件是1996行）加入以下内容:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AUTH_CLIENT_ALLOW_NOTLS_PASSWORDS=1</span><br></pre></td></tr></table></figure>\n<p>然后保存退出。</p>\n<p>键入以下命令重启<code>exim4</code>：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># service exim4 restart</span></span><br></pre></td></tr></table></figure></p>\n<p>至此，exim4邮件配置就完成了。是不是很简单呢~~</p>\n<h3 id=\"发送测试邮件\"><a href=\"#发送测试邮件\" class=\"headerlink\" title=\"发送测试邮件\"></a>发送测试邮件</h3><p>配置完成需要发送一封测试邮件看看服务可用不呢~，键入命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mail wanghaokoko1994@gmail.com</span></span><br></pre></td></tr></table></figure>\n<p>其中，<a href=\"mailto:`wanghaokoko1994@gmail.com\" target=\"_blank\" rel=\"noopener\">`wanghaokoko1994@gmail.com</a><code>为你想要发送到的邮箱地址，接着按提示输入主题、邮件内容。然后再使用</code>Ctrl<code>+</code>D`组合键完成输入，即可完成发送:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mail wanghaokoko1994@gmail.com</span><br><span class=\"line\">Subject: <span class=\"built_in\">test</span> email</span><br><span class=\"line\">hello,this is a <span class=\"built_in\">test</span> email!</span><br><span class=\"line\">EOT</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"可能出现的错误\"><a href=\"#可能出现的错误\" class=\"headerlink\" title=\"可能出现的错误\"></a>可能出现的错误</h3><p>有的时候可能会遇到exim4抛出的错误，如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debian ALERT: exim paniclog /var/<span class=\"built_in\">log</span>/exim4/paniclog has non-zero size, mail system possibly broken</span><br></pre></td></tr></table></figure></p>\n<p>针对这个情况，可以使用以下方法解决:</p>\n<ul>\n<li>停止<code>exim4</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service exim4 stop</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除<code>paniclog</code>文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm /var/<span class=\"built_in\">log</span>/exim4/paniclog</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动<code>exim4</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service exim4 start</span><br></pre></td></tr></table></figure>\n<p>这样，错误问题就完美解决了~</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><blockquote>\n<p>由于博主在<a href=\"https://www.digitalocean.com/?refcode=f07fa4a5aaf1\" target=\"_blank\" rel=\"noopener\">DigitalOcean</a>上购入了一台VPS,并在上面搭建托管了一些服务，不定时的需要登录到服务器上进行管理查看错误日志，比较麻烦。于是打算编写一个<code>shell</code>脚本，来监控服务器的一些问题，并在发现问题的时候自动邮件通知到我。</p>\n</blockquote>","more":"<blockquote>\n<p>因此，第一步当然得是有一个可用的MTA服务器了。还好Debian默认安装了<code>Exim4</code>,可以直接使用。</p>\n</blockquote>\n<h3 id=\"安装exim4\"><a href=\"#安装exim4\" class=\"headerlink\" title=\"安装exim4\"></a>安装exim4</h3><ul>\n<li>如果你的服务器或者Linux上没有安装<code>exim4</code>，请执行以下命令进行安装：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># apt-get install exim4-daemon-light mailutils</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"配置exim4\"><a href=\"#配置exim4\" class=\"headerlink\" title=\"配置exim4\"></a>配置exim4</h3><blockquote>\n<p>配置<code>exim4</code>有两种方式:</p>\n</blockquote>\n<ol>\n<li>使用图形化界面配置</li>\n<li>编辑配置文件进行配置</li>\n</ol>\n<p>在这里我们还是选择比较亲民的图形化界面配置吧。。（博主懒~~）</p>\n<h4 id=\"图形化界面配置exim4\"><a href=\"#图形化界面配置exim4\" class=\"headerlink\" title=\"图形化界面配置exim4\"></a>图形化界面配置exim4</h4><p>在终端中运行以下命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># dpkg-reconfigure exim4-config</span></span><br></pre></td></tr></table></figure>\n<h5 id=\"配置邮件系统类型\"><a href=\"#配置邮件系统类型\" class=\"headerlink\" title=\"配置邮件系统类型\"></a>配置邮件系统类型</h5><blockquote>\n<p>将会出现一个图形化的配置界面。如下图所示:</p>\n</blockquote>\n<center><img src=\"http://i3.piimg.com/5468f666400f4765.jpg\" alt></center>\n\n<p>根据自己的需要选择:</p>\n<ul>\n<li>这里博主考虑到只需要能够发送邮件即可，加上安全性考虑，选择<code>mail sent by smarthost;no local mail</code>。</li>\n<li>如果你是要搭建邮件服务器，进行接收和发送邮件。请选择<code>internet site;mail is sent and received directly using SMTP</code>。</li>\n</ul>\n<h5 id=\"系统邮件名称\"><a href=\"#系统邮件名称\" class=\"headerlink\" title=\"系统邮件名称\"></a>系统邮件名称</h5><blockquote>\n<p>回车过后，将会来到配置系统邮件名称的界面，如图:</p>\n</blockquote>\n<center><img src=\"http://i3.piimg.com/6b56408a64016c4f.jpg\" alt></center>\n\n<p>此处填写你用来发送邮件的邮件域名。例如:你的邮件地址为:<font color=\"red\"><a href=\"mailto:`xiamo@gmail.com\" target=\"_blank\" rel=\"noopener\">`xiamo@gmail.com</a><code>&lt;/font&gt;,则此处填写为&lt;font color=red&gt;</code>gmail.com`</font></p>\n<h5 id=\"监听入站STMP连接IP地址\"><a href=\"#监听入站STMP连接IP地址\" class=\"headerlink\" title=\"监听入站STMP连接IP地址\"></a>监听入站STMP连接IP地址</h5><blockquote>\n<p>回车过后，将会配置exim4要监听的入站STMP连接的ip地址，如图:</p>\n</blockquote>\n<p><img src=\"http://i3.piimg.com/60bfc1ae6462025a.jpg\" alt></p>\n<p>博主填写的为<code>127.0.0.1</code>，这表示只监听本地端口，也就是只有本机才能够发邮件，外部不能访问。</p>\n<h5 id=\"其它可接收邮件的目的地址\"><a href=\"#其它可接收邮件的目的地址\" class=\"headerlink\" title=\"其它可接收邮件的目的地址\"></a>其它可接收邮件的目的地址</h5><blockquote>\n<p>回车过后，将会配置其它可以接收邮件的目的地址，如图：</p>\n</blockquote>\n<p><img src=\"http://i3.piimg.com/8c8a5fd6997e07f8.jpg\" alt></p>\n<p>此处直接留空即可。</p>\n<h5 id=\"配置本地可见域名\"><a href=\"#配置本地可见域名\" class=\"headerlink\" title=\"配置本地可见域名\"></a>配置本地可见域名</h5><blockquote>\n<p>回车确认之后，将会配置本地用户可见的域名，如图:</p>\n</blockquote>\n<p><img src=\"http://i3.piimg.com/0361c3bae4e09b4b.jpg\" alt></p>\n<p>此处和配置<code>系统邮件名称</code>一样，填写发邮件的邮箱域名。例如:<code>gmail.com</code>。</p>\n<h5 id=\"配置发邮件的主机名。\"><a href=\"#配置发邮件的主机名。\" class=\"headerlink\" title=\"配置发邮件的主机名。\"></a>配置发邮件的主机名。</h5><blockquote>\n<p>回车确认之后，将会配置发邮件使用的smarthost的ip地址或主机名，如图:</p>\n</blockquote>\n<p><img src=\"http://i3.piimg.com/fb1bc44dba574379.jpg\" alt></p>\n<p>此处填写外部的STMP地址，因为博主使用的gmail，所以填写的是Gmail的STMP地址:<code>smtp.gmail.com</code>。</p>\n<h5 id=\"配置DNS查询量\"><a href=\"#配置DNS查询量\" class=\"headerlink\" title=\"配置DNS查询量\"></a>配置DNS查询量</h5><blockquote>\n<p>回车确认之后，将会配置DNS查询量，如图:</p>\n</blockquote>\n<p><img src=\"http://i3.piimg.com/869d4e0d3ef4c9bc.jpg\" alt></p>\n<p>此处选择<code>NO</code>，来提高响应速度。如果您的服务器资源宝贵可以使用<code>Yes</code>。不过可能会出现一些延迟问题。</p>\n<h5 id=\"配置文件拆分\"><a href=\"#配置文件拆分\" class=\"headerlink\" title=\"配置文件拆分\"></a>配置文件拆分</h5><blockquote>\n<p>回车过后，将会询问你是否要将配置文件拆分为小文件，如图:</p>\n</blockquote>\n<p><img src=\"http://i3.piimg.com/142101ddb8358d8f.jpg\" alt></p>\n<p>此处建议选择<code>NO</code>，如果你不搭建复杂的邮件服务器的话，保持默认就可以了。不用拆分配置文件。</p>\n<blockquote>\n<p>至此，图形化界面就完成配置了。不过呢，现在还不能发送邮件，还需要一些其他的配置。</p>\n</blockquote>\n<h4 id=\"修改配置文件\"><a href=\"#修改配置文件\" class=\"headerlink\" title=\"修改配置文件\"></a>修改配置文件</h4><h5 id=\"配置发送邮箱的账号和密码\"><a href=\"#配置发送邮箱的账号和密码\" class=\"headerlink\" title=\"配置发送邮箱的账号和密码\"></a>配置发送邮箱的账号和密码</h5><p>现在需要配置发送邮件的邮箱账号和密码，需要编辑<code>/etc/exim4/passwd.client</code>这个文件。使用命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim /etc/exim4/passwwd.client</span></span><br></pre></td></tr></table></figure>\n<p>在文件末尾加入以下内容:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*:xiamo@gmail.com:password</span><br></pre></td></tr></table></figure></p>\n<p>格式为: <font color=\"red\"><code>发件邮箱STMP服务器:发件邮箱账号:发件邮箱密码</code></font>,因为我们在图形化界面中已经配置过STMP服务器地址了，所以这里可以使用通配符<code>*</code>代替。当然，你也可以填写SMTP地址:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">stmp.gmail.com:xiamo@gmail.com:password</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置系统邮箱\"><a href=\"#配置系统邮箱\" class=\"headerlink\" title=\"配置系统邮箱\"></a>配置系统邮箱</h5><p>现在，我们需要配置系统<code>mail</code>命令的默认邮箱，需要编辑<code>/etc/email-addresses</code>这个文件。使用命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim /etc/email-addresses</span></span><br></pre></td></tr></table></figure>\n<p>在文件末尾加入以下内容:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root: xiamo@gmail.com</span><br></pre></td></tr></table></figure>\n<p>格式为:<font color-red><code>系统用户名: 发件邮箱地址</code></font>。注意：冒号<code>:</code>后有一个空格。</p>\n<h5 id=\"配置exim4，使其支持明文密码\"><a href=\"#配置exim4，使其支持明文密码\" class=\"headerlink\" title=\"配置exim4，使其支持明文密码\"></a>配置exim4，使其支持明文密码</h5><p>现在，我们需要对<code>/etc/exim4/exim4.conf.template</code>这个文件进行编辑，使用命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># vim /etc/exim4/exim4.conf.template</span></span><br></pre></td></tr></table></figure>\n<p>在<code>1996</code>行上一行，也就是<code>cram_md5:</code>上方（博主的文件是1996行）加入以下内容:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">AUTH_CLIENT_ALLOW_NOTLS_PASSWORDS=1</span><br></pre></td></tr></table></figure>\n<p>然后保存退出。</p>\n<p>键入以下命令重启<code>exim4</code>：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># service exim4 restart</span></span><br></pre></td></tr></table></figure></p>\n<p>至此，exim4邮件配置就完成了。是不是很简单呢~~</p>\n<h3 id=\"发送测试邮件\"><a href=\"#发送测试邮件\" class=\"headerlink\" title=\"发送测试邮件\"></a>发送测试邮件</h3><p>配置完成需要发送一封测试邮件看看服务可用不呢~，键入命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># mail wanghaokoko1994@gmail.com</span></span><br></pre></td></tr></table></figure>\n<p>其中，<a href=\"mailto:`wanghaokoko1994@gmail.com\" target=\"_blank\" rel=\"noopener\">`wanghaokoko1994@gmail.com</a><code>为你想要发送到的邮箱地址，接着按提示输入主题、邮件内容。然后再使用</code>Ctrl<code>+</code>D`组合键完成输入，即可完成发送:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mail wanghaokoko1994@gmail.com</span><br><span class=\"line\">Subject: <span class=\"built_in\">test</span> email</span><br><span class=\"line\">hello,this is a <span class=\"built_in\">test</span> email!</span><br><span class=\"line\">EOT</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"可能出现的错误\"><a href=\"#可能出现的错误\" class=\"headerlink\" title=\"可能出现的错误\"></a>可能出现的错误</h3><p>有的时候可能会遇到exim4抛出的错误，如下:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">debian ALERT: exim paniclog /var/<span class=\"built_in\">log</span>/exim4/paniclog has non-zero size, mail system possibly broken</span><br></pre></td></tr></table></figure></p>\n<p>针对这个情况，可以使用以下方法解决:</p>\n<ul>\n<li>停止<code>exim4</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service exim4 stop</span><br></pre></td></tr></table></figure>\n<ul>\n<li>删除<code>paniclog</code>文件</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm /var/<span class=\"built_in\">log</span>/exim4/paniclog</span><br></pre></td></tr></table></figure>\n<ul>\n<li>启动<code>exim4</code></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service exim4 start</span><br></pre></td></tr></table></figure>\n<p>这样，错误问题就完美解决了~</p>"},{"title":"Docker Compose：链接外部容器的几种方式","date":"2017-06-12T15:04:41.000Z","_content":"\n{% note info %}在Docker中，容器之间的链接是一种很常见的操作：它提供了访问其中的某个容器的网络服务而不需要将所需的端口暴露给Docker Host主机的功能。Docker Compose中对该特性的支持同样是很方便的。然而，如果需要链接的容器没有定义在同一个`docker-compose.yml`中的时候，这个时候就稍微麻烦复杂了点。{%endnote%}\n\n<!--more-->\n\n在不使用Docker Compose的时候，将两个容器链接起来使用`—link`参数，相对来说比较简单，以`nginx`镜像为例子：\n\n```shell\ndocker run --rm --name test1 -d nginx  #开启一个实例test1\ndocker run --rm --name test2 --link test1 -d nginx #开启一个实例test2并与test1建立链接\n```\n\n这样，`test2`与`test1`便建立了链接，就可以在`test2`中使用访问`test1`中的服务了。\n\n如果使用Docker Compose，那么这个事情就更简单了，还是以上面的`nginx`镜像为例子，编辑`docker-compose.yml`文件为：\n\n```yaml\nversion: \"3\"\nservices:\n  test2:\n    image: nginx\n    depends_on:\n      - test1\n    links:\n      - test1\n  test1:\n    image: nginx\n```\n\n最终效果与使用普通的Docker命令`docker run xxxx`建立的链接并无区别。这只是一种最为理想的情况。\n\n--------------------\n\n1. 如果容器没有定义在同一个`docker-compose.yml`文件中，应该如何链接它们呢？\n2. 又如果定义在`docker-compose.yml`文件中的容器需要与`docker run xxx`启动的容器链接，需要如何处理？\n\n针对这两种典型的情况，下面给出我个人测试可行的办法：\n\n---------------\n\n### 方式一：让需要链接的容器同属一个外部网络\n\n我们还是使用nginx镜像来模拟这样的一个情景：假设我们需要将两个使用Docker Compose管理的nignx容器（`test1`和`test2`）链接起来，使得`test2`能够访问`test1`中提供的服务，这里我们以能ping通为准。\n\n首先，我们定义容器`test1`的`docker-compose.yml`文件内容为：\n\n```Yaml\nversion: \"3\"\nservices:\n  test2:\n    image: nginx\n    container_name: test1\n    networks:\n      - default\n      - app_net\nnetworks:\n  app_net:\n    external: true\n```\n\n\n\n容器`test2`内容与`test1`基本一样，只是多了一个`external_links`,需要特别说明的是：**最近发布的Docker版本已经不需要使用external_links来链接容器，容器的DNS服务可以正确的作出判断**，因此如果你你需要兼容较老版本的Docker的话，那么容器`test2`的`docker-compose.yml`文件内容为：\n\n```yaml\nversion: \"3\"\nservices:\n  test2:\n    image: nginx\n    networks:\n      - default\n      - app_net\n    external_links:\n      - test1\n    container_name: test2\nnetworks:\n  app_net:\n    external: true\n```\n\n否则的话，`test2`的`docker-compose.yml`和`test1`的定义完全一致，不需要额外多指定一个`external_links`。相关的问题请参见stackoverflow上的相关问题：[docker-compose + external container](https://stackoverflow.com/questions/39067295/docker-compose-external-container)\n\n正如你看到的那样，这里两个容器的定义里都使用了同一个外部网络`app_net`,因此，我们需要在启动这两个容器之前通过以下命令再创建外部网络：\n\n```she\ndocker network create app_net\n```\n\n之后，通过`docker-compose up -d`命令启动这两个容器，然后执行`docker exec -it test2 ping test1`,你将会看到如下的输出：\n\n```she\ndocker exec -it test2 ping test1\nPING test1 (172.18.0.2): 56 data bytes\n64 bytes from 172.18.0.2: icmp_seq=0 ttl=64 time=0.091 ms\n64 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.146 ms\n64 bytes from 172.18.0.2: icmp_seq=2 ttl=64 time=0.150 ms\n64 bytes from 172.18.0.2: icmp_seq=3 ttl=64 time=0.145 ms\n64 bytes from 172.18.0.2: icmp_seq=4 ttl=64 time=0.126 ms\n64 bytes from 172.18.0.2: icmp_seq=5 ttl=64 time=0.147 ms\n```\n\n证明这两个容器是成功链接了，反过来在`test1`中ping`test2`也是能够正常ping通的。\n\n如果我们通过`docker run --rm --name test3 -d nginx`这种方式来先启动了一个容器(`test3`)并且没有指定它所属的外部网络，而需要将其与`test1`或者`test2`链接的话，这个时候手动链接外部网络即可：\n\n```she\ndocker network connect app_net test3\n```\n\n这样，三个容器都可以相互访问了。\n\n-------------------\n\n###  方式二：更改需要链接的容器的网络模式\n\n通过更改你想要相互链接的容器的网络模式为`bridge`,并指定需要链接的外部容器（`external_links`)即可。与同属外部网络的容器可以相互访问的链接方式一不同，这种方式的访问是单向的。\n\n还是以nginx容器镜像为例子，如果容器实例`nginx1`需要访问容器实例`nginx2`，那么`nginx2`的`doker-compose.yml`定义为：\n\n```Yaml\nversion: \"3\"\nservices:\n  nginx2:\n    image: nginx\n    container_name: nginx2\n    network_mode: bridge\n```\n\n与其对应的，`nginx1`的`docker-compose.yml`定义为：\n\n```yaml\nversion: \"3\"\nservices:\n  nginx1:\n    image: nginx\n    external_links:\n      - nginx2\n    container_name: nginx1\n    network_mode: bridge\n```\n\n\n\n> 需要特别说明的是，这里的`external_links`是不能省略的，而且`nginx1`的启动必须要在`nginx2`之后，否则可能会报找不到容器`nginx2`的错误。\n\n接着我们使用ping来测试下连通性：\n\n```she\n$ docker exec -it nginx1 ping nginx2  # nginx1 to nginx2\nPING nginx2 (172.17.0.4): 56 data bytes\n64 bytes from 172.17.0.4: icmp_seq=0 ttl=64 time=0.141 ms\n64 bytes from 172.17.0.4: icmp_seq=1 ttl=64 time=0.139 ms\n64 bytes from 172.17.0.4: icmp_seq=2 ttl=64 time=0.145 ms\n\n$ docker exec -it nginx2 ping nginx1 #nginx2 to nginx1\nping: unknown host\n```\n\n以上也能充分证明这种方式是属于单向联通的。\n\n在实际应用中根据自己的需要灵活的选择这两种链接方式，如果想偷懒的话，大可选择第二种。不过我更推荐第一种，不难看出无论是联通性还是灵活性，较为更改网络模式的第二种都更为友好。","source":"_posts/Docker-Compose-链接外部容器的几种方式.md","raw":"---\ntitle: 'Docker Compose：链接外部容器的几种方式'\ndate: 2017-06-12 23:04:41\ntags: \n - Docker\n - Docker Compose\n---\n\n{% note info %}在Docker中，容器之间的链接是一种很常见的操作：它提供了访问其中的某个容器的网络服务而不需要将所需的端口暴露给Docker Host主机的功能。Docker Compose中对该特性的支持同样是很方便的。然而，如果需要链接的容器没有定义在同一个`docker-compose.yml`中的时候，这个时候就稍微麻烦复杂了点。{%endnote%}\n\n<!--more-->\n\n在不使用Docker Compose的时候，将两个容器链接起来使用`—link`参数，相对来说比较简单，以`nginx`镜像为例子：\n\n```shell\ndocker run --rm --name test1 -d nginx  #开启一个实例test1\ndocker run --rm --name test2 --link test1 -d nginx #开启一个实例test2并与test1建立链接\n```\n\n这样，`test2`与`test1`便建立了链接，就可以在`test2`中使用访问`test1`中的服务了。\n\n如果使用Docker Compose，那么这个事情就更简单了，还是以上面的`nginx`镜像为例子，编辑`docker-compose.yml`文件为：\n\n```yaml\nversion: \"3\"\nservices:\n  test2:\n    image: nginx\n    depends_on:\n      - test1\n    links:\n      - test1\n  test1:\n    image: nginx\n```\n\n最终效果与使用普通的Docker命令`docker run xxxx`建立的链接并无区别。这只是一种最为理想的情况。\n\n--------------------\n\n1. 如果容器没有定义在同一个`docker-compose.yml`文件中，应该如何链接它们呢？\n2. 又如果定义在`docker-compose.yml`文件中的容器需要与`docker run xxx`启动的容器链接，需要如何处理？\n\n针对这两种典型的情况，下面给出我个人测试可行的办法：\n\n---------------\n\n### 方式一：让需要链接的容器同属一个外部网络\n\n我们还是使用nginx镜像来模拟这样的一个情景：假设我们需要将两个使用Docker Compose管理的nignx容器（`test1`和`test2`）链接起来，使得`test2`能够访问`test1`中提供的服务，这里我们以能ping通为准。\n\n首先，我们定义容器`test1`的`docker-compose.yml`文件内容为：\n\n```Yaml\nversion: \"3\"\nservices:\n  test2:\n    image: nginx\n    container_name: test1\n    networks:\n      - default\n      - app_net\nnetworks:\n  app_net:\n    external: true\n```\n\n\n\n容器`test2`内容与`test1`基本一样，只是多了一个`external_links`,需要特别说明的是：**最近发布的Docker版本已经不需要使用external_links来链接容器，容器的DNS服务可以正确的作出判断**，因此如果你你需要兼容较老版本的Docker的话，那么容器`test2`的`docker-compose.yml`文件内容为：\n\n```yaml\nversion: \"3\"\nservices:\n  test2:\n    image: nginx\n    networks:\n      - default\n      - app_net\n    external_links:\n      - test1\n    container_name: test2\nnetworks:\n  app_net:\n    external: true\n```\n\n否则的话，`test2`的`docker-compose.yml`和`test1`的定义完全一致，不需要额外多指定一个`external_links`。相关的问题请参见stackoverflow上的相关问题：[docker-compose + external container](https://stackoverflow.com/questions/39067295/docker-compose-external-container)\n\n正如你看到的那样，这里两个容器的定义里都使用了同一个外部网络`app_net`,因此，我们需要在启动这两个容器之前通过以下命令再创建外部网络：\n\n```she\ndocker network create app_net\n```\n\n之后，通过`docker-compose up -d`命令启动这两个容器，然后执行`docker exec -it test2 ping test1`,你将会看到如下的输出：\n\n```she\ndocker exec -it test2 ping test1\nPING test1 (172.18.0.2): 56 data bytes\n64 bytes from 172.18.0.2: icmp_seq=0 ttl=64 time=0.091 ms\n64 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.146 ms\n64 bytes from 172.18.0.2: icmp_seq=2 ttl=64 time=0.150 ms\n64 bytes from 172.18.0.2: icmp_seq=3 ttl=64 time=0.145 ms\n64 bytes from 172.18.0.2: icmp_seq=4 ttl=64 time=0.126 ms\n64 bytes from 172.18.0.2: icmp_seq=5 ttl=64 time=0.147 ms\n```\n\n证明这两个容器是成功链接了，反过来在`test1`中ping`test2`也是能够正常ping通的。\n\n如果我们通过`docker run --rm --name test3 -d nginx`这种方式来先启动了一个容器(`test3`)并且没有指定它所属的外部网络，而需要将其与`test1`或者`test2`链接的话，这个时候手动链接外部网络即可：\n\n```she\ndocker network connect app_net test3\n```\n\n这样，三个容器都可以相互访问了。\n\n-------------------\n\n###  方式二：更改需要链接的容器的网络模式\n\n通过更改你想要相互链接的容器的网络模式为`bridge`,并指定需要链接的外部容器（`external_links`)即可。与同属外部网络的容器可以相互访问的链接方式一不同，这种方式的访问是单向的。\n\n还是以nginx容器镜像为例子，如果容器实例`nginx1`需要访问容器实例`nginx2`，那么`nginx2`的`doker-compose.yml`定义为：\n\n```Yaml\nversion: \"3\"\nservices:\n  nginx2:\n    image: nginx\n    container_name: nginx2\n    network_mode: bridge\n```\n\n与其对应的，`nginx1`的`docker-compose.yml`定义为：\n\n```yaml\nversion: \"3\"\nservices:\n  nginx1:\n    image: nginx\n    external_links:\n      - nginx2\n    container_name: nginx1\n    network_mode: bridge\n```\n\n\n\n> 需要特别说明的是，这里的`external_links`是不能省略的，而且`nginx1`的启动必须要在`nginx2`之后，否则可能会报找不到容器`nginx2`的错误。\n\n接着我们使用ping来测试下连通性：\n\n```she\n$ docker exec -it nginx1 ping nginx2  # nginx1 to nginx2\nPING nginx2 (172.17.0.4): 56 data bytes\n64 bytes from 172.17.0.4: icmp_seq=0 ttl=64 time=0.141 ms\n64 bytes from 172.17.0.4: icmp_seq=1 ttl=64 time=0.139 ms\n64 bytes from 172.17.0.4: icmp_seq=2 ttl=64 time=0.145 ms\n\n$ docker exec -it nginx2 ping nginx1 #nginx2 to nginx1\nping: unknown host\n```\n\n以上也能充分证明这种方式是属于单向联通的。\n\n在实际应用中根据自己的需要灵活的选择这两种链接方式，如果想偷懒的话，大可选择第二种。不过我更推荐第一种，不难看出无论是联通性还是灵活性，较为更改网络模式的第二种都更为友好。","slug":"Docker-Compose-链接外部容器的几种方式","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb8x000m2ev2q6cu512x","content":"<div class=\"note info\"><p>在Docker中，容器之间的链接是一种很常见的操作：它提供了访问其中的某个容器的网络服务而不需要将所需的端口暴露给Docker Host主机的功能。Docker Compose中对该特性的支持同样是很方便的。然而，如果需要链接的容器没有定义在同一个<code>docker-compose.yml</code>中的时候，这个时候就稍微麻烦复杂了点。</p></div>\n<a id=\"more\"></a>\n<p>在不使用Docker Compose的时候，将两个容器链接起来使用<code>—link</code>参数，相对来说比较简单，以<code>nginx</code>镜像为例子：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --rm --name test1 -d nginx  #开启一个实例test1</span><br><span class=\"line\">docker run --rm --name test2 --link test1 -d nginx #开启一个实例test2并与test1建立链接</span><br></pre></td></tr></table></figure>\n<p>这样，<code>test2</code>与<code>test1</code>便建立了链接，就可以在<code>test2</code>中使用访问<code>test1</code>中的服务了。</p>\n<p>如果使用Docker Compose，那么这个事情就更简单了，还是以上面的<code>nginx</code>镜像为例子，编辑<code>docker-compose.yml</code>文件为：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  test2:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">    depends_on:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">test1</span></span><br><span class=\"line\"><span class=\"attr\">    links:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">test1</span></span><br><span class=\"line\"><span class=\"attr\">  test1:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">nginx</span></span><br></pre></td></tr></table></figure>\n<p>最终效果与使用普通的Docker命令<code>docker run xxxx</code>建立的链接并无区别。这只是一种最为理想的情况。</p>\n<hr>\n<ol>\n<li>如果容器没有定义在同一个<code>docker-compose.yml</code>文件中，应该如何链接它们呢？</li>\n<li>又如果定义在<code>docker-compose.yml</code>文件中的容器需要与<code>docker run xxx</code>启动的容器链接，需要如何处理？</li>\n</ol>\n<p>针对这两种典型的情况，下面给出我个人测试可行的办法：</p>\n<hr>\n<h3 id=\"方式一：让需要链接的容器同属一个外部网络\"><a href=\"#方式一：让需要链接的容器同属一个外部网络\" class=\"headerlink\" title=\"方式一：让需要链接的容器同属一个外部网络\"></a>方式一：让需要链接的容器同属一个外部网络</h3><p>我们还是使用nginx镜像来模拟这样的一个情景：假设我们需要将两个使用Docker Compose管理的nignx容器（<code>test1</code>和<code>test2</code>）链接起来，使得<code>test2</code>能够访问<code>test1</code>中提供的服务，这里我们以能ping通为准。</p>\n<p>首先，我们定义容器<code>test1</code>的<code>docker-compose.yml</code>文件内容为：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  test2:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">test1</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">app_net</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\"><span class=\"attr\">  app_net:</span></span><br><span class=\"line\"><span class=\"attr\">    external:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>容器<code>test2</code>内容与<code>test1</code>基本一样，只是多了一个<code>external_links</code>,需要特别说明的是：<strong>最近发布的Docker版本已经不需要使用external_links来链接容器，容器的DNS服务可以正确的作出判断</strong>，因此如果你你需要兼容较老版本的Docker的话，那么容器<code>test2</code>的<code>docker-compose.yml</code>文件内容为：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  test2:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">app_net</span></span><br><span class=\"line\"><span class=\"attr\">    external_links:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">test1</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">test2</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\"><span class=\"attr\">  app_net:</span></span><br><span class=\"line\"><span class=\"attr\">    external:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>否则的话，<code>test2</code>的<code>docker-compose.yml</code>和<code>test1</code>的定义完全一致，不需要额外多指定一个<code>external_links</code>。相关的问题请参见stackoverflow上的相关问题：<a href=\"https://stackoverflow.com/questions/39067295/docker-compose-external-container\" target=\"_blank\" rel=\"noopener\">docker-compose + external container</a></p>\n<p>正如你看到的那样，这里两个容器的定义里都使用了同一个外部网络<code>app_net</code>,因此，我们需要在启动这两个容器之前通过以下命令再创建外部网络：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network create app_net</span><br></pre></td></tr></table></figure>\n<p>之后，通过<code>docker-compose up -d</code>命令启动这两个容器，然后执行<code>docker exec -it test2 ping test1</code>,你将会看到如下的输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it test2 ping test1</span><br><span class=\"line\">PING test1 (172.18.0.2): 56 data bytes</span><br><span class=\"line\">64 bytes from 172.18.0.2: icmp_seq=0 ttl=64 time=0.091 ms</span><br><span class=\"line\">64 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.146 ms</span><br><span class=\"line\">64 bytes from 172.18.0.2: icmp_seq=2 ttl=64 time=0.150 ms</span><br><span class=\"line\">64 bytes from 172.18.0.2: icmp_seq=3 ttl=64 time=0.145 ms</span><br><span class=\"line\">64 bytes from 172.18.0.2: icmp_seq=4 ttl=64 time=0.126 ms</span><br><span class=\"line\">64 bytes from 172.18.0.2: icmp_seq=5 ttl=64 time=0.147 ms</span><br></pre></td></tr></table></figure>\n<p>证明这两个容器是成功链接了，反过来在<code>test1</code>中ping<code>test2</code>也是能够正常ping通的。</p>\n<p>如果我们通过<code>docker run --rm --name test3 -d nginx</code>这种方式来先启动了一个容器(<code>test3</code>)并且没有指定它所属的外部网络，而需要将其与<code>test1</code>或者<code>test2</code>链接的话，这个时候手动链接外部网络即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network connect app_net test3</span><br></pre></td></tr></table></figure>\n<p>这样，三个容器都可以相互访问了。</p>\n<hr>\n<h3 id=\"方式二：更改需要链接的容器的网络模式\"><a href=\"#方式二：更改需要链接的容器的网络模式\" class=\"headerlink\" title=\"方式二：更改需要链接的容器的网络模式\"></a>方式二：更改需要链接的容器的网络模式</h3><p>通过更改你想要相互链接的容器的网络模式为<code>bridge</code>,并指定需要链接的外部容器（<code>external_links</code>)即可。与同属外部网络的容器可以相互访问的链接方式一不同，这种方式的访问是单向的。</p>\n<p>还是以nginx容器镜像为例子，如果容器实例<code>nginx1</code>需要访问容器实例<code>nginx2</code>，那么<code>nginx2</code>的<code>doker-compose.yml</code>定义为：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  nginx2:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">nginx2</span></span><br><span class=\"line\"><span class=\"attr\">    network_mode:</span> <span class=\"string\">bridge</span></span><br></pre></td></tr></table></figure>\n<p>与其对应的，<code>nginx1</code>的<code>docker-compose.yml</code>定义为：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  nginx1:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">    external_links:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">nginx2</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">nginx1</span></span><br><span class=\"line\"><span class=\"attr\">    network_mode:</span> <span class=\"string\">bridge</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>需要特别说明的是，这里的<code>external_links</code>是不能省略的，而且<code>nginx1</code>的启动必须要在<code>nginx2</code>之后，否则可能会报找不到容器<code>nginx2</code>的错误。</p>\n</blockquote>\n<p>接着我们使用ping来测试下连通性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker exec -it nginx1 ping nginx2  # nginx1 to nginx2</span><br><span class=\"line\">PING nginx2 (172.17.0.4): 56 data bytes</span><br><span class=\"line\">64 bytes from 172.17.0.4: icmp_seq=0 ttl=64 time=0.141 ms</span><br><span class=\"line\">64 bytes from 172.17.0.4: icmp_seq=1 ttl=64 time=0.139 ms</span><br><span class=\"line\">64 bytes from 172.17.0.4: icmp_seq=2 ttl=64 time=0.145 ms</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker exec -it nginx2 ping nginx1 #nginx2 to nginx1</span><br><span class=\"line\">ping: unknown host</span><br></pre></td></tr></table></figure>\n<p>以上也能充分证明这种方式是属于单向联通的。</p>\n<p>在实际应用中根据自己的需要灵活的选择这两种链接方式，如果想偷懒的话，大可选择第二种。不过我更推荐第一种，不难看出无论是联通性还是灵活性，较为更改网络模式的第二种都更为友好。</p>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>在Docker中，容器之间的链接是一种很常见的操作：它提供了访问其中的某个容器的网络服务而不需要将所需的端口暴露给Docker Host主机的功能。Docker Compose中对该特性的支持同样是很方便的。然而，如果需要链接的容器没有定义在同一个<code>docker-compose.yml</code>中的时候，这个时候就稍微麻烦复杂了点。</p></div>","more":"<p>在不使用Docker Compose的时候，将两个容器链接起来使用<code>—link</code>参数，相对来说比较简单，以<code>nginx</code>镜像为例子：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run --rm --name test1 -d nginx  #开启一个实例test1</span><br><span class=\"line\">docker run --rm --name test2 --link test1 -d nginx #开启一个实例test2并与test1建立链接</span><br></pre></td></tr></table></figure>\n<p>这样，<code>test2</code>与<code>test1</code>便建立了链接，就可以在<code>test2</code>中使用访问<code>test1</code>中的服务了。</p>\n<p>如果使用Docker Compose，那么这个事情就更简单了，还是以上面的<code>nginx</code>镜像为例子，编辑<code>docker-compose.yml</code>文件为：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  test2:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">    depends_on:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">test1</span></span><br><span class=\"line\"><span class=\"attr\">    links:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">test1</span></span><br><span class=\"line\"><span class=\"attr\">  test1:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">nginx</span></span><br></pre></td></tr></table></figure>\n<p>最终效果与使用普通的Docker命令<code>docker run xxxx</code>建立的链接并无区别。这只是一种最为理想的情况。</p>\n<hr>\n<ol>\n<li>如果容器没有定义在同一个<code>docker-compose.yml</code>文件中，应该如何链接它们呢？</li>\n<li>又如果定义在<code>docker-compose.yml</code>文件中的容器需要与<code>docker run xxx</code>启动的容器链接，需要如何处理？</li>\n</ol>\n<p>针对这两种典型的情况，下面给出我个人测试可行的办法：</p>\n<hr>\n<h3 id=\"方式一：让需要链接的容器同属一个外部网络\"><a href=\"#方式一：让需要链接的容器同属一个外部网络\" class=\"headerlink\" title=\"方式一：让需要链接的容器同属一个外部网络\"></a>方式一：让需要链接的容器同属一个外部网络</h3><p>我们还是使用nginx镜像来模拟这样的一个情景：假设我们需要将两个使用Docker Compose管理的nignx容器（<code>test1</code>和<code>test2</code>）链接起来，使得<code>test2</code>能够访问<code>test1</code>中提供的服务，这里我们以能ping通为准。</p>\n<p>首先，我们定义容器<code>test1</code>的<code>docker-compose.yml</code>文件内容为：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  test2:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">test1</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">app_net</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\"><span class=\"attr\">  app_net:</span></span><br><span class=\"line\"><span class=\"attr\">    external:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>容器<code>test2</code>内容与<code>test1</code>基本一样，只是多了一个<code>external_links</code>,需要特别说明的是：<strong>最近发布的Docker版本已经不需要使用external_links来链接容器，容器的DNS服务可以正确的作出判断</strong>，因此如果你你需要兼容较老版本的Docker的话，那么容器<code>test2</code>的<code>docker-compose.yml</code>文件内容为：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  test2:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">    networks:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">default</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">app_net</span></span><br><span class=\"line\"><span class=\"attr\">    external_links:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">test1</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">test2</span></span><br><span class=\"line\"><span class=\"attr\">networks:</span></span><br><span class=\"line\"><span class=\"attr\">  app_net:</span></span><br><span class=\"line\"><span class=\"attr\">    external:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>否则的话，<code>test2</code>的<code>docker-compose.yml</code>和<code>test1</code>的定义完全一致，不需要额外多指定一个<code>external_links</code>。相关的问题请参见stackoverflow上的相关问题：<a href=\"https://stackoverflow.com/questions/39067295/docker-compose-external-container\" target=\"_blank\" rel=\"noopener\">docker-compose + external container</a></p>\n<p>正如你看到的那样，这里两个容器的定义里都使用了同一个外部网络<code>app_net</code>,因此，我们需要在启动这两个容器之前通过以下命令再创建外部网络：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network create app_net</span><br></pre></td></tr></table></figure>\n<p>之后，通过<code>docker-compose up -d</code>命令启动这两个容器，然后执行<code>docker exec -it test2 ping test1</code>,你将会看到如下的输出：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker exec -it test2 ping test1</span><br><span class=\"line\">PING test1 (172.18.0.2): 56 data bytes</span><br><span class=\"line\">64 bytes from 172.18.0.2: icmp_seq=0 ttl=64 time=0.091 ms</span><br><span class=\"line\">64 bytes from 172.18.0.2: icmp_seq=1 ttl=64 time=0.146 ms</span><br><span class=\"line\">64 bytes from 172.18.0.2: icmp_seq=2 ttl=64 time=0.150 ms</span><br><span class=\"line\">64 bytes from 172.18.0.2: icmp_seq=3 ttl=64 time=0.145 ms</span><br><span class=\"line\">64 bytes from 172.18.0.2: icmp_seq=4 ttl=64 time=0.126 ms</span><br><span class=\"line\">64 bytes from 172.18.0.2: icmp_seq=5 ttl=64 time=0.147 ms</span><br></pre></td></tr></table></figure>\n<p>证明这两个容器是成功链接了，反过来在<code>test1</code>中ping<code>test2</code>也是能够正常ping通的。</p>\n<p>如果我们通过<code>docker run --rm --name test3 -d nginx</code>这种方式来先启动了一个容器(<code>test3</code>)并且没有指定它所属的外部网络，而需要将其与<code>test1</code>或者<code>test2</code>链接的话，这个时候手动链接外部网络即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker network connect app_net test3</span><br></pre></td></tr></table></figure>\n<p>这样，三个容器都可以相互访问了。</p>\n<hr>\n<h3 id=\"方式二：更改需要链接的容器的网络模式\"><a href=\"#方式二：更改需要链接的容器的网络模式\" class=\"headerlink\" title=\"方式二：更改需要链接的容器的网络模式\"></a>方式二：更改需要链接的容器的网络模式</h3><p>通过更改你想要相互链接的容器的网络模式为<code>bridge</code>,并指定需要链接的外部容器（<code>external_links</code>)即可。与同属外部网络的容器可以相互访问的链接方式一不同，这种方式的访问是单向的。</p>\n<p>还是以nginx容器镜像为例子，如果容器实例<code>nginx1</code>需要访问容器实例<code>nginx2</code>，那么<code>nginx2</code>的<code>doker-compose.yml</code>定义为：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  nginx2:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">nginx2</span></span><br><span class=\"line\"><span class=\"attr\">    network_mode:</span> <span class=\"string\">bridge</span></span><br></pre></td></tr></table></figure>\n<p>与其对应的，<code>nginx1</code>的<code>docker-compose.yml</code>定义为：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">\"3\"</span></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"><span class=\"attr\">  nginx1:</span></span><br><span class=\"line\"><span class=\"attr\">    image:</span> <span class=\"string\">nginx</span></span><br><span class=\"line\"><span class=\"attr\">    external_links:</span></span><br><span class=\"line\"><span class=\"bullet\">      -</span> <span class=\"string\">nginx2</span></span><br><span class=\"line\"><span class=\"attr\">    container_name:</span> <span class=\"string\">nginx1</span></span><br><span class=\"line\"><span class=\"attr\">    network_mode:</span> <span class=\"string\">bridge</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>需要特别说明的是，这里的<code>external_links</code>是不能省略的，而且<code>nginx1</code>的启动必须要在<code>nginx2</code>之后，否则可能会报找不到容器<code>nginx2</code>的错误。</p>\n</blockquote>\n<p>接着我们使用ping来测试下连通性：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker exec -it nginx1 ping nginx2  # nginx1 to nginx2</span><br><span class=\"line\">PING nginx2 (172.17.0.4): 56 data bytes</span><br><span class=\"line\">64 bytes from 172.17.0.4: icmp_seq=0 ttl=64 time=0.141 ms</span><br><span class=\"line\">64 bytes from 172.17.0.4: icmp_seq=1 ttl=64 time=0.139 ms</span><br><span class=\"line\">64 bytes from 172.17.0.4: icmp_seq=2 ttl=64 time=0.145 ms</span><br><span class=\"line\"></span><br><span class=\"line\">$ docker exec -it nginx2 ping nginx1 #nginx2 to nginx1</span><br><span class=\"line\">ping: unknown host</span><br></pre></td></tr></table></figure>\n<p>以上也能充分证明这种方式是属于单向联通的。</p>\n<p>在实际应用中根据自己的需要灵活的选择这两种链接方式，如果想偷懒的话，大可选择第二种。不过我更推荐第一种，不难看出无论是联通性还是灵活性，较为更改网络模式的第二种都更为友好。</p>"},{"title":"Docker非Root运行","date":"2017-07-11T02:56:01.000Z","_content":"\n\n{% note info %}Docker Engine的Deamon进程是以root权限运行的，如果是普通用户要与之交互，需要使用`sudo`命令来提权与之交互。之前使用Docker官方的安装脚本安装完成之后，会给出一个提示将当前非root用户添加到doker组之中，以避免每次都需要输入`sudo`的麻烦。{%endnote%}\n\n然而随着Docker版本的迭代和官网的安装方式的更改，现在官方给出的安装方式是添加仓库源地址，然后使用默认的`apt`或者`yum`包管理工具来完成后安装。并不再提示用户添加非root用户到组。\n\n\n默认情况下，完成Docker Engine的安装之后，Docker将会自动创建一个名为`docker`的用户组，所以`root`用户和在`docker`组中的用户都可以免去`sudo`来与Docker Engine交互。知道原理之后就简单了：\n\n```shell\nsudo usermod -aG docker ${whoami} #添加当前用户到docker组\n```\n\n","source":"_posts/Docker非Root用户运行.md","raw":"---\ntitle: Docker非Root运行\ntags:\n  - Docker\ndate: 2017-07-11 10:56:01\n---\n\n\n{% note info %}Docker Engine的Deamon进程是以root权限运行的，如果是普通用户要与之交互，需要使用`sudo`命令来提权与之交互。之前使用Docker官方的安装脚本安装完成之后，会给出一个提示将当前非root用户添加到doker组之中，以避免每次都需要输入`sudo`的麻烦。{%endnote%}\n\n然而随着Docker版本的迭代和官网的安装方式的更改，现在官方给出的安装方式是添加仓库源地址，然后使用默认的`apt`或者`yum`包管理工具来完成后安装。并不再提示用户添加非root用户到组。\n\n\n默认情况下，完成Docker Engine的安装之后，Docker将会自动创建一个名为`docker`的用户组，所以`root`用户和在`docker`组中的用户都可以免去`sudo`来与Docker Engine交互。知道原理之后就简单了：\n\n```shell\nsudo usermod -aG docker ${whoami} #添加当前用户到docker组\n```\n\n","slug":"Docker非Root用户运行","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb8z000o2ev21pxbbmwx","content":"<div class=\"note info\"><p>Docker Engine的Deamon进程是以root权限运行的，如果是普通用户要与之交互，需要使用<code>sudo</code>命令来提权与之交互。之前使用Docker官方的安装脚本安装完成之后，会给出一个提示将当前非root用户添加到doker组之中，以避免每次都需要输入<code>sudo</code>的麻烦。</p></div>\n<p>然而随着Docker版本的迭代和官网的安装方式的更改，现在官方给出的安装方式是添加仓库源地址，然后使用默认的<code>apt</code>或者<code>yum</code>包管理工具来完成后安装。并不再提示用户添加非root用户到组。</p>\n<p>默认情况下，完成Docker Engine的安装之后，Docker将会自动创建一个名为<code>docker</code>的用户组，所以<code>root</code>用户和在<code>docker</code>组中的用户都可以免去<code>sudo</code>来与Docker Engine交互。知道原理之后就简单了：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod -aG docker $&#123;whoami&#125; #添加当前用户到docker组</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<div class=\"note info\"><p>Docker Engine的Deamon进程是以root权限运行的，如果是普通用户要与之交互，需要使用<code>sudo</code>命令来提权与之交互。之前使用Docker官方的安装脚本安装完成之后，会给出一个提示将当前非root用户添加到doker组之中，以避免每次都需要输入<code>sudo</code>的麻烦。</p></div>\n<p>然而随着Docker版本的迭代和官网的安装方式的更改，现在官方给出的安装方式是添加仓库源地址，然后使用默认的<code>apt</code>或者<code>yum</code>包管理工具来完成后安装。并不再提示用户添加非root用户到组。</p>\n<p>默认情况下，完成Docker Engine的安装之后，Docker将会自动创建一个名为<code>docker</code>的用户组，所以<code>root</code>用户和在<code>docker</code>组中的用户都可以免去<code>sudo</code>来与Docker Engine交互。知道原理之后就简单了：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod -aG docker $&#123;whoami&#125; #添加当前用户到docker组</span><br></pre></td></tr></table></figure>\n"},{"title":"EditPlus Licenses在线生成器","date":"2015-07-02T11:22:03.000Z","isupdate":true,"updatetime":"2015-07-20T16:00:00.000Z","_content":"\nEditPlus是一款博主非常喜欢的文本编辑器，相比notepad++以及EverEdit有着轻便小巧迅速的优点。\n\n\n\n## 简介\n\n以下是来自维基百科简介：\n\n>EditPlus是Windows下的一个文本编辑器。支持语法高亮，自动完成等功能。对HTML文件编辑特别方便。可通过FTP远程编辑。EditPlus由韩国人Kim Sang-il（김상일）开发。\n\n\n<!--more-->\n\n## 下载\n\n下面博主为懒人给出EditPuls下载链接吧：\n\n- [EditPlus官网](https://www.editplus.com/)\n- [EditPlus官方认可的汉化补丁](http://www.cnblogs.com/hanzisearcher/)\n\n下载安装之后，首次运行会需要输入激活码，在下面的输入框中输入用户名，点击`生成`生成激活码，将用户名和激活码对应输入注册即可了~\n\n\n<script src=\"/js/editplusgenkey.js\"></script>\n<center>\n <span>用户名:</span>\n <input type=\"text\" id=\"username\" size=\"20\" placeholder=\"请在此处输入您的用户名\" />\n\n <span>注册码:</span>\n <input type=\"text\" size=\"20\" readonly=\"true\" name=\"regcode\" id=\"regcode\" placeholder=\"请粘贴此处的注册码\"/></p>\n <input type=\"submit\" value=\"猛击我生成激活码\" onclick=\"generateEditplusLicence()\"/>\n </center>\n\nEnjoy it！","source":"_posts/EditPlus-Licenses在线生成器.md","raw":"title: EditPlus Licenses在线生成器\ndate: 2015-07-02 19:22:03\nisupdate: true\nupdatetime: 2015-07-21\ntags: 激活\ncategories: 折腾\n\n---\n\nEditPlus是一款博主非常喜欢的文本编辑器，相比notepad++以及EverEdit有着轻便小巧迅速的优点。\n\n\n\n## 简介\n\n以下是来自维基百科简介：\n\n>EditPlus是Windows下的一个文本编辑器。支持语法高亮，自动完成等功能。对HTML文件编辑特别方便。可通过FTP远程编辑。EditPlus由韩国人Kim Sang-il（김상일）开发。\n\n\n<!--more-->\n\n## 下载\n\n下面博主为懒人给出EditPuls下载链接吧：\n\n- [EditPlus官网](https://www.editplus.com/)\n- [EditPlus官方认可的汉化补丁](http://www.cnblogs.com/hanzisearcher/)\n\n下载安装之后，首次运行会需要输入激活码，在下面的输入框中输入用户名，点击`生成`生成激活码，将用户名和激活码对应输入注册即可了~\n\n\n<script src=\"/js/editplusgenkey.js\"></script>\n<center>\n <span>用户名:</span>\n <input type=\"text\" id=\"username\" size=\"20\" placeholder=\"请在此处输入您的用户名\" />\n\n <span>注册码:</span>\n <input type=\"text\" size=\"20\" readonly=\"true\" name=\"regcode\" id=\"regcode\" placeholder=\"请粘贴此处的注册码\"/></p>\n <input type=\"submit\" value=\"猛击我生成激活码\" onclick=\"generateEditplusLicence()\"/>\n </center>\n\nEnjoy it！","slug":"EditPlus-Licenses在线生成器","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb91000q2ev2nvajs7lf","content":"<p>EditPlus是一款博主非常喜欢的文本编辑器，相比notepad++以及EverEdit有着轻便小巧迅速的优点。</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>以下是来自维基百科简介：</p>\n<blockquote>\n<p>EditPlus是Windows下的一个文本编辑器。支持语法高亮，自动完成等功能。对HTML文件编辑特别方便。可通过FTP远程编辑。EditPlus由韩国人Kim Sang-il（김상일）开发。</p>\n</blockquote>\n<a id=\"more\"></a>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>下面博主为懒人给出EditPuls下载链接吧：</p>\n<ul>\n<li><a href=\"https://www.editplus.com/\" target=\"_blank\" rel=\"noopener\">EditPlus官网</a></li>\n<li><a href=\"http://www.cnblogs.com/hanzisearcher/\" target=\"_blank\" rel=\"noopener\">EditPlus官方认可的汉化补丁</a></li>\n</ul>\n<p>下载安装之后，首次运行会需要输入激活码，在下面的输入框中输入用户名，点击<code>生成</code>生成激活码，将用户名和激活码对应输入注册即可了~</p>\n<p><script src=\"/js/editplusgenkey.js\"></script></p>\n<center><br> <span>用户名:</span><br> <input type=\"text\" id=\"username\" size=\"20\" placeholder=\"请在此处输入您的用户名\"><br><br> <span>注册码:</span><br> <input type=\"text\" size=\"20\" readonly=\"true\" name=\"regcode\" id=\"regcode\" placeholder=\"请粘贴此处的注册码\"><p></p><br> <input type=\"submit\" value=\"猛击我生成激活码\" onclick=\"generateEditplusLicence()\"><br> </center>\n\n<p>Enjoy it！</p>\n","site":{"data":{}},"excerpt":"<p>EditPlus是一款博主非常喜欢的文本编辑器，相比notepad++以及EverEdit有着轻便小巧迅速的优点。</p>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>以下是来自维基百科简介：</p>\n<blockquote>\n<p>EditPlus是Windows下的一个文本编辑器。支持语法高亮，自动完成等功能。对HTML文件编辑特别方便。可通过FTP远程编辑。EditPlus由韩国人Kim Sang-il（김상일）开发。</p>\n</blockquote>","more":"<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><p>下面博主为懒人给出EditPuls下载链接吧：</p>\n<ul>\n<li><a href=\"https://www.editplus.com/\" target=\"_blank\" rel=\"noopener\">EditPlus官网</a></li>\n<li><a href=\"http://www.cnblogs.com/hanzisearcher/\" target=\"_blank\" rel=\"noopener\">EditPlus官方认可的汉化补丁</a></li>\n</ul>\n<p>下载安装之后，首次运行会需要输入激活码，在下面的输入框中输入用户名，点击<code>生成</code>生成激活码，将用户名和激活码对应输入注册即可了~</p>\n<p><script src=\"/js/editplusgenkey.js\"></script></p>\n<center><br> <span>用户名:</span><br> <input type=\"text\" id=\"username\" size=\"20\" placeholder=\"请在此处输入您的用户名\"><br><br> <span>注册码:</span><br> <input type=\"text\" size=\"20\" readonly=\"true\" name=\"regcode\" id=\"regcode\" placeholder=\"请粘贴此处的注册码\"><p></p><br> <input type=\"submit\" value=\"猛击我生成激活码\" onclick=\"generateEditplusLicence()\"><br> </center>\n\n<p>Enjoy it！</p>"},{"title":"FFmpeg折腾笔记之编译FFmpeg","date":"2017-01-13T13:58:04.000Z","_content":"\n​        又有很久没有写新的文章了，感觉再不写点什么东西博客草都长满了。于是打算折腾下FFmpeg，记录下折腾的过程，以熟悉Android NDK开发的基本操作。过程中有地方有错误欢迎指出，如果你对这个方面有所了解，欢迎讨论指教。\n\n#### 编译环境\n\n- [FFmpeg 2.8.11 \"Feynman\"](https://ffmpeg.org/releases/ffmpeg-2.8.11.tar.bz2)\n- Mac OS X \n- NDK  `14.0.3770861`\n\n\n\n下载完成FFmpeg源码之后，先对源码根目录中的`configure`文件进行修改以适应Android平台。因为默认编译出来的动态库文件版本号在`.so`之后，例如：`libavcodec.so.56.60.100`。Android平台对这种格式不能很好的识别（如果你不介意一个一个修改文件名的话）。通过`Vim`或者其他文本编辑器打开`configure`文件的第`2934`行（如果你下载的FFmpeg版本和我的一样的话）将:\n\n\n\n```shell\nSLIBNAME_WITH_MAJOR='$(SLIBNAME).$(LIBMAJOR)'\nLIB_INSTALL_EXTRA_CMD='$$(RANLIB) \"$(LIBDIR)/$(LIBNAME)\"'\nSLIB_INSTALL_NAME='$(SLIBNAME_WITH_VERSION)'\nSLIB_INSTALL_LINKS='$(SLIBNAME_WITH_MAJOR) $(SLIBNAME)'\n```\n\n\n\n修改为:\n\n```shell\nSLIBNAME_WITH_MAJOR='$(SLIBPREF)$(FULLNAME)-$(LIBMAJOR)$(SLIBSUF)'  \nLIB_INSTALL_EXTRA_CMD='$$(RANLIB)\"$(LIBDIR)/$(LIBNAME)\"'  \nSLIB_INSTALL_NAME='$(SLIBNAME_WITH_MAJOR)'  \nSLIB_INSTALL_LINKS='$(SLIBNAME)'\n```\n\n后保存。","source":"_posts/FFmpeg折腾笔记之编译FFmpeg.md","raw":"---\ntitle: FFmpeg折腾笔记之编译FFmpeg\ndate: 2017-01-13 21:58:04\ntags: \n     - FFmpeg\n     - NDK\n     - Android\n---\n\n​        又有很久没有写新的文章了，感觉再不写点什么东西博客草都长满了。于是打算折腾下FFmpeg，记录下折腾的过程，以熟悉Android NDK开发的基本操作。过程中有地方有错误欢迎指出，如果你对这个方面有所了解，欢迎讨论指教。\n\n#### 编译环境\n\n- [FFmpeg 2.8.11 \"Feynman\"](https://ffmpeg.org/releases/ffmpeg-2.8.11.tar.bz2)\n- Mac OS X \n- NDK  `14.0.3770861`\n\n\n\n下载完成FFmpeg源码之后，先对源码根目录中的`configure`文件进行修改以适应Android平台。因为默认编译出来的动态库文件版本号在`.so`之后，例如：`libavcodec.so.56.60.100`。Android平台对这种格式不能很好的识别（如果你不介意一个一个修改文件名的话）。通过`Vim`或者其他文本编辑器打开`configure`文件的第`2934`行（如果你下载的FFmpeg版本和我的一样的话）将:\n\n\n\n```shell\nSLIBNAME_WITH_MAJOR='$(SLIBNAME).$(LIBMAJOR)'\nLIB_INSTALL_EXTRA_CMD='$$(RANLIB) \"$(LIBDIR)/$(LIBNAME)\"'\nSLIB_INSTALL_NAME='$(SLIBNAME_WITH_VERSION)'\nSLIB_INSTALL_LINKS='$(SLIBNAME_WITH_MAJOR) $(SLIBNAME)'\n```\n\n\n\n修改为:\n\n```shell\nSLIBNAME_WITH_MAJOR='$(SLIBPREF)$(FULLNAME)-$(LIBMAJOR)$(SLIBSUF)'  \nLIB_INSTALL_EXTRA_CMD='$$(RANLIB)\"$(LIBDIR)/$(LIBNAME)\"'  \nSLIB_INSTALL_NAME='$(SLIBNAME_WITH_MAJOR)'  \nSLIB_INSTALL_LINKS='$(SLIBNAME)'\n```\n\n后保存。","slug":"FFmpeg折腾笔记之编译FFmpeg","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb93000s2ev2g4ab8b3r","content":"<p>​        又有很久没有写新的文章了，感觉再不写点什么东西博客草都长满了。于是打算折腾下FFmpeg，记录下折腾的过程，以熟悉Android NDK开发的基本操作。过程中有地方有错误欢迎指出，如果你对这个方面有所了解，欢迎讨论指教。</p>\n<h4 id=\"编译环境\"><a href=\"#编译环境\" class=\"headerlink\" title=\"编译环境\"></a>编译环境</h4><ul>\n<li><a href=\"https://ffmpeg.org/releases/ffmpeg-2.8.11.tar.bz2\" target=\"_blank\" rel=\"noopener\">FFmpeg 2.8.11 “Feynman”</a></li>\n<li>Mac OS X </li>\n<li>NDK  <code>14.0.3770861</code></li>\n</ul>\n<p>下载完成FFmpeg源码之后，先对源码根目录中的<code>configure</code>文件进行修改以适应Android平台。因为默认编译出来的动态库文件版本号在<code>.so</code>之后，例如：<code>libavcodec.so.56.60.100</code>。Android平台对这种格式不能很好的识别（如果你不介意一个一个修改文件名的话）。通过<code>Vim</code>或者其他文本编辑器打开<code>configure</code>文件的第<code>2934</code>行（如果你下载的FFmpeg版本和我的一样的话）将:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SLIBNAME_WITH_MAJOR='$(SLIBNAME).$(LIBMAJOR)'</span><br><span class=\"line\">LIB_INSTALL_EXTRA_CMD='$$(RANLIB) \"$(LIBDIR)/$(LIBNAME)\"'</span><br><span class=\"line\">SLIB_INSTALL_NAME='$(SLIBNAME_WITH_VERSION)'</span><br><span class=\"line\">SLIB_INSTALL_LINKS='$(SLIBNAME_WITH_MAJOR) $(SLIBNAME)'</span><br></pre></td></tr></table></figure>\n<p>修改为:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SLIBNAME_WITH_MAJOR='$(SLIBPREF)$(FULLNAME)-$(LIBMAJOR)$(SLIBSUF)'  </span><br><span class=\"line\">LIB_INSTALL_EXTRA_CMD='$$(RANLIB)\"$(LIBDIR)/$(LIBNAME)\"'  </span><br><span class=\"line\">SLIB_INSTALL_NAME='$(SLIBNAME_WITH_MAJOR)'  </span><br><span class=\"line\">SLIB_INSTALL_LINKS='$(SLIBNAME)'</span><br></pre></td></tr></table></figure>\n<p>后保存。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>​        又有很久没有写新的文章了，感觉再不写点什么东西博客草都长满了。于是打算折腾下FFmpeg，记录下折腾的过程，以熟悉Android NDK开发的基本操作。过程中有地方有错误欢迎指出，如果你对这个方面有所了解，欢迎讨论指教。</p>\n<h4 id=\"编译环境\"><a href=\"#编译环境\" class=\"headerlink\" title=\"编译环境\"></a>编译环境</h4><ul>\n<li><a href=\"https://ffmpeg.org/releases/ffmpeg-2.8.11.tar.bz2\" target=\"_blank\" rel=\"noopener\">FFmpeg 2.8.11 “Feynman”</a></li>\n<li>Mac OS X </li>\n<li>NDK  <code>14.0.3770861</code></li>\n</ul>\n<p>下载完成FFmpeg源码之后，先对源码根目录中的<code>configure</code>文件进行修改以适应Android平台。因为默认编译出来的动态库文件版本号在<code>.so</code>之后，例如：<code>libavcodec.so.56.60.100</code>。Android平台对这种格式不能很好的识别（如果你不介意一个一个修改文件名的话）。通过<code>Vim</code>或者其他文本编辑器打开<code>configure</code>文件的第<code>2934</code>行（如果你下载的FFmpeg版本和我的一样的话）将:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SLIBNAME_WITH_MAJOR='$(SLIBNAME).$(LIBMAJOR)'</span><br><span class=\"line\">LIB_INSTALL_EXTRA_CMD='$$(RANLIB) \"$(LIBDIR)/$(LIBNAME)\"'</span><br><span class=\"line\">SLIB_INSTALL_NAME='$(SLIBNAME_WITH_VERSION)'</span><br><span class=\"line\">SLIB_INSTALL_LINKS='$(SLIBNAME_WITH_MAJOR) $(SLIBNAME)'</span><br></pre></td></tr></table></figure>\n<p>修改为:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SLIBNAME_WITH_MAJOR='$(SLIBPREF)$(FULLNAME)-$(LIBMAJOR)$(SLIBSUF)'  </span><br><span class=\"line\">LIB_INSTALL_EXTRA_CMD='$$(RANLIB)\"$(LIBDIR)/$(LIBNAME)\"'  </span><br><span class=\"line\">SLIB_INSTALL_NAME='$(SLIBNAME_WITH_MAJOR)'  </span><br><span class=\"line\">SLIB_INSTALL_LINKS='$(SLIBNAME)'</span><br></pre></td></tr></table></figure>\n<p>后保存。</p>\n"},{"title":"Gradle、Maven项目相互转换","date":"2017-08-21T15:01:21.000Z","_content":"\n\n  {% note info%}\n  在开发Android项目的时候，使用的是`Gradle`构建工具，喜欢它的灵活和方便，在转向Java后端开发的时候更多时候使用的是`Maven`构建工具，然而看着漫天的尖括号，心里实在是难受。虽然只是一个构建工具，本着折腾的心，我还是更认可和看好`Gradle`。然而很多时候你的队友并没有习惯去使用或者快速熟悉`Gradle`构建工具，那么这个时候就需要将`Gradle`项目转换为Maven项目了，或者将Maven项目转换为`Gradle`项目了。\n  {%endnote%}\n\n<!--more-->\n\n### 安装Gradle／Maven\n\n首先是安装构建工具，这个没啥好说的。\n\n##### Windows\n\n打开Powershell或者Cmder执行以下命令完成安装：\n\n```powershell\nchoco install gradle\nchoco install maven\n```\n\n`choco`为windows下的一款包管理工具，可以方便安装管理配置一些常见的软件包，如果你没有安装`choco`的话，请移步：https://chocolatey.org/\n\n\n\n#### Mac\n\n打开Terminal，执行以下命令安装：\n\n```shell\nbrew install gradle\nbrew install maven\n```\n\n### Maven to Gradle\n\n需要特别说明的是，`Gradle`对`Maven`的支持是比较完善的，因此，转换也是非常的简单，在`pom.xml`文件所在的目录下执行：\n\n```shell\ngradle init     # 根据pom.xml内容生成对应的gradle配置\ngradle build    # 开启gradle构建\n```\n\n-------\n\n### Gradle to Maven\n\n`Gradle`项目转`Maven`项目需要借助一个Gradle插件，在项目的`module`的`build.gradle`文件中加入以下配置即可：\n\n```groovy\napply plugin: 'maven'\n```\n\n通过双击`Idea`的Gradle Tasks GUI:\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fj5qcx3csoj20j20ee0ua.jpg)\n\n或者执行命令来完成转换:\n\n```shell\ngradle install\n```\n\n完成之后，将会在当前Module项目的`build`目录下的`poms`文件夹下生成`pom-default.xml`，将其拷贝到项目的根目录下即可。\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fj5pn78lbhj20ik0g4jsk.jpg)\n\n- 参考文档：https://guides.gradle.org/migrating-from-maven/\n\n---------------------\n\n通过实际测试，这样的生成的`pom-default.xml`文件是不能用于直接`maven`构建的，因为生成的`pom-default.xml`文件中的`groupId`还需要我们手动指定下。这样显然是不清真的，于是我们可以在`build.gradle`文件中将其事先定义好，这样生成的pom文件就不用我们再手动更改了：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fj5pvzyw2xj20ni0dign1.jpg)\n\n然而这样我们还是觉得麻烦，毕竟需要手动复制到项目根目录，再重新命名。我们还可以通过Hook Gradle中Maven插件的`install`Task来完成自动的复制和命名,编辑`build.gradle`:\n\n```groovy\ntask convert2Maven {\n    doLast {\n        file(\"$buildDir/poms/pom-default.xml\").renameTo(file(\"$rootDir/pom.xml\"))\n    }\n}\ninstall.dependsOn(convert2Maven)\n```\n\n此时，再执行`gradle install`这个task就可以看到gradle已经自动为我们在项目的根目录下生成好了`pom.xml`文件啦。\n\n\n\n","source":"_posts/Gradle、Maven项目相互转换.md","raw":"---\ntitle: Gradle、Maven项目相互转换\ntags:\n  - Gradle\n  - Maven\ndate: 2017-08-21 23:01:21\n---\n\n\n  {% note info%}\n  在开发Android项目的时候，使用的是`Gradle`构建工具，喜欢它的灵活和方便，在转向Java后端开发的时候更多时候使用的是`Maven`构建工具，然而看着漫天的尖括号，心里实在是难受。虽然只是一个构建工具，本着折腾的心，我还是更认可和看好`Gradle`。然而很多时候你的队友并没有习惯去使用或者快速熟悉`Gradle`构建工具，那么这个时候就需要将`Gradle`项目转换为Maven项目了，或者将Maven项目转换为`Gradle`项目了。\n  {%endnote%}\n\n<!--more-->\n\n### 安装Gradle／Maven\n\n首先是安装构建工具，这个没啥好说的。\n\n##### Windows\n\n打开Powershell或者Cmder执行以下命令完成安装：\n\n```powershell\nchoco install gradle\nchoco install maven\n```\n\n`choco`为windows下的一款包管理工具，可以方便安装管理配置一些常见的软件包，如果你没有安装`choco`的话，请移步：https://chocolatey.org/\n\n\n\n#### Mac\n\n打开Terminal，执行以下命令安装：\n\n```shell\nbrew install gradle\nbrew install maven\n```\n\n### Maven to Gradle\n\n需要特别说明的是，`Gradle`对`Maven`的支持是比较完善的，因此，转换也是非常的简单，在`pom.xml`文件所在的目录下执行：\n\n```shell\ngradle init     # 根据pom.xml内容生成对应的gradle配置\ngradle build    # 开启gradle构建\n```\n\n-------\n\n### Gradle to Maven\n\n`Gradle`项目转`Maven`项目需要借助一个Gradle插件，在项目的`module`的`build.gradle`文件中加入以下配置即可：\n\n```groovy\napply plugin: 'maven'\n```\n\n通过双击`Idea`的Gradle Tasks GUI:\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fj5qcx3csoj20j20ee0ua.jpg)\n\n或者执行命令来完成转换:\n\n```shell\ngradle install\n```\n\n完成之后，将会在当前Module项目的`build`目录下的`poms`文件夹下生成`pom-default.xml`，将其拷贝到项目的根目录下即可。\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fj5pn78lbhj20ik0g4jsk.jpg)\n\n- 参考文档：https://guides.gradle.org/migrating-from-maven/\n\n---------------------\n\n通过实际测试，这样的生成的`pom-default.xml`文件是不能用于直接`maven`构建的，因为生成的`pom-default.xml`文件中的`groupId`还需要我们手动指定下。这样显然是不清真的，于是我们可以在`build.gradle`文件中将其事先定义好，这样生成的pom文件就不用我们再手动更改了：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fj5pvzyw2xj20ni0dign1.jpg)\n\n然而这样我们还是觉得麻烦，毕竟需要手动复制到项目根目录，再重新命名。我们还可以通过Hook Gradle中Maven插件的`install`Task来完成自动的复制和命名,编辑`build.gradle`:\n\n```groovy\ntask convert2Maven {\n    doLast {\n        file(\"$buildDir/poms/pom-default.xml\").renameTo(file(\"$rootDir/pom.xml\"))\n    }\n}\ninstall.dependsOn(convert2Maven)\n```\n\n此时，再执行`gradle install`这个task就可以看到gradle已经自动为我们在项目的根目录下生成好了`pom.xml`文件啦。\n\n\n\n","slug":"Gradle、Maven项目相互转换","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb94000v2ev2cm76ssuw","content":"  <div class=\"note info\"><p>在开发Android项目的时候，使用的是<code>Gradle</code>构建工具，喜欢它的灵活和方便，在转向Java后端开发的时候更多时候使用的是<code>Maven</code>构建工具，然而看着漫天的尖括号，心里实在是难受。虽然只是一个构建工具，本着折腾的心，我还是更认可和看好<code>Gradle</code>。然而很多时候你的队友并没有习惯去使用或者快速熟悉<code>Gradle</code>构建工具，那么这个时候就需要将<code>Gradle</code>项目转换为Maven项目了，或者将Maven项目转换为<code>Gradle</code>项目了。</p></div>\n<a id=\"more\"></a>\n<h3 id=\"安装Gradle／Maven\"><a href=\"#安装Gradle／Maven\" class=\"headerlink\" title=\"安装Gradle／Maven\"></a>安装Gradle／Maven</h3><p>首先是安装构建工具，这个没啥好说的。</p>\n<h5 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h5><p>打开Powershell或者Cmder执行以下命令完成安装：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choco install gradle</span><br><span class=\"line\">choco install maven</span><br></pre></td></tr></table></figure>\n<p><code>choco</code>为windows下的一款包管理工具，可以方便安装管理配置一些常见的软件包，如果你没有安装<code>choco</code>的话，请移步：<a href=\"https://chocolatey.org/\" target=\"_blank\" rel=\"noopener\">https://chocolatey.org/</a></p>\n<h4 id=\"Mac\"><a href=\"#Mac\" class=\"headerlink\" title=\"Mac\"></a>Mac</h4><p>打开Terminal，执行以下命令安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install gradle</span><br><span class=\"line\">brew install maven</span><br></pre></td></tr></table></figure>\n<h3 id=\"Maven-to-Gradle\"><a href=\"#Maven-to-Gradle\" class=\"headerlink\" title=\"Maven to Gradle\"></a>Maven to Gradle</h3><p>需要特别说明的是，<code>Gradle</code>对<code>Maven</code>的支持是比较完善的，因此，转换也是非常的简单，在<code>pom.xml</code>文件所在的目录下执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle init     # 根据pom.xml内容生成对应的gradle配置</span><br><span class=\"line\">gradle build    # 开启gradle构建</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Gradle-to-Maven\"><a href=\"#Gradle-to-Maven\" class=\"headerlink\" title=\"Gradle to Maven\"></a>Gradle to Maven</h3><p><code>Gradle</code>项目转<code>Maven</code>项目需要借助一个Gradle插件，在项目的<code>module</code>的<code>build.gradle</code>文件中加入以下配置即可：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'maven'</span></span><br></pre></td></tr></table></figure>\n<p>通过双击<code>Idea</code>的Gradle Tasks GUI:</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fj5qcx3csoj20j20ee0ua.jpg\" alt></p>\n<p>或者执行命令来完成转换:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle install</span><br></pre></td></tr></table></figure>\n<p>完成之后，将会在当前Module项目的<code>build</code>目录下的<code>poms</code>文件夹下生成<code>pom-default.xml</code>，将其拷贝到项目的根目录下即可。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fj5pn78lbhj20ik0g4jsk.jpg\" alt></p>\n<ul>\n<li>参考文档：<a href=\"https://guides.gradle.org/migrating-from-maven/\" target=\"_blank\" rel=\"noopener\">https://guides.gradle.org/migrating-from-maven/</a></li>\n</ul>\n<hr>\n<p>通过实际测试，这样的生成的<code>pom-default.xml</code>文件是不能用于直接<code>maven</code>构建的，因为生成的<code>pom-default.xml</code>文件中的<code>groupId</code>还需要我们手动指定下。这样显然是不清真的，于是我们可以在<code>build.gradle</code>文件中将其事先定义好，这样生成的pom文件就不用我们再手动更改了：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fj5pvzyw2xj20ni0dign1.jpg\" alt></p>\n<p>然而这样我们还是觉得麻烦，毕竟需要手动复制到项目根目录，再重新命名。我们还可以通过Hook Gradle中Maven插件的<code>install</code>Task来完成自动的复制和命名,编辑<code>build.gradle</code>:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task convert2Maven &#123;</span><br><span class=\"line\">    doLast &#123;</span><br><span class=\"line\">        file(<span class=\"string\">\"$buildDir/poms/pom-default.xml\"</span>).renameTo(file(<span class=\"string\">\"$rootDir/pom.xml\"</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">install.dependsOn(convert2Maven)</span><br></pre></td></tr></table></figure>\n<p>此时，再执行<code>gradle install</code>这个task就可以看到gradle已经自动为我们在项目的根目录下生成好了<code>pom.xml</code>文件啦。</p>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>在开发Android项目的时候，使用的是<code>Gradle</code>构建工具，喜欢它的灵活和方便，在转向Java后端开发的时候更多时候使用的是<code>Maven</code>构建工具，然而看着漫天的尖括号，心里实在是难受。虽然只是一个构建工具，本着折腾的心，我还是更认可和看好<code>Gradle</code>。然而很多时候你的队友并没有习惯去使用或者快速熟悉<code>Gradle</code>构建工具，那么这个时候就需要将<code>Gradle</code>项目转换为Maven项目了，或者将Maven项目转换为<code>Gradle</code>项目了。</p></div>","more":"<h3 id=\"安装Gradle／Maven\"><a href=\"#安装Gradle／Maven\" class=\"headerlink\" title=\"安装Gradle／Maven\"></a>安装Gradle／Maven</h3><p>首先是安装构建工具，这个没啥好说的。</p>\n<h5 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h5><p>打开Powershell或者Cmder执行以下命令完成安装：</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">choco install gradle</span><br><span class=\"line\">choco install maven</span><br></pre></td></tr></table></figure>\n<p><code>choco</code>为windows下的一款包管理工具，可以方便安装管理配置一些常见的软件包，如果你没有安装<code>choco</code>的话，请移步：<a href=\"https://chocolatey.org/\" target=\"_blank\" rel=\"noopener\">https://chocolatey.org/</a></p>\n<h4 id=\"Mac\"><a href=\"#Mac\" class=\"headerlink\" title=\"Mac\"></a>Mac</h4><p>打开Terminal，执行以下命令安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install gradle</span><br><span class=\"line\">brew install maven</span><br></pre></td></tr></table></figure>\n<h3 id=\"Maven-to-Gradle\"><a href=\"#Maven-to-Gradle\" class=\"headerlink\" title=\"Maven to Gradle\"></a>Maven to Gradle</h3><p>需要特别说明的是，<code>Gradle</code>对<code>Maven</code>的支持是比较完善的，因此，转换也是非常的简单，在<code>pom.xml</code>文件所在的目录下执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle init     # 根据pom.xml内容生成对应的gradle配置</span><br><span class=\"line\">gradle build    # 开启gradle构建</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"Gradle-to-Maven\"><a href=\"#Gradle-to-Maven\" class=\"headerlink\" title=\"Gradle to Maven\"></a>Gradle to Maven</h3><p><code>Gradle</code>项目转<code>Maven</code>项目需要借助一个Gradle插件，在项目的<code>module</code>的<code>build.gradle</code>文件中加入以下配置即可：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apply <span class=\"string\">plugin:</span> <span class=\"string\">'maven'</span></span><br></pre></td></tr></table></figure>\n<p>通过双击<code>Idea</code>的Gradle Tasks GUI:</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fj5qcx3csoj20j20ee0ua.jpg\" alt></p>\n<p>或者执行命令来完成转换:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradle install</span><br></pre></td></tr></table></figure>\n<p>完成之后，将会在当前Module项目的<code>build</code>目录下的<code>poms</code>文件夹下生成<code>pom-default.xml</code>，将其拷贝到项目的根目录下即可。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fj5pn78lbhj20ik0g4jsk.jpg\" alt></p>\n<ul>\n<li>参考文档：<a href=\"https://guides.gradle.org/migrating-from-maven/\" target=\"_blank\" rel=\"noopener\">https://guides.gradle.org/migrating-from-maven/</a></li>\n</ul>\n<hr>\n<p>通过实际测试，这样的生成的<code>pom-default.xml</code>文件是不能用于直接<code>maven</code>构建的，因为生成的<code>pom-default.xml</code>文件中的<code>groupId</code>还需要我们手动指定下。这样显然是不清真的，于是我们可以在<code>build.gradle</code>文件中将其事先定义好，这样生成的pom文件就不用我们再手动更改了：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fj5pvzyw2xj20ni0dign1.jpg\" alt></p>\n<p>然而这样我们还是觉得麻烦，毕竟需要手动复制到项目根目录，再重新命名。我们还可以通过Hook Gradle中Maven插件的<code>install</code>Task来完成自动的复制和命名,编辑<code>build.gradle</code>:</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">task convert2Maven &#123;</span><br><span class=\"line\">    doLast &#123;</span><br><span class=\"line\">        file(<span class=\"string\">\"$buildDir/poms/pom-default.xml\"</span>).renameTo(file(<span class=\"string\">\"$rootDir/pom.xml\"</span>))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">install.dependsOn(convert2Maven)</span><br></pre></td></tr></table></figure>\n<p>此时，再执行<code>gradle install</code>这个task就可以看到gradle已经自动为我们在项目的根目录下生成好了<code>pom.xml</code>文件啦。</p>"},{"title":"Hexo添加文章时自动打开编辑器","date":"2015-06-29T09:39:55.000Z","isupdate":true,"updatetime":"2015-10-18T16:00:00.000Z","_content":"\n[![](http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/hexo_logo.jpg \"阅读全文\")](https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html)\n\n<!--more-->\n\n在`Hexo`中新建一篇博文非常简单，只需要在命令行中键入以下命令然后回车即可：\n\n```javascript\nhexo new \"The title of your blog\"\n```\n此后Hexo便会在Hexo的根目录的`source`文件夹下的`_posts`目录下自动帮你创建相应的md文件。然后我们打开该目录，找到刚刚Hexo自动生成的文件打开编辑即可。\n\n但是当我们的博文比较多，这样我们就需要在成堆的Markdown文件中找到刚才自动生成的文件，这样做显然是一件比较痛苦的事情。\n\n------\n\n在访问[Hexo的Github项目](https://github.com/hexojs/hexo)时，发现有类似的[issue](https://github.com/hexojs/hexo/issues/1007)，Hexo作者也给出来解决办法，以下为作者原文：\n\n>ou can try to listen to the new event. For example:\n\n```javascript\nvar spawn = require('child_process').exec;\n\n// Hexo 2.x\nhexo.on('new', function(path){\n  exec('vi', [path]);\n});\n\n// Hexo 3\nhexo.on('new', function(data){\n  exec('vi', [data.path]);\n});\n```\n\n根据作者给出的示例，一番折腾过后博主终于在自己的机器上实验成功了，下面给出操作步骤：\n\n- 首先在Hexo目录下的`scripts`目录中创建一个JavaScript脚本文件。\n- 如果没有这个`scripts`目录，则新建一个。\n- `scripts`目录新建的JavaScript脚本文件可以任意取名。\n\n通过这个脚本，我们用其来监听`hexo new`这个动作，并在检测到`hexo new`之后，执行编辑器打开的命令。\n\n如果你是<font color=red>windows平台的Hexo用户</font>，则将下列内容写入你的脚本：\n\n```javascript\n\nvar spawn = require('child_process').exec;\n\n// Hexo 2.x 用户复制这段\nhexo.on('new', function(path){\n  spawn('start  \"markdown编辑器绝对路径.exe\" ' + path);\n});\n\n// Hexo 3 用户复制这段\nhexo.on('new', function(data){\n  spawn('start  \"markdown编辑器绝对路径.exe\" ' + data.path);\n});\n```\n\n如果你是<font color=red>Mac平台Hexo用户</font>，则将下列内容写入你的脚本：\n\n```javascript\nvar exec = require('child_process').exec;\n\n// Hexo 2.x 用户复制这段\nhexo.on('new', function(path){\n    exec('open -a \"markdown编辑器绝对路径.app\" ' + path);\n});\n// Hexo 3 用户复制这段\nhexo.on('new', function(data){\n    exec('open -a \"markdown编辑器绝对路径.app\" ' + data.path);\n});\n```\n\n保存并退出脚本之后，在命令行中键入：\n\n```javascript\nhexo new \"auto open editor test\"\n```\n是不是就顺利的自动打开了自动生成的md文件啦~\n\nEnjoy it！","source":"_posts/Hexo添加文章时自动打开编辑器.md","raw":"title: Hexo添加文章时自动打开编辑器\ndate: 2015-06-29 17:39:55\ntags: Hexo\nisupdate: true\nupdatetime: 2015-10-19\ncategories: Hexo\n\n---\n\n[![](http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/hexo_logo.jpg \"阅读全文\")](https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html)\n\n<!--more-->\n\n在`Hexo`中新建一篇博文非常简单，只需要在命令行中键入以下命令然后回车即可：\n\n```javascript\nhexo new \"The title of your blog\"\n```\n此后Hexo便会在Hexo的根目录的`source`文件夹下的`_posts`目录下自动帮你创建相应的md文件。然后我们打开该目录，找到刚刚Hexo自动生成的文件打开编辑即可。\n\n但是当我们的博文比较多，这样我们就需要在成堆的Markdown文件中找到刚才自动生成的文件，这样做显然是一件比较痛苦的事情。\n\n------\n\n在访问[Hexo的Github项目](https://github.com/hexojs/hexo)时，发现有类似的[issue](https://github.com/hexojs/hexo/issues/1007)，Hexo作者也给出来解决办法，以下为作者原文：\n\n>ou can try to listen to the new event. For example:\n\n```javascript\nvar spawn = require('child_process').exec;\n\n// Hexo 2.x\nhexo.on('new', function(path){\n  exec('vi', [path]);\n});\n\n// Hexo 3\nhexo.on('new', function(data){\n  exec('vi', [data.path]);\n});\n```\n\n根据作者给出的示例，一番折腾过后博主终于在自己的机器上实验成功了，下面给出操作步骤：\n\n- 首先在Hexo目录下的`scripts`目录中创建一个JavaScript脚本文件。\n- 如果没有这个`scripts`目录，则新建一个。\n- `scripts`目录新建的JavaScript脚本文件可以任意取名。\n\n通过这个脚本，我们用其来监听`hexo new`这个动作，并在检测到`hexo new`之后，执行编辑器打开的命令。\n\n如果你是<font color=red>windows平台的Hexo用户</font>，则将下列内容写入你的脚本：\n\n```javascript\n\nvar spawn = require('child_process').exec;\n\n// Hexo 2.x 用户复制这段\nhexo.on('new', function(path){\n  spawn('start  \"markdown编辑器绝对路径.exe\" ' + path);\n});\n\n// Hexo 3 用户复制这段\nhexo.on('new', function(data){\n  spawn('start  \"markdown编辑器绝对路径.exe\" ' + data.path);\n});\n```\n\n如果你是<font color=red>Mac平台Hexo用户</font>，则将下列内容写入你的脚本：\n\n```javascript\nvar exec = require('child_process').exec;\n\n// Hexo 2.x 用户复制这段\nhexo.on('new', function(path){\n    exec('open -a \"markdown编辑器绝对路径.app\" ' + path);\n});\n// Hexo 3 用户复制这段\nhexo.on('new', function(data){\n    exec('open -a \"markdown编辑器绝对路径.app\" ' + data.path);\n});\n```\n\n保存并退出脚本之后，在命令行中键入：\n\n```javascript\nhexo new \"auto open editor test\"\n```\n是不是就顺利的自动打开了自动生成的md文件啦~\n\nEnjoy it！","slug":"Hexo添加文章时自动打开编辑器","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb95000x2ev27882vln1","content":"<p><a href=\"https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html\" target=\"_blank\" rel=\"noopener\"><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/hexo_logo.jpg\" alt title=\"阅读全文\"></a></p>\n<a id=\"more\"></a>\n<p>在<code>Hexo</code>中新建一篇博文非常简单，只需要在命令行中键入以下命令然后回车即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">\"The title of your blog\"</span></span><br></pre></td></tr></table></figure>\n<p>此后Hexo便会在Hexo的根目录的<code>source</code>文件夹下的<code>_posts</code>目录下自动帮你创建相应的md文件。然后我们打开该目录，找到刚刚Hexo自动生成的文件打开编辑即可。</p>\n<p>但是当我们的博文比较多，这样我们就需要在成堆的Markdown文件中找到刚才自动生成的文件，这样做显然是一件比较痛苦的事情。</p>\n<hr>\n<p>在访问<a href=\"https://github.com/hexojs/hexo\" target=\"_blank\" rel=\"noopener\">Hexo的Github项目</a>时，发现有类似的<a href=\"https://github.com/hexojs/hexo/issues/1007\" target=\"_blank\" rel=\"noopener\">issue</a>，Hexo作者也给出来解决办法，以下为作者原文：</p>\n<blockquote>\n<p>ou can try to listen to the new event. For example:</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> spawn = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>).exec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hexo 2.x</span></span><br><span class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">path</span>)</span>&#123;</span><br><span class=\"line\">  exec(<span class=\"string\">'vi'</span>, [path]);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hexo 3</span></span><br><span class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">  exec(<span class=\"string\">'vi'</span>, [data.path]);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>根据作者给出的示例，一番折腾过后博主终于在自己的机器上实验成功了，下面给出操作步骤：</p>\n<ul>\n<li>首先在Hexo目录下的<code>scripts</code>目录中创建一个JavaScript脚本文件。</li>\n<li>如果没有这个<code>scripts</code>目录，则新建一个。</li>\n<li><code>scripts</code>目录新建的JavaScript脚本文件可以任意取名。</li>\n</ul>\n<p>通过这个脚本，我们用其来监听<code>hexo new</code>这个动作，并在检测到<code>hexo new</code>之后，执行编辑器打开的命令。</p>\n<p>如果你是<font color=\"red\">windows平台的Hexo用户</font>，则将下列内容写入你的脚本：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> spawn = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>).exec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hexo 2.x 用户复制这段</span></span><br><span class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">path</span>)</span>&#123;</span><br><span class=\"line\">  spawn(<span class=\"string\">'start  \"markdown编辑器绝对路径.exe\" '</span> + path);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hexo 3 用户复制这段</span></span><br><span class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">  spawn(<span class=\"string\">'start  \"markdown编辑器绝对路径.exe\" '</span> + data.path);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果你是<font color=\"red\">Mac平台Hexo用户</font>，则将下列内容写入你的脚本：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> exec = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>).exec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hexo 2.x 用户复制这段</span></span><br><span class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">path</span>)</span>&#123;</span><br><span class=\"line\">    exec(<span class=\"string\">'open -a \"markdown编辑器绝对路径.app\" '</span> + path);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// Hexo 3 用户复制这段</span></span><br><span class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    exec(<span class=\"string\">'open -a \"markdown编辑器绝对路径.app\" '</span> + data.path);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>保存并退出脚本之后，在命令行中键入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">\"auto open editor test\"</span></span><br></pre></td></tr></table></figure>\n<p>是不是就顺利的自动打开了自动生成的md文件啦~</p>\n<p>Enjoy it！</p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html\" target=\"_blank\" rel=\"noopener\"><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/hexo_logo.jpg\" alt title=\"阅读全文\"></a></p>","more":"<p>在<code>Hexo</code>中新建一篇博文非常简单，只需要在命令行中键入以下命令然后回车即可：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">\"The title of your blog\"</span></span><br></pre></td></tr></table></figure>\n<p>此后Hexo便会在Hexo的根目录的<code>source</code>文件夹下的<code>_posts</code>目录下自动帮你创建相应的md文件。然后我们打开该目录，找到刚刚Hexo自动生成的文件打开编辑即可。</p>\n<p>但是当我们的博文比较多，这样我们就需要在成堆的Markdown文件中找到刚才自动生成的文件，这样做显然是一件比较痛苦的事情。</p>\n<hr>\n<p>在访问<a href=\"https://github.com/hexojs/hexo\" target=\"_blank\" rel=\"noopener\">Hexo的Github项目</a>时，发现有类似的<a href=\"https://github.com/hexojs/hexo/issues/1007\" target=\"_blank\" rel=\"noopener\">issue</a>，Hexo作者也给出来解决办法，以下为作者原文：</p>\n<blockquote>\n<p>ou can try to listen to the new event. For example:</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> spawn = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>).exec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hexo 2.x</span></span><br><span class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">path</span>)</span>&#123;</span><br><span class=\"line\">  exec(<span class=\"string\">'vi'</span>, [path]);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hexo 3</span></span><br><span class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">  exec(<span class=\"string\">'vi'</span>, [data.path]);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>根据作者给出的示例，一番折腾过后博主终于在自己的机器上实验成功了，下面给出操作步骤：</p>\n<ul>\n<li>首先在Hexo目录下的<code>scripts</code>目录中创建一个JavaScript脚本文件。</li>\n<li>如果没有这个<code>scripts</code>目录，则新建一个。</li>\n<li><code>scripts</code>目录新建的JavaScript脚本文件可以任意取名。</li>\n</ul>\n<p>通过这个脚本，我们用其来监听<code>hexo new</code>这个动作，并在检测到<code>hexo new</code>之后，执行编辑器打开的命令。</p>\n<p>如果你是<font color=\"red\">windows平台的Hexo用户</font>，则将下列内容写入你的脚本：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> spawn = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>).exec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hexo 2.x 用户复制这段</span></span><br><span class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">path</span>)</span>&#123;</span><br><span class=\"line\">  spawn(<span class=\"string\">'start  \"markdown编辑器绝对路径.exe\" '</span> + path);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hexo 3 用户复制这段</span></span><br><span class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">  spawn(<span class=\"string\">'start  \"markdown编辑器绝对路径.exe\" '</span> + data.path);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>如果你是<font color=\"red\">Mac平台Hexo用户</font>，则将下列内容写入你的脚本：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> exec = <span class=\"built_in\">require</span>(<span class=\"string\">'child_process'</span>).exec;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Hexo 2.x 用户复制这段</span></span><br><span class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">path</span>)</span>&#123;</span><br><span class=\"line\">    exec(<span class=\"string\">'open -a \"markdown编辑器绝对路径.app\" '</span> + path);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// Hexo 3 用户复制这段</span></span><br><span class=\"line\">hexo.on(<span class=\"string\">'new'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">    exec(<span class=\"string\">'open -a \"markdown编辑器绝对路径.app\" '</span> + data.path);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>保存并退出脚本之后，在命令行中键入：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo <span class=\"keyword\">new</span> <span class=\"string\">\"auto open editor test\"</span></span><br></pre></td></tr></table></figure>\n<p>是不是就顺利的自动打开了自动生成的md文件啦~</p>\n<p>Enjoy it！</p>"},{"title":"MySQL开启远程访问授权","isupdate":false,"date":"2015-08-20T09:39:55.000Z","updatetime":null,"_content":"\n在做开发测试的时候，经常会用到MySQL数据库。测试使用的数据库不在本机上而在虚拟机里，访问数据库就比较蛋碎了。因为MySQL数据库默认是没有开放远程访问授权的。不能够直接访问，下面介绍两种常用的开启MySQL远程访问权限开启方法:\n\n\n\n### 方法一：修改`user`表开启远程访问\n\n在终端中键入以下命令登录MySQL数据库:\n\n```bash\nmysql -uROOT -pPASSWORD\n```\n其中，<font color=red>`ROOT`</font>表示登录的用户名，<font color=red>`PASSWORD`</font>表示登录的该用户的密码。登录成功之后，访问`mysql`数据库，依次执行以下SQL语句:\n\n```bash\nmysql>  use mysql;\nmysql>  select host,user from user;\n```\n<!--more-->\n\n将会打印出MySQL数据库中所有用户以及其授权访问地址，以博主的为测试数据库为例，打印信息如下:\n\n```bash\n+-------------------------+------------------+\n| host                    | user             |\n+-------------------------+------------------+\n| 127.0.0.1               | root             |\n| ::1                     | root             |\n| localhost               | debian-sys-maint |\n| localhost               | root             |\n| xiamo-virtual-machine   | root             |\n+-------------------------+------------------+\n5 rows in set (0.00 sec)\n\n```\n\n可以看到，<font color=red>`host`</font>栏表示登录主机，可以是ip地址或者主机名，不难发现其实他们都是虚拟机本地地址，因此我们是没办法从物理机访问该数据库的。因此，我们只需要更改登录主机的<font color=red>`host`</font>栏目里的地址，便可以在远程主机上访问了。\n\n比如博主通过`桥接模式`与虚拟机相连接，物理机的ip地址为`192.168.1.101`,虚拟机的ip地址为`192.168.1.103`，我们可以执行以下SQL语句来达到远程访问MySQL:\n\n```bash\nmysql>  use mysql;\nmysql>  update user set host='192.168.1.101' where user='root' and host='127.0.0.1';\n```\n然后再执行以下命令重启MySQL即可通过物理机访问MySQL啦:\n```bash\nsudo service mysql restart\n```\n也可以执行以下SQL语句刷新授权信息来达到不重启MySQL即可远程访问:\n```bash\nmysql>  FLUSH PRIVILEGES;\n```\n\n当然，在大多数时候，我们都希望可以从任意ip地址访问，而不是仅限于指定的ip，这样就算ip地址变动也不会再次折腾，这个时候我们可以执行以下SQL:\n\n```bash\nmysql>  use mysql;\nmysql>  update user set host='%' where user='root' and host='127.0.0.1';\n```\n这样，将<font color=red>`host`</font>值改为<font color=red>`%`</font>,就可以在任意主机登录到MySQL咯。\n\n### 方法二：通过授权语句开启远程访问\n\n与修改user表的方法相同，在终端中连接到MySQL数据库。然后执行以下SQL语句即可授权指定用户远程访问MySQL:\n```bash\nmysql>  grant all privileges  on *.* to USERNAME@'%' identified by \"PASSWORD\";\nmysql>  FLUSH PRIVILEGES;\n```\n\n需要注意的是，其中`*.*`的含义为：\n - 第一个<font color=red>`*`</font>为MySQL中的数据库名。\n - 第二个<font color=red>`*`</font>为MySQL中的指定的数据库的表名。\n - <font color=red>`USERNAME`</font>为授权用户的用户名。\n - <font color=red>`%`</font>为任意主机，也可以写指定的ip地址或者主机名。\n - <font color=red>`PASSWORD`</font>为授权改用户在指定的数据访问MySQL时的密码，**如果该密码和本地用户同名用户的密码不一致，远程访问时务必使用该授权密码**。\n\n\n### 解决Linux下，MySQL中文乱码问题\n\n首先，当然是确保表或者创建的数据库的编码方式为`UTF-8`啦，在这些都没问题的情况下，执行以下SQL语句，查看MySQL的编码情况：\n```bash\nmysql>  show variables like 'character%';\n```\n一般情况下，将会得到以下结果:\n```bash\n+--------------------------+----------------------------+\n| Variable_name            | Value                      |\n+--------------------------+----------------------------+\n| character_set_client     | utf8                       |\n| character_set_connection | utf8                       |\n| character_set_database   | latin1                     |\n| character_set_filesystem | binary                     |\n| character_set_results    | utf8                       |\n| character_set_server     | latin1                     |\n| character_set_system     | utf8                       |\n| character_sets_dir       | /usr/share/mysql/charsets/ |\n+--------------------------+----------------------------+\n8 rows in set (0.00 sec)\n```\n此时，我们修改位于<font color=red>`/etc/mysql/my.cnf`</font>的<font color=red>`my.cnf`</font>文件:\n```bash\nvim /etc/mysql/my.cnf\n```\n\n在<font color=red>`[client]`</font>中加入:\n```bash\ndefault-character-set=utf8\n```\n在<font color=red>`[mysqld]`</font>中加入:\n```bash\ncharacter-set-server=utf8\n```\n退出保存之后重启MySQL，再次执行，得到如下结果:\n```bash\nmysql>  show variables like 'character%';\n+--------------------------+----------------------------+\n| Variable_name            | Value                      |\n+--------------------------+----------------------------+\n| character_set_client     | utf8                       |\n| character_set_connection | utf8                       |\n| character_set_database   | utf8                       |\n| character_set_filesystem | binary                     |\n| character_set_results    | utf8                       |\n| character_set_server     | utf8                       |\n| character_set_system     | utf8                       |\n| character_sets_dir       | /usr/share/mysql/charsets/ |\n+--------------------------+----------------------------+\n8 rows in set (0.00 sec)\n\n```\n即可看到编码都为UTF-8啦~\n\n\n\n\n\n","source":"_posts/MySQL开启远程访问权限.md","raw":"title: MySQL开启远程访问授权\nisupdate: false\ndate: 2015-08-20 17:39:55\nupdatetime:\ntags:\n - MySQL\ncategories: 数据库\n---\n\n在做开发测试的时候，经常会用到MySQL数据库。测试使用的数据库不在本机上而在虚拟机里，访问数据库就比较蛋碎了。因为MySQL数据库默认是没有开放远程访问授权的。不能够直接访问，下面介绍两种常用的开启MySQL远程访问权限开启方法:\n\n\n\n### 方法一：修改`user`表开启远程访问\n\n在终端中键入以下命令登录MySQL数据库:\n\n```bash\nmysql -uROOT -pPASSWORD\n```\n其中，<font color=red>`ROOT`</font>表示登录的用户名，<font color=red>`PASSWORD`</font>表示登录的该用户的密码。登录成功之后，访问`mysql`数据库，依次执行以下SQL语句:\n\n```bash\nmysql>  use mysql;\nmysql>  select host,user from user;\n```\n<!--more-->\n\n将会打印出MySQL数据库中所有用户以及其授权访问地址，以博主的为测试数据库为例，打印信息如下:\n\n```bash\n+-------------------------+------------------+\n| host                    | user             |\n+-------------------------+------------------+\n| 127.0.0.1               | root             |\n| ::1                     | root             |\n| localhost               | debian-sys-maint |\n| localhost               | root             |\n| xiamo-virtual-machine   | root             |\n+-------------------------+------------------+\n5 rows in set (0.00 sec)\n\n```\n\n可以看到，<font color=red>`host`</font>栏表示登录主机，可以是ip地址或者主机名，不难发现其实他们都是虚拟机本地地址，因此我们是没办法从物理机访问该数据库的。因此，我们只需要更改登录主机的<font color=red>`host`</font>栏目里的地址，便可以在远程主机上访问了。\n\n比如博主通过`桥接模式`与虚拟机相连接，物理机的ip地址为`192.168.1.101`,虚拟机的ip地址为`192.168.1.103`，我们可以执行以下SQL语句来达到远程访问MySQL:\n\n```bash\nmysql>  use mysql;\nmysql>  update user set host='192.168.1.101' where user='root' and host='127.0.0.1';\n```\n然后再执行以下命令重启MySQL即可通过物理机访问MySQL啦:\n```bash\nsudo service mysql restart\n```\n也可以执行以下SQL语句刷新授权信息来达到不重启MySQL即可远程访问:\n```bash\nmysql>  FLUSH PRIVILEGES;\n```\n\n当然，在大多数时候，我们都希望可以从任意ip地址访问，而不是仅限于指定的ip，这样就算ip地址变动也不会再次折腾，这个时候我们可以执行以下SQL:\n\n```bash\nmysql>  use mysql;\nmysql>  update user set host='%' where user='root' and host='127.0.0.1';\n```\n这样，将<font color=red>`host`</font>值改为<font color=red>`%`</font>,就可以在任意主机登录到MySQL咯。\n\n### 方法二：通过授权语句开启远程访问\n\n与修改user表的方法相同，在终端中连接到MySQL数据库。然后执行以下SQL语句即可授权指定用户远程访问MySQL:\n```bash\nmysql>  grant all privileges  on *.* to USERNAME@'%' identified by \"PASSWORD\";\nmysql>  FLUSH PRIVILEGES;\n```\n\n需要注意的是，其中`*.*`的含义为：\n - 第一个<font color=red>`*`</font>为MySQL中的数据库名。\n - 第二个<font color=red>`*`</font>为MySQL中的指定的数据库的表名。\n - <font color=red>`USERNAME`</font>为授权用户的用户名。\n - <font color=red>`%`</font>为任意主机，也可以写指定的ip地址或者主机名。\n - <font color=red>`PASSWORD`</font>为授权改用户在指定的数据访问MySQL时的密码，**如果该密码和本地用户同名用户的密码不一致，远程访问时务必使用该授权密码**。\n\n\n### 解决Linux下，MySQL中文乱码问题\n\n首先，当然是确保表或者创建的数据库的编码方式为`UTF-8`啦，在这些都没问题的情况下，执行以下SQL语句，查看MySQL的编码情况：\n```bash\nmysql>  show variables like 'character%';\n```\n一般情况下，将会得到以下结果:\n```bash\n+--------------------------+----------------------------+\n| Variable_name            | Value                      |\n+--------------------------+----------------------------+\n| character_set_client     | utf8                       |\n| character_set_connection | utf8                       |\n| character_set_database   | latin1                     |\n| character_set_filesystem | binary                     |\n| character_set_results    | utf8                       |\n| character_set_server     | latin1                     |\n| character_set_system     | utf8                       |\n| character_sets_dir       | /usr/share/mysql/charsets/ |\n+--------------------------+----------------------------+\n8 rows in set (0.00 sec)\n```\n此时，我们修改位于<font color=red>`/etc/mysql/my.cnf`</font>的<font color=red>`my.cnf`</font>文件:\n```bash\nvim /etc/mysql/my.cnf\n```\n\n在<font color=red>`[client]`</font>中加入:\n```bash\ndefault-character-set=utf8\n```\n在<font color=red>`[mysqld]`</font>中加入:\n```bash\ncharacter-set-server=utf8\n```\n退出保存之后重启MySQL，再次执行，得到如下结果:\n```bash\nmysql>  show variables like 'character%';\n+--------------------------+----------------------------+\n| Variable_name            | Value                      |\n+--------------------------+----------------------------+\n| character_set_client     | utf8                       |\n| character_set_connection | utf8                       |\n| character_set_database   | utf8                       |\n| character_set_filesystem | binary                     |\n| character_set_results    | utf8                       |\n| character_set_server     | utf8                       |\n| character_set_system     | utf8                       |\n| character_sets_dir       | /usr/share/mysql/charsets/ |\n+--------------------------+----------------------------+\n8 rows in set (0.00 sec)\n\n```\n即可看到编码都为UTF-8啦~\n\n\n\n\n\n","slug":"MySQL开启远程访问权限","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb9700112ev29s3p20tn","content":"<p>在做开发测试的时候，经常会用到MySQL数据库。测试使用的数据库不在本机上而在虚拟机里，访问数据库就比较蛋碎了。因为MySQL数据库默认是没有开放远程访问授权的。不能够直接访问，下面介绍两种常用的开启MySQL远程访问权限开启方法:</p>\n<h3 id=\"方法一：修改user表开启远程访问\"><a href=\"#方法一：修改user表开启远程访问\" class=\"headerlink\" title=\"方法一：修改user表开启远程访问\"></a>方法一：修改<code>user</code>表开启远程访问</h3><p>在终端中键入以下命令登录MySQL数据库:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uROOT -pPASSWORD</span><br></pre></td></tr></table></figure>\n<p>其中，<font color=\"red\"><code>ROOT</code></font>表示登录的用户名，<font color=\"red\"><code>PASSWORD</code></font>表示登录的该用户的密码。登录成功之后，访问<code>mysql</code>数据库，依次执行以下SQL语句:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;  use mysql;</span><br><span class=\"line\">mysql&gt;  select host,user from user;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>将会打印出MySQL数据库中所有用户以及其授权访问地址，以博主的为测试数据库为例，打印信息如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-------------------------+------------------+</span><br><span class=\"line\">| host                    | user             |</span><br><span class=\"line\">+-------------------------+------------------+</span><br><span class=\"line\">| 127.0.0.1               | root             |</span><br><span class=\"line\">| ::1                     | root             |</span><br><span class=\"line\">| localhost               | debian-sys-maint |</span><br><span class=\"line\">| localhost               | root             |</span><br><span class=\"line\">| xiamo-virtual-machine   | root             |</span><br><span class=\"line\">+-------------------------+------------------+</span><br><span class=\"line\">5 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n<p>可以看到，<font color=\"red\"><code>host</code></font>栏表示登录主机，可以是ip地址或者主机名，不难发现其实他们都是虚拟机本地地址，因此我们是没办法从物理机访问该数据库的。因此，我们只需要更改登录主机的<font color=\"red\"><code>host</code></font>栏目里的地址，便可以在远程主机上访问了。</p>\n<p>比如博主通过<code>桥接模式</code>与虚拟机相连接，物理机的ip地址为<code>192.168.1.101</code>,虚拟机的ip地址为<code>192.168.1.103</code>，我们可以执行以下SQL语句来达到远程访问MySQL:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;  use mysql;</span><br><span class=\"line\">mysql&gt;  update user <span class=\"built_in\">set</span> host=<span class=\"string\">'192.168.1.101'</span> <span class=\"built_in\">where</span> user=<span class=\"string\">'root'</span> and host=<span class=\"string\">'127.0.0.1'</span>;</span><br></pre></td></tr></table></figure>\n<p>然后再执行以下命令重启MySQL即可通过物理机访问MySQL啦:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service mysql restart</span><br></pre></td></tr></table></figure></p>\n<p>也可以执行以下SQL语句刷新授权信息来达到不重启MySQL即可远程访问:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;  FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></p>\n<p>当然，在大多数时候，我们都希望可以从任意ip地址访问，而不是仅限于指定的ip，这样就算ip地址变动也不会再次折腾，这个时候我们可以执行以下SQL:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;  use mysql;</span><br><span class=\"line\">mysql&gt;  update user <span class=\"built_in\">set</span> host=<span class=\"string\">'%'</span> <span class=\"built_in\">where</span> user=<span class=\"string\">'root'</span> and host=<span class=\"string\">'127.0.0.1'</span>;</span><br></pre></td></tr></table></figure>\n<p>这样，将<font color=\"red\"><code>host</code></font>值改为<font color=\"red\"><code>%</code></font>,就可以在任意主机登录到MySQL咯。</p>\n<h3 id=\"方法二：通过授权语句开启远程访问\"><a href=\"#方法二：通过授权语句开启远程访问\" class=\"headerlink\" title=\"方法二：通过授权语句开启远程访问\"></a>方法二：通过授权语句开启远程访问</h3><p>与修改user表的方法相同，在终端中连接到MySQL数据库。然后执行以下SQL语句即可授权指定用户远程访问MySQL:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;  grant all privileges  on *.* to USERNAME@<span class=\"string\">'%'</span> identified by <span class=\"string\">\"PASSWORD\"</span>;</span><br><span class=\"line\">mysql&gt;  FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></p>\n<p>需要注意的是，其中<code>*.*</code>的含义为：</p>\n<ul>\n<li>第一个<font color=\"red\"><code>*</code></font>为MySQL中的数据库名。</li>\n<li>第二个<font color=\"red\"><code>*</code></font>为MySQL中的指定的数据库的表名。</li>\n<li><font color=\"red\"><code>USERNAME</code></font>为授权用户的用户名。</li>\n<li><font color=\"red\"><code>%</code></font>为任意主机，也可以写指定的ip地址或者主机名。</li>\n<li><font color=\"red\"><code>PASSWORD</code></font>为授权改用户在指定的数据访问MySQL时的密码，<strong>如果该密码和本地用户同名用户的密码不一致，远程访问时务必使用该授权密码</strong>。</li>\n</ul>\n<h3 id=\"解决Linux下，MySQL中文乱码问题\"><a href=\"#解决Linux下，MySQL中文乱码问题\" class=\"headerlink\" title=\"解决Linux下，MySQL中文乱码问题\"></a>解决Linux下，MySQL中文乱码问题</h3><p>首先，当然是确保表或者创建的数据库的编码方式为<code>UTF-8</code>啦，在这些都没问题的情况下，执行以下SQL语句，查看MySQL的编码情况：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;  show variables like <span class=\"string\">'character%'</span>;</span><br></pre></td></tr></table></figure></p>\n<p>一般情况下，将会得到以下结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+--------------------------+----------------------------+</span><br><span class=\"line\">| Variable_name            | Value                      |</span><br><span class=\"line\">+--------------------------+----------------------------+</span><br><span class=\"line\">| character_set_client     | utf8                       |</span><br><span class=\"line\">| character_set_connection | utf8                       |</span><br><span class=\"line\">| character_set_database   | latin1                     |</span><br><span class=\"line\">| character_set_filesystem | binary                     |</span><br><span class=\"line\">| character_set_results    | utf8                       |</span><br><span class=\"line\">| character_set_server     | latin1                     |</span><br><span class=\"line\">| character_set_system     | utf8                       |</span><br><span class=\"line\">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class=\"line\">+--------------------------+----------------------------+</span><br><span class=\"line\">8 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></p>\n<p>此时，我们修改位于<font color=\"red\"><code>/etc/mysql/my.cnf</code></font>的<font color=\"red\"><code>my.cnf</code></font>文件:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/mysql/my.cnf</span><br></pre></td></tr></table></figure></p>\n<p>在<font color=\"red\"><code>[client]</code></font>中加入:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default-character-set=utf8</span><br></pre></td></tr></table></figure></p>\n<p>在<font color=\"red\"><code>[mysqld]</code></font>中加入:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">character-set-server=utf8</span><br></pre></td></tr></table></figure></p>\n<p>退出保存之后重启MySQL，再次执行，得到如下结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;  show variables like <span class=\"string\">'character%'</span>;</span><br><span class=\"line\">+--------------------------+----------------------------+</span><br><span class=\"line\">| Variable_name            | Value                      |</span><br><span class=\"line\">+--------------------------+----------------------------+</span><br><span class=\"line\">| character_set_client     | utf8                       |</span><br><span class=\"line\">| character_set_connection | utf8                       |</span><br><span class=\"line\">| character_set_database   | utf8                       |</span><br><span class=\"line\">| character_set_filesystem | binary                     |</span><br><span class=\"line\">| character_set_results    | utf8                       |</span><br><span class=\"line\">| character_set_server     | utf8                       |</span><br><span class=\"line\">| character_set_system     | utf8                       |</span><br><span class=\"line\">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class=\"line\">+--------------------------+----------------------------+</span><br><span class=\"line\">8 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></p>\n<p>即可看到编码都为UTF-8啦~</p>\n","site":{"data":{}},"excerpt":"<p>在做开发测试的时候，经常会用到MySQL数据库。测试使用的数据库不在本机上而在虚拟机里，访问数据库就比较蛋碎了。因为MySQL数据库默认是没有开放远程访问授权的。不能够直接访问，下面介绍两种常用的开启MySQL远程访问权限开启方法:</p>\n<h3 id=\"方法一：修改user表开启远程访问\"><a href=\"#方法一：修改user表开启远程访问\" class=\"headerlink\" title=\"方法一：修改user表开启远程访问\"></a>方法一：修改<code>user</code>表开启远程访问</h3><p>在终端中键入以下命令登录MySQL数据库:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uROOT -pPASSWORD</span><br></pre></td></tr></table></figure>\n<p>其中，<font color=\"red\"><code>ROOT</code></font>表示登录的用户名，<font color=\"red\"><code>PASSWORD</code></font>表示登录的该用户的密码。登录成功之后，访问<code>mysql</code>数据库，依次执行以下SQL语句:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;  use mysql;</span><br><span class=\"line\">mysql&gt;  select host,user from user;</span><br></pre></td></tr></table></figure>","more":"<p>将会打印出MySQL数据库中所有用户以及其授权访问地址，以博主的为测试数据库为例，打印信息如下:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+-------------------------+------------------+</span><br><span class=\"line\">| host                    | user             |</span><br><span class=\"line\">+-------------------------+------------------+</span><br><span class=\"line\">| 127.0.0.1               | root             |</span><br><span class=\"line\">| ::1                     | root             |</span><br><span class=\"line\">| localhost               | debian-sys-maint |</span><br><span class=\"line\">| localhost               | root             |</span><br><span class=\"line\">| xiamo-virtual-machine   | root             |</span><br><span class=\"line\">+-------------------------+------------------+</span><br><span class=\"line\">5 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure>\n<p>可以看到，<font color=\"red\"><code>host</code></font>栏表示登录主机，可以是ip地址或者主机名，不难发现其实他们都是虚拟机本地地址，因此我们是没办法从物理机访问该数据库的。因此，我们只需要更改登录主机的<font color=\"red\"><code>host</code></font>栏目里的地址，便可以在远程主机上访问了。</p>\n<p>比如博主通过<code>桥接模式</code>与虚拟机相连接，物理机的ip地址为<code>192.168.1.101</code>,虚拟机的ip地址为<code>192.168.1.103</code>，我们可以执行以下SQL语句来达到远程访问MySQL:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;  use mysql;</span><br><span class=\"line\">mysql&gt;  update user <span class=\"built_in\">set</span> host=<span class=\"string\">'192.168.1.101'</span> <span class=\"built_in\">where</span> user=<span class=\"string\">'root'</span> and host=<span class=\"string\">'127.0.0.1'</span>;</span><br></pre></td></tr></table></figure>\n<p>然后再执行以下命令重启MySQL即可通过物理机访问MySQL啦:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo service mysql restart</span><br></pre></td></tr></table></figure></p>\n<p>也可以执行以下SQL语句刷新授权信息来达到不重启MySQL即可远程访问:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;  FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></p>\n<p>当然，在大多数时候，我们都希望可以从任意ip地址访问，而不是仅限于指定的ip，这样就算ip地址变动也不会再次折腾，这个时候我们可以执行以下SQL:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;  use mysql;</span><br><span class=\"line\">mysql&gt;  update user <span class=\"built_in\">set</span> host=<span class=\"string\">'%'</span> <span class=\"built_in\">where</span> user=<span class=\"string\">'root'</span> and host=<span class=\"string\">'127.0.0.1'</span>;</span><br></pre></td></tr></table></figure>\n<p>这样，将<font color=\"red\"><code>host</code></font>值改为<font color=\"red\"><code>%</code></font>,就可以在任意主机登录到MySQL咯。</p>\n<h3 id=\"方法二：通过授权语句开启远程访问\"><a href=\"#方法二：通过授权语句开启远程访问\" class=\"headerlink\" title=\"方法二：通过授权语句开启远程访问\"></a>方法二：通过授权语句开启远程访问</h3><p>与修改user表的方法相同，在终端中连接到MySQL数据库。然后执行以下SQL语句即可授权指定用户远程访问MySQL:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;  grant all privileges  on *.* to USERNAME@<span class=\"string\">'%'</span> identified by <span class=\"string\">\"PASSWORD\"</span>;</span><br><span class=\"line\">mysql&gt;  FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure></p>\n<p>需要注意的是，其中<code>*.*</code>的含义为：</p>\n<ul>\n<li>第一个<font color=\"red\"><code>*</code></font>为MySQL中的数据库名。</li>\n<li>第二个<font color=\"red\"><code>*</code></font>为MySQL中的指定的数据库的表名。</li>\n<li><font color=\"red\"><code>USERNAME</code></font>为授权用户的用户名。</li>\n<li><font color=\"red\"><code>%</code></font>为任意主机，也可以写指定的ip地址或者主机名。</li>\n<li><font color=\"red\"><code>PASSWORD</code></font>为授权改用户在指定的数据访问MySQL时的密码，<strong>如果该密码和本地用户同名用户的密码不一致，远程访问时务必使用该授权密码</strong>。</li>\n</ul>\n<h3 id=\"解决Linux下，MySQL中文乱码问题\"><a href=\"#解决Linux下，MySQL中文乱码问题\" class=\"headerlink\" title=\"解决Linux下，MySQL中文乱码问题\"></a>解决Linux下，MySQL中文乱码问题</h3><p>首先，当然是确保表或者创建的数据库的编码方式为<code>UTF-8</code>啦，在这些都没问题的情况下，执行以下SQL语句，查看MySQL的编码情况：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;  show variables like <span class=\"string\">'character%'</span>;</span><br></pre></td></tr></table></figure></p>\n<p>一般情况下，将会得到以下结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+--------------------------+----------------------------+</span><br><span class=\"line\">| Variable_name            | Value                      |</span><br><span class=\"line\">+--------------------------+----------------------------+</span><br><span class=\"line\">| character_set_client     | utf8                       |</span><br><span class=\"line\">| character_set_connection | utf8                       |</span><br><span class=\"line\">| character_set_database   | latin1                     |</span><br><span class=\"line\">| character_set_filesystem | binary                     |</span><br><span class=\"line\">| character_set_results    | utf8                       |</span><br><span class=\"line\">| character_set_server     | latin1                     |</span><br><span class=\"line\">| character_set_system     | utf8                       |</span><br><span class=\"line\">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class=\"line\">+--------------------------+----------------------------+</span><br><span class=\"line\">8 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></p>\n<p>此时，我们修改位于<font color=\"red\"><code>/etc/mysql/my.cnf</code></font>的<font color=\"red\"><code>my.cnf</code></font>文件:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/mysql/my.cnf</span><br></pre></td></tr></table></figure></p>\n<p>在<font color=\"red\"><code>[client]</code></font>中加入:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">default-character-set=utf8</span><br></pre></td></tr></table></figure></p>\n<p>在<font color=\"red\"><code>[mysqld]</code></font>中加入:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">character-set-server=utf8</span><br></pre></td></tr></table></figure></p>\n<p>退出保存之后重启MySQL，再次执行，得到如下结果:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql&gt;  show variables like <span class=\"string\">'character%'</span>;</span><br><span class=\"line\">+--------------------------+----------------------------+</span><br><span class=\"line\">| Variable_name            | Value                      |</span><br><span class=\"line\">+--------------------------+----------------------------+</span><br><span class=\"line\">| character_set_client     | utf8                       |</span><br><span class=\"line\">| character_set_connection | utf8                       |</span><br><span class=\"line\">| character_set_database   | utf8                       |</span><br><span class=\"line\">| character_set_filesystem | binary                     |</span><br><span class=\"line\">| character_set_results    | utf8                       |</span><br><span class=\"line\">| character_set_server     | utf8                       |</span><br><span class=\"line\">| character_set_system     | utf8                       |</span><br><span class=\"line\">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class=\"line\">+--------------------------+----------------------------+</span><br><span class=\"line\">8 rows <span class=\"keyword\">in</span> <span class=\"built_in\">set</span> (0.00 sec)</span><br></pre></td></tr></table></figure></p>\n<p>即可看到编码都为UTF-8啦~</p>"},{"title":"Mac自带VNC Client","date":"2016-11-24T13:57:28.000Z","_content":"\n\n\n由于有需要远程VNC的需要，苦苦寻找一款Mac上比较好使的VNC Client，结果经人指点，发现原来MacOS自带了VNC Client，只是没有在Launchpad中显示罢了。使用`command`+`space` 调出`Spotlight搜索`键入`screen Sharing.app`即可。\n\n","source":"_posts/Mac自带VNC-Client.md","raw":"---\ntitle: Mac自带VNC Client\ndate: 2016-11-24 21:57:28\ntags: \n- Mac\n- Tips\n\n\n---\n\n\n\n由于有需要远程VNC的需要，苦苦寻找一款Mac上比较好使的VNC Client，结果经人指点，发现原来MacOS自带了VNC Client，只是没有在Launchpad中显示罢了。使用`command`+`space` 调出`Spotlight搜索`键入`screen Sharing.app`即可。\n\n","slug":"Mac自带VNC-Client","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb9800142ev2yi5pq6tn","content":"<p>由于有需要远程VNC的需要，苦苦寻找一款Mac上比较好使的VNC Client，结果经人指点，发现原来MacOS自带了VNC Client，只是没有在Launchpad中显示罢了。使用<code>command</code>+<code>space</code> 调出<code>Spotlight搜索</code>键入<code>screen Sharing.app</code>即可。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>由于有需要远程VNC的需要，苦苦寻找一款Mac上比较好使的VNC Client，结果经人指点，发现原来MacOS自带了VNC Client，只是没有在Launchpad中显示罢了。使用<code>command</code>+<code>space</code> 调出<code>Spotlight搜索</code>键入<code>screen Sharing.app</code>即可。</p>\n"},{"title":"Linux学习笔记-Shell变量","date":"2015-06-02T01:14:41.000Z","_content":"\n在Bash中，变量的默认类型都是字符串类型的，Shell编程中，使用变量无需事先声。\n<!--more-->\n\n### 变量的命名规范\n\n变量名的命名须遵循如下规则：\n\n- 首个字符必须为字母（a-z，A-Z）\n- 中间不能有空格，可以使用下划线(_)\n- 不能使用标点符号\n- 不能使用bash里的关键字（可用help命令查看保留关键字）\n\n\n### 变量的分类\n\n> - 用户自定义变量：用户可以自己定义。\n\n> - 环境变量：这种变量中主要保存的是和系统操作环境相关的数据。变量可以自动一，但是对系统生效的环境变量名和变量作用是固定的。\n\n> - 位置参数变量：这种变量主要是用来向脚本当中传递参数或者数据的，变量名不能自定义，变量作用是固定的。\n\n> - 位置参数变量：是Bash中已经定义好的变量，变量名不能自定义，变量作用也是固定的。\n\n\n#### 定义变量\n\n```bash\n变量名=变量值  (等号 =两边不能带空格)\n```\n#### 变量调用\n\n```bash\necho $变量名\n```\n\n```bash\n如下示例:\necho $x\necho $name\n```\n\n#### 变量叠加\n\n```bash\nx=123\nx=\"$x\"456\nx=${x}789\n```\n最终使用`echo $x`将输出`123456789`\n\n#### 变量查看\n\n```bash\nset\n    选项:\n        -u 如果设定此选项，调用未声明变量时会报错（默认无任何提示）\n```\n\n#### 变量的删除\n\n```bash\nunset 变量名  （注意，此处不能加$符号）\n```\n\n### 环境变量\n\n环境变量和用户自定义变量的区别:\n\n> - 用户自定义变量只在当前的shell中生效，环境变量在当前shell和这个shell的所有子shell中生效。\n\n> - 环境变量是全局变量，用户自定义变量是局部变量。\n\n> - 对系统生效的环境变量名和变量作用是固定的。\n\n#### 设置环境变量\n\n```bash\nexport 变量名=变量值\n\n变量名=变量值\nexport 变量名\n```\n\n#### 查看环境变量\n\n```bash\nset #查看所有变量\nenv #查看环境变量\n```\n\n#### 常用环境变量\n\n```bash\nHOSTNAME：主机名\nSHELL：当前的shell\nTREM：终端环境\nHISTSIZE：历史命令条数\nSSH_CLIENT：当前操作环境是用ssh链接的，这里记录客户端的ip\nSSH_TTY：ssh连接的终端是pts/1\nUSER:当前登录的用户\n```\n#### PATH变量\n\n>`PATH`变量：系统查找命令的路径。\n\n```bash\necho $PATH    #查看PATH变量的值\nPATH=\"$PATH\":/root/sh    #增加PATH变量的值\n```\n\n#### PS1变量\n\n>`PS1`变量：命令提示符设置\n\n```bash\n - \\d 显示日期，格式为”星期 月 日“\n - \\H 显示完整的主机名\"localhost.localdomain\"\n - \\t 显示24小时制时间，格式为\"HH:MM:SS\"\n - \\A 显示24小时制时间，格式为\"HH:MM\"\n - \\u 显示当前用户名\n - \\w 显示当前所在目录的完整名称\n - \\W 显示当前所在目录的最后一个目录\n - \\$ 提示符、如果是root用户会显示提示符为\"#\",如果是普通用户会显示提示符为\"$\"\n```\n\n#### 当前语系查询\n\n```bash\n# locale    #查询当前语系\n    -LANG    定义系统主要语系（当前生效语系）\n    -LC:ALL    定义整体语系的变量（下次启动可能会生效）\n\necho $LANG    #查看系统当前语系\n\nlocale -a | more    #查看linux支持的所有语系\n\ncat /et/sysconfig/i18n    #查询系统的默认语系（开机生效读取的语系环境）\n```\n\n#### Linux中文支持\n\n>前提条件：正确安装中文字体和中文语系。\n- 如果有图形界面，可以正确支持中文显示。\n- 如果使用第三方远程工具，只要语系设定正确，可以支持中文显示。\n- 如果使用纯字符界面，必须使用第三方插件（zhcon等）\n\n\n### 位置参数变量\n\n```bash\n$n    n为数字，$0代表命令本身，$1~$9代表第一到第九个参数，十以上的参数需要用到大括号包含，如${10}。\n$*    这个变量代表命令行中所有的参数，$*把所有的参数看作是一个整体。\n$@    这个变量也代表命令行中所有的参数，不过$@把每个参数区分呢对待。\n$#    这个变量代表命令行中所有参数的个数\n```\n\n>$n 使用示例`sum.sh`\n\n```bash\n#!/bin/bash\nnum=$1\nnum2=$2\nsum=$(($num1+num2))\n```\n执行上述`sum.sh`脚本:\n\n    ./sum.sh 100 200\n输出为300\n\n>$* $@ $# 使用示例 `sum1.sh`\n\n```bash\n#!/bin/bash\necho \"\\$* 参数是: $*\"\necho \"\\@* 参数是: $@\"\necho \"\\#* 参数个数是: $#\"\n```\n\n>$* $@ 使用示例 `sum2.sh`\n\n```bash\n#!/bin/bash\nfor i in \"$*\"\n\n#!/bin/bash\nfor i in \"$*\"\n    $*中的所有参数看成是一个整体，所以这个for循环只会循环一次。\n\tdo\n\t\techo \" The parameter is : $i\"\n\tdone\nfor y in \"$@\"\n    $@中的每个参数都看很是独立的，所有\"$@\"中有几个参数，就会循环几次\n\tdo\n\t\techo \"Parameter : $y \"\n\tdone\n```\n\n### 预定义变量\n\n```bash\n$? 最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值非0（具体是哪个数，由命令自己决定），则证明上一个命令执行不正确了。\n$$ 当前进程的进程号（PID）\n$! 后台运行的最后一个进程的进程号（PID）\n```\n\n使用示例：\n```bash\nls\necho $? #将在终端打印结果为0\n\nls QERTYUTIYKNB\necho $? #将在终端打印结果为2（非0）\n```\n\n>其实，逻辑运算符`&&`(逻辑与运算）和`||`（逻辑或运算）就是通过判断前一个命令的返回值来判断命令是否正确执行。\n\n```bash\nls && echo yes\nls || echo no\n```","source":"_posts/Shell学习笔记.md","raw":"title: \"Linux学习笔记-Shell变量\"\ndate: 2015-06-02 09:14:41\ncategories: 学习笔记\ntags:\n- SHELL\n- Linux\n- 笔记\n---\n\n在Bash中，变量的默认类型都是字符串类型的，Shell编程中，使用变量无需事先声。\n<!--more-->\n\n### 变量的命名规范\n\n变量名的命名须遵循如下规则：\n\n- 首个字符必须为字母（a-z，A-Z）\n- 中间不能有空格，可以使用下划线(_)\n- 不能使用标点符号\n- 不能使用bash里的关键字（可用help命令查看保留关键字）\n\n\n### 变量的分类\n\n> - 用户自定义变量：用户可以自己定义。\n\n> - 环境变量：这种变量中主要保存的是和系统操作环境相关的数据。变量可以自动一，但是对系统生效的环境变量名和变量作用是固定的。\n\n> - 位置参数变量：这种变量主要是用来向脚本当中传递参数或者数据的，变量名不能自定义，变量作用是固定的。\n\n> - 位置参数变量：是Bash中已经定义好的变量，变量名不能自定义，变量作用也是固定的。\n\n\n#### 定义变量\n\n```bash\n变量名=变量值  (等号 =两边不能带空格)\n```\n#### 变量调用\n\n```bash\necho $变量名\n```\n\n```bash\n如下示例:\necho $x\necho $name\n```\n\n#### 变量叠加\n\n```bash\nx=123\nx=\"$x\"456\nx=${x}789\n```\n最终使用`echo $x`将输出`123456789`\n\n#### 变量查看\n\n```bash\nset\n    选项:\n        -u 如果设定此选项，调用未声明变量时会报错（默认无任何提示）\n```\n\n#### 变量的删除\n\n```bash\nunset 变量名  （注意，此处不能加$符号）\n```\n\n### 环境变量\n\n环境变量和用户自定义变量的区别:\n\n> - 用户自定义变量只在当前的shell中生效，环境变量在当前shell和这个shell的所有子shell中生效。\n\n> - 环境变量是全局变量，用户自定义变量是局部变量。\n\n> - 对系统生效的环境变量名和变量作用是固定的。\n\n#### 设置环境变量\n\n```bash\nexport 变量名=变量值\n\n变量名=变量值\nexport 变量名\n```\n\n#### 查看环境变量\n\n```bash\nset #查看所有变量\nenv #查看环境变量\n```\n\n#### 常用环境变量\n\n```bash\nHOSTNAME：主机名\nSHELL：当前的shell\nTREM：终端环境\nHISTSIZE：历史命令条数\nSSH_CLIENT：当前操作环境是用ssh链接的，这里记录客户端的ip\nSSH_TTY：ssh连接的终端是pts/1\nUSER:当前登录的用户\n```\n#### PATH变量\n\n>`PATH`变量：系统查找命令的路径。\n\n```bash\necho $PATH    #查看PATH变量的值\nPATH=\"$PATH\":/root/sh    #增加PATH变量的值\n```\n\n#### PS1变量\n\n>`PS1`变量：命令提示符设置\n\n```bash\n - \\d 显示日期，格式为”星期 月 日“\n - \\H 显示完整的主机名\"localhost.localdomain\"\n - \\t 显示24小时制时间，格式为\"HH:MM:SS\"\n - \\A 显示24小时制时间，格式为\"HH:MM\"\n - \\u 显示当前用户名\n - \\w 显示当前所在目录的完整名称\n - \\W 显示当前所在目录的最后一个目录\n - \\$ 提示符、如果是root用户会显示提示符为\"#\",如果是普通用户会显示提示符为\"$\"\n```\n\n#### 当前语系查询\n\n```bash\n# locale    #查询当前语系\n    -LANG    定义系统主要语系（当前生效语系）\n    -LC:ALL    定义整体语系的变量（下次启动可能会生效）\n\necho $LANG    #查看系统当前语系\n\nlocale -a | more    #查看linux支持的所有语系\n\ncat /et/sysconfig/i18n    #查询系统的默认语系（开机生效读取的语系环境）\n```\n\n#### Linux中文支持\n\n>前提条件：正确安装中文字体和中文语系。\n- 如果有图形界面，可以正确支持中文显示。\n- 如果使用第三方远程工具，只要语系设定正确，可以支持中文显示。\n- 如果使用纯字符界面，必须使用第三方插件（zhcon等）\n\n\n### 位置参数变量\n\n```bash\n$n    n为数字，$0代表命令本身，$1~$9代表第一到第九个参数，十以上的参数需要用到大括号包含，如${10}。\n$*    这个变量代表命令行中所有的参数，$*把所有的参数看作是一个整体。\n$@    这个变量也代表命令行中所有的参数，不过$@把每个参数区分呢对待。\n$#    这个变量代表命令行中所有参数的个数\n```\n\n>$n 使用示例`sum.sh`\n\n```bash\n#!/bin/bash\nnum=$1\nnum2=$2\nsum=$(($num1+num2))\n```\n执行上述`sum.sh`脚本:\n\n    ./sum.sh 100 200\n输出为300\n\n>$* $@ $# 使用示例 `sum1.sh`\n\n```bash\n#!/bin/bash\necho \"\\$* 参数是: $*\"\necho \"\\@* 参数是: $@\"\necho \"\\#* 参数个数是: $#\"\n```\n\n>$* $@ 使用示例 `sum2.sh`\n\n```bash\n#!/bin/bash\nfor i in \"$*\"\n\n#!/bin/bash\nfor i in \"$*\"\n    $*中的所有参数看成是一个整体，所以这个for循环只会循环一次。\n\tdo\n\t\techo \" The parameter is : $i\"\n\tdone\nfor y in \"$@\"\n    $@中的每个参数都看很是独立的，所有\"$@\"中有几个参数，就会循环几次\n\tdo\n\t\techo \"Parameter : $y \"\n\tdone\n```\n\n### 预定义变量\n\n```bash\n$? 最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值非0（具体是哪个数，由命令自己决定），则证明上一个命令执行不正确了。\n$$ 当前进程的进程号（PID）\n$! 后台运行的最后一个进程的进程号（PID）\n```\n\n使用示例：\n```bash\nls\necho $? #将在终端打印结果为0\n\nls QERTYUTIYKNB\necho $? #将在终端打印结果为2（非0）\n```\n\n>其实，逻辑运算符`&&`(逻辑与运算）和`||`（逻辑或运算）就是通过判断前一个命令的返回值来判断命令是否正确执行。\n\n```bash\nls && echo yes\nls || echo no\n```","slug":"Shell学习笔记","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb9a00182ev2zaey7yzu","content":"<p>在Bash中，变量的默认类型都是字符串类型的，Shell编程中，使用变量无需事先声。<br><a id=\"more\"></a></p>\n<h3 id=\"变量的命名规范\"><a href=\"#变量的命名规范\" class=\"headerlink\" title=\"变量的命名规范\"></a>变量的命名规范</h3><p>变量名的命名须遵循如下规则：</p>\n<ul>\n<li>首个字符必须为字母（a-z，A-Z）</li>\n<li>中间不能有空格，可以使用下划线(_)</li>\n<li>不能使用标点符号</li>\n<li>不能使用bash里的关键字（可用help命令查看保留关键字）</li>\n</ul>\n<h3 id=\"变量的分类\"><a href=\"#变量的分类\" class=\"headerlink\" title=\"变量的分类\"></a>变量的分类</h3><blockquote>\n<ul>\n<li>用户自定义变量：用户可以自己定义。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>环境变量：这种变量中主要保存的是和系统操作环境相关的数据。变量可以自动一，但是对系统生效的环境变量名和变量作用是固定的。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>位置参数变量：这种变量主要是用来向脚本当中传递参数或者数据的，变量名不能自定义，变量作用是固定的。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>位置参数变量：是Bash中已经定义好的变量，变量名不能自定义，变量作用也是固定的。</li>\n</ul>\n</blockquote>\n<h4 id=\"定义变量\"><a href=\"#定义变量\" class=\"headerlink\" title=\"定义变量\"></a>定义变量</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量名=变量值  (等号 =两边不能带空格)</span><br></pre></td></tr></table></figure>\n<h4 id=\"变量调用\"><a href=\"#变量调用\" class=\"headerlink\" title=\"变量调用\"></a>变量调用</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> $变量名</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如下示例:</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$x</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$name</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"变量叠加\"><a href=\"#变量叠加\" class=\"headerlink\" title=\"变量叠加\"></a>变量叠加</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=123</span><br><span class=\"line\">x=<span class=\"string\">\"<span class=\"variable\">$x</span>\"</span>456</span><br><span class=\"line\">x=<span class=\"variable\">$&#123;x&#125;</span>789</span><br></pre></td></tr></table></figure>\n<p>最终使用<code>echo $x</code>将输出<code>123456789</code></p>\n<h4 id=\"变量查看\"><a href=\"#变量查看\" class=\"headerlink\" title=\"变量查看\"></a>变量查看</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span></span><br><span class=\"line\">    选项:</span><br><span class=\"line\">        -u 如果设定此选项，调用未声明变量时会报错（默认无任何提示）</span><br></pre></td></tr></table></figure>\n<h4 id=\"变量的删除\"><a href=\"#变量的删除\" class=\"headerlink\" title=\"变量的删除\"></a>变量的删除</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">unset</span> 变量名  （注意，此处不能加$符号）</span><br></pre></td></tr></table></figure>\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><p>环境变量和用户自定义变量的区别:</p>\n<blockquote>\n<ul>\n<li>用户自定义变量只在当前的shell中生效，环境变量在当前shell和这个shell的所有子shell中生效。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>环境变量是全局变量，用户自定义变量是局部变量。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>对系统生效的环境变量名和变量作用是固定的。</li>\n</ul>\n</blockquote>\n<h4 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> 变量名=变量值</span><br><span class=\"line\"></span><br><span class=\"line\">变量名=变量值</span><br><span class=\"line\"><span class=\"built_in\">export</span> 变量名</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看环境变量\"><a href=\"#查看环境变量\" class=\"headerlink\" title=\"查看环境变量\"></a>查看环境变量</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> <span class=\"comment\">#查看所有变量</span></span><br><span class=\"line\">env <span class=\"comment\">#查看环境变量</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"常用环境变量\"><a href=\"#常用环境变量\" class=\"headerlink\" title=\"常用环境变量\"></a>常用环境变量</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HOSTNAME：主机名</span><br><span class=\"line\">SHELL：当前的shell</span><br><span class=\"line\">TREM：终端环境</span><br><span class=\"line\">HISTSIZE：历史命令条数</span><br><span class=\"line\">SSH_CLIENT：当前操作环境是用ssh链接的，这里记录客户端的ip</span><br><span class=\"line\">SSH_TTY：ssh连接的终端是pts/1</span><br><span class=\"line\">USER:当前登录的用户</span><br></pre></td></tr></table></figure>\n<h4 id=\"PATH变量\"><a href=\"#PATH变量\" class=\"headerlink\" title=\"PATH变量\"></a>PATH变量</h4><blockquote>\n<p><code>PATH</code>变量：系统查找命令的路径。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$PATH</span>    <span class=\"comment\">#查看PATH变量的值</span></span><br><span class=\"line\">PATH=<span class=\"string\">\"<span class=\"variable\">$PATH</span>\"</span>:/root/sh    <span class=\"comment\">#增加PATH变量的值</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"PS1变量\"><a href=\"#PS1变量\" class=\"headerlink\" title=\"PS1变量\"></a>PS1变量</h4><blockquote>\n<p><code>PS1</code>变量：命令提示符设置</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- \\d 显示日期，格式为”星期 月 日“</span><br><span class=\"line\">- \\H 显示完整的主机名<span class=\"string\">\"localhost.localdomain\"</span></span><br><span class=\"line\">- \\t 显示24小时制时间，格式为<span class=\"string\">\"HH:MM:SS\"</span></span><br><span class=\"line\">- \\A 显示24小时制时间，格式为<span class=\"string\">\"HH:MM\"</span></span><br><span class=\"line\">- \\u 显示当前用户名</span><br><span class=\"line\">- \\w 显示当前所在目录的完整名称</span><br><span class=\"line\">- \\W 显示当前所在目录的最后一个目录</span><br><span class=\"line\">- \\$ 提示符、如果是root用户会显示提示符为<span class=\"string\">\"#\"</span>,如果是普通用户会显示提示符为<span class=\"string\">\"$\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"当前语系查询\"><a href=\"#当前语系查询\" class=\"headerlink\" title=\"当前语系查询\"></a>当前语系查询</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># locale    #查询当前语系</span></span><br><span class=\"line\">    -LANG    定义系统主要语系（当前生效语系）</span><br><span class=\"line\">    -LC:ALL    定义整体语系的变量（下次启动可能会生效）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$LANG</span>    <span class=\"comment\">#查看系统当前语系</span></span><br><span class=\"line\"></span><br><span class=\"line\">locale -a | more    <span class=\"comment\">#查看linux支持的所有语系</span></span><br><span class=\"line\"></span><br><span class=\"line\">cat /et/sysconfig/i18n    <span class=\"comment\">#查询系统的默认语系（开机生效读取的语系环境）</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Linux中文支持\"><a href=\"#Linux中文支持\" class=\"headerlink\" title=\"Linux中文支持\"></a>Linux中文支持</h4><blockquote>\n<p>前提条件：正确安装中文字体和中文语系。</p>\n<ul>\n<li>如果有图形界面，可以正确支持中文显示。</li>\n<li>如果使用第三方远程工具，只要语系设定正确，可以支持中文显示。</li>\n<li>如果使用纯字符界面，必须使用第三方插件（zhcon等）</li>\n</ul>\n</blockquote>\n<h3 id=\"位置参数变量\"><a href=\"#位置参数变量\" class=\"headerlink\" title=\"位置参数变量\"></a>位置参数变量</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$n</span>    n为数字，<span class=\"variable\">$0</span>代表命令本身，<span class=\"variable\">$1</span>~<span class=\"variable\">$9</span>代表第一到第九个参数，十以上的参数需要用到大括号包含，如<span class=\"variable\">$&#123;10&#125;</span>。</span><br><span class=\"line\">$*    这个变量代表命令行中所有的参数，$*把所有的参数看作是一个整体。</span><br><span class=\"line\"><span class=\"variable\">$@</span>    这个变量也代表命令行中所有的参数，不过<span class=\"variable\">$@</span>把每个参数区分呢对待。</span><br><span class=\"line\"><span class=\"variable\">$#</span>    这个变量代表命令行中所有参数的个数</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>$n 使用示例<code>sum.sh</code></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">num=<span class=\"variable\">$1</span></span><br><span class=\"line\">num2=<span class=\"variable\">$2</span></span><br><span class=\"line\">sum=$((<span class=\"variable\">$num1</span>+num2))</span><br></pre></td></tr></table></figure>\n<p>执行上述<code>sum.sh</code>脚本:</p>\n<pre><code>./sum.sh 100 200\n</code></pre><p>输出为300</p>\n<blockquote>\n<p>$* $@ $# 使用示例 <code>sum1.sh</code></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\$* 参数是: $*\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\@* 参数是: <span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\#* 参数个数是: <span class=\"variable\">$#</span>\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>$* $@ 使用示例 <code>sum2.sh</code></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">\"$*\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">\"$*\"</span></span><br><span class=\"line\">    $*中的所有参数看成是一个整体，所以这个<span class=\"keyword\">for</span>循环只会循环一次。</span><br><span class=\"line\">\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">\" The parameter is : <span class=\"variable\">$i</span>\"</span></span><br><span class=\"line\">\t<span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\">    <span class=\"variable\">$@</span>中的每个参数都看很是独立的，所有<span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>中有几个参数，就会循环几次</span><br><span class=\"line\">\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">\"Parameter : <span class=\"variable\">$y</span> \"</span></span><br><span class=\"line\">\t<span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"预定义变量\"><a href=\"#预定义变量\" class=\"headerlink\" title=\"预定义变量\"></a>预定义变量</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$? 最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值非0（具体是哪个数，由命令自己决定），则证明上一个命令执行不正确了。</span><br><span class=\"line\">$$ 当前进程的进程号（PID）</span><br><span class=\"line\">$! 后台运行的最后一个进程的进程号（PID）</span><br></pre></td></tr></table></figure>\n<p>使用示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls</span><br><span class=\"line\"><span class=\"built_in\">echo</span> $? <span class=\"comment\">#将在终端打印结果为0</span></span><br><span class=\"line\"></span><br><span class=\"line\">ls QERTYUTIYKNB</span><br><span class=\"line\"><span class=\"built_in\">echo</span> $? <span class=\"comment\">#将在终端打印结果为2（非0）</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>其实，逻辑运算符<code>&amp;&amp;</code>(逻辑与运算）和<code>||</code>（逻辑或运算）就是通过判断前一个命令的返回值来判断命令是否正确执行。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls &amp;&amp; <span class=\"built_in\">echo</span> yes</span><br><span class=\"line\">ls || <span class=\"built_in\">echo</span> no</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>在Bash中，变量的默认类型都是字符串类型的，Shell编程中，使用变量无需事先声。<br>","more":"</p>\n<h3 id=\"变量的命名规范\"><a href=\"#变量的命名规范\" class=\"headerlink\" title=\"变量的命名规范\"></a>变量的命名规范</h3><p>变量名的命名须遵循如下规则：</p>\n<ul>\n<li>首个字符必须为字母（a-z，A-Z）</li>\n<li>中间不能有空格，可以使用下划线(_)</li>\n<li>不能使用标点符号</li>\n<li>不能使用bash里的关键字（可用help命令查看保留关键字）</li>\n</ul>\n<h3 id=\"变量的分类\"><a href=\"#变量的分类\" class=\"headerlink\" title=\"变量的分类\"></a>变量的分类</h3><blockquote>\n<ul>\n<li>用户自定义变量：用户可以自己定义。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>环境变量：这种变量中主要保存的是和系统操作环境相关的数据。变量可以自动一，但是对系统生效的环境变量名和变量作用是固定的。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>位置参数变量：这种变量主要是用来向脚本当中传递参数或者数据的，变量名不能自定义，变量作用是固定的。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>位置参数变量：是Bash中已经定义好的变量，变量名不能自定义，变量作用也是固定的。</li>\n</ul>\n</blockquote>\n<h4 id=\"定义变量\"><a href=\"#定义变量\" class=\"headerlink\" title=\"定义变量\"></a>定义变量</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">变量名=变量值  (等号 =两边不能带空格)</span><br></pre></td></tr></table></figure>\n<h4 id=\"变量调用\"><a href=\"#变量调用\" class=\"headerlink\" title=\"变量调用\"></a>变量调用</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> $变量名</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如下示例:</span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$x</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$name</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"变量叠加\"><a href=\"#变量叠加\" class=\"headerlink\" title=\"变量叠加\"></a>变量叠加</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">x=123</span><br><span class=\"line\">x=<span class=\"string\">\"<span class=\"variable\">$x</span>\"</span>456</span><br><span class=\"line\">x=<span class=\"variable\">$&#123;x&#125;</span>789</span><br></pre></td></tr></table></figure>\n<p>最终使用<code>echo $x</code>将输出<code>123456789</code></p>\n<h4 id=\"变量查看\"><a href=\"#变量查看\" class=\"headerlink\" title=\"变量查看\"></a>变量查看</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span></span><br><span class=\"line\">    选项:</span><br><span class=\"line\">        -u 如果设定此选项，调用未声明变量时会报错（默认无任何提示）</span><br></pre></td></tr></table></figure>\n<h4 id=\"变量的删除\"><a href=\"#变量的删除\" class=\"headerlink\" title=\"变量的删除\"></a>变量的删除</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">unset</span> 变量名  （注意，此处不能加$符号）</span><br></pre></td></tr></table></figure>\n<h3 id=\"环境变量\"><a href=\"#环境变量\" class=\"headerlink\" title=\"环境变量\"></a>环境变量</h3><p>环境变量和用户自定义变量的区别:</p>\n<blockquote>\n<ul>\n<li>用户自定义变量只在当前的shell中生效，环境变量在当前shell和这个shell的所有子shell中生效。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>环境变量是全局变量，用户自定义变量是局部变量。</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>对系统生效的环境变量名和变量作用是固定的。</li>\n</ul>\n</blockquote>\n<h4 id=\"设置环境变量\"><a href=\"#设置环境变量\" class=\"headerlink\" title=\"设置环境变量\"></a>设置环境变量</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">export</span> 变量名=变量值</span><br><span class=\"line\"></span><br><span class=\"line\">变量名=变量值</span><br><span class=\"line\"><span class=\"built_in\">export</span> 变量名</span><br></pre></td></tr></table></figure>\n<h4 id=\"查看环境变量\"><a href=\"#查看环境变量\" class=\"headerlink\" title=\"查看环境变量\"></a>查看环境变量</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">set</span> <span class=\"comment\">#查看所有变量</span></span><br><span class=\"line\">env <span class=\"comment\">#查看环境变量</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"常用环境变量\"><a href=\"#常用环境变量\" class=\"headerlink\" title=\"常用环境变量\"></a>常用环境变量</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HOSTNAME：主机名</span><br><span class=\"line\">SHELL：当前的shell</span><br><span class=\"line\">TREM：终端环境</span><br><span class=\"line\">HISTSIZE：历史命令条数</span><br><span class=\"line\">SSH_CLIENT：当前操作环境是用ssh链接的，这里记录客户端的ip</span><br><span class=\"line\">SSH_TTY：ssh连接的终端是pts/1</span><br><span class=\"line\">USER:当前登录的用户</span><br></pre></td></tr></table></figure>\n<h4 id=\"PATH变量\"><a href=\"#PATH变量\" class=\"headerlink\" title=\"PATH变量\"></a>PATH变量</h4><blockquote>\n<p><code>PATH</code>变量：系统查找命令的路径。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$PATH</span>    <span class=\"comment\">#查看PATH变量的值</span></span><br><span class=\"line\">PATH=<span class=\"string\">\"<span class=\"variable\">$PATH</span>\"</span>:/root/sh    <span class=\"comment\">#增加PATH变量的值</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"PS1变量\"><a href=\"#PS1变量\" class=\"headerlink\" title=\"PS1变量\"></a>PS1变量</h4><blockquote>\n<p><code>PS1</code>变量：命令提示符设置</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- \\d 显示日期，格式为”星期 月 日“</span><br><span class=\"line\">- \\H 显示完整的主机名<span class=\"string\">\"localhost.localdomain\"</span></span><br><span class=\"line\">- \\t 显示24小时制时间，格式为<span class=\"string\">\"HH:MM:SS\"</span></span><br><span class=\"line\">- \\A 显示24小时制时间，格式为<span class=\"string\">\"HH:MM\"</span></span><br><span class=\"line\">- \\u 显示当前用户名</span><br><span class=\"line\">- \\w 显示当前所在目录的完整名称</span><br><span class=\"line\">- \\W 显示当前所在目录的最后一个目录</span><br><span class=\"line\">- \\$ 提示符、如果是root用户会显示提示符为<span class=\"string\">\"#\"</span>,如果是普通用户会显示提示符为<span class=\"string\">\"$\"</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"当前语系查询\"><a href=\"#当前语系查询\" class=\"headerlink\" title=\"当前语系查询\"></a>当前语系查询</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># locale    #查询当前语系</span></span><br><span class=\"line\">    -LANG    定义系统主要语系（当前生效语系）</span><br><span class=\"line\">    -LC:ALL    定义整体语系的变量（下次启动可能会生效）</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$LANG</span>    <span class=\"comment\">#查看系统当前语系</span></span><br><span class=\"line\"></span><br><span class=\"line\">locale -a | more    <span class=\"comment\">#查看linux支持的所有语系</span></span><br><span class=\"line\"></span><br><span class=\"line\">cat /et/sysconfig/i18n    <span class=\"comment\">#查询系统的默认语系（开机生效读取的语系环境）</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"Linux中文支持\"><a href=\"#Linux中文支持\" class=\"headerlink\" title=\"Linux中文支持\"></a>Linux中文支持</h4><blockquote>\n<p>前提条件：正确安装中文字体和中文语系。</p>\n<ul>\n<li>如果有图形界面，可以正确支持中文显示。</li>\n<li>如果使用第三方远程工具，只要语系设定正确，可以支持中文显示。</li>\n<li>如果使用纯字符界面，必须使用第三方插件（zhcon等）</li>\n</ul>\n</blockquote>\n<h3 id=\"位置参数变量\"><a href=\"#位置参数变量\" class=\"headerlink\" title=\"位置参数变量\"></a>位置参数变量</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$n</span>    n为数字，<span class=\"variable\">$0</span>代表命令本身，<span class=\"variable\">$1</span>~<span class=\"variable\">$9</span>代表第一到第九个参数，十以上的参数需要用到大括号包含，如<span class=\"variable\">$&#123;10&#125;</span>。</span><br><span class=\"line\">$*    这个变量代表命令行中所有的参数，$*把所有的参数看作是一个整体。</span><br><span class=\"line\"><span class=\"variable\">$@</span>    这个变量也代表命令行中所有的参数，不过<span class=\"variable\">$@</span>把每个参数区分呢对待。</span><br><span class=\"line\"><span class=\"variable\">$#</span>    这个变量代表命令行中所有参数的个数</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>$n 使用示例<code>sum.sh</code></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\">num=<span class=\"variable\">$1</span></span><br><span class=\"line\">num2=<span class=\"variable\">$2</span></span><br><span class=\"line\">sum=$((<span class=\"variable\">$num1</span>+num2))</span><br></pre></td></tr></table></figure>\n<p>执行上述<code>sum.sh</code>脚本:</p>\n<pre><code>./sum.sh 100 200\n</code></pre><p>输出为300</p>\n<blockquote>\n<p>$* $@ $# 使用示例 <code>sum1.sh</code></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\$* 参数是: $*\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\@* 参数是: <span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"string\">\"\\#* 参数个数是: <span class=\"variable\">$#</span>\"</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>$* $@ 使用示例 <code>sum2.sh</code></p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">\"$*\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#!/bin/bash</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"string\">\"$*\"</span></span><br><span class=\"line\">    $*中的所有参数看成是一个整体，所以这个<span class=\"keyword\">for</span>循环只会循环一次。</span><br><span class=\"line\">\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">\" The parameter is : <span class=\"variable\">$i</span>\"</span></span><br><span class=\"line\">\t<span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> y <span class=\"keyword\">in</span> <span class=\"string\">\"<span class=\"variable\">$@</span>\"</span></span><br><span class=\"line\">    <span class=\"variable\">$@</span>中的每个参数都看很是独立的，所有<span class=\"string\">\"<span class=\"variable\">$@</span>\"</span>中有几个参数，就会循环几次</span><br><span class=\"line\">\t<span class=\"keyword\">do</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">echo</span> <span class=\"string\">\"Parameter : <span class=\"variable\">$y</span> \"</span></span><br><span class=\"line\">\t<span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"预定义变量\"><a href=\"#预定义变量\" class=\"headerlink\" title=\"预定义变量\"></a>预定义变量</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$? 最后一次执行的命令的返回状态。如果这个变量的值为0，证明上一个命令正确执行；如果这个变量的值非0（具体是哪个数，由命令自己决定），则证明上一个命令执行不正确了。</span><br><span class=\"line\">$$ 当前进程的进程号（PID）</span><br><span class=\"line\">$! 后台运行的最后一个进程的进程号（PID）</span><br></pre></td></tr></table></figure>\n<p>使用示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls</span><br><span class=\"line\"><span class=\"built_in\">echo</span> $? <span class=\"comment\">#将在终端打印结果为0</span></span><br><span class=\"line\"></span><br><span class=\"line\">ls QERTYUTIYKNB</span><br><span class=\"line\"><span class=\"built_in\">echo</span> $? <span class=\"comment\">#将在终端打印结果为2（非0）</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>其实，逻辑运算符<code>&amp;&amp;</code>(逻辑与运算）和<code>||</code>（逻辑或运算）就是通过判断前一个命令的返回值来判断命令是否正确执行。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ls &amp;&amp; <span class=\"built_in\">echo</span> yes</span><br><span class=\"line\">ls || <span class=\"built_in\">echo</span> no</span><br></pre></td></tr></table></figure>"},{"title":"RxJava、Retrofit接收Error Response Body","isupdate":false,"date":"2016-07-02T14:10:53.000Z","updatetime":null,"_content":"\n`RxJava`配合`Retrofit`能够大大简化Android项目中的网络请求代码量，使得逻辑更清晰，当然也可能会遇到一些问题。下面给出一种问题的解决方案。\n\n\n\n### 需求\n\n一个基本的RxJava配合Retrofit以及Lambda的网络调用看起来像这个样子的:\n\n```java\n\n Subscription subscription = mApi.getSimpleApi()\n        .subscribeOn(Schedulers.io())\n        .observeOn(AndroidSchedulers.mainThread())\n        .subscribe(response -> {\n\n         //do Something\n\n        }, throwable -> {\n\n        //Ops Error\n\n        });\n\n```\n\n当`Retrofit`中的网络请求返回码状态码为`200`时，执行`do Something`中的逻辑处理正常的\n业务流程，但是当服务器返回状态码为`非200`时，将会执行`Ops Error`中的业务流程而不会\n执行`do Something`中的业务逻辑。\n\n<!-- more -->\n\n这样本没有什么问题，一般我们会在错误处理逻辑中在UI中给出错误提示，像这样:\n\n```java\nLog.e(\"Ops\", \"Error:\" + throwable.getMessage());\n```\n\n但是这样的话我们只能获取到一服务器的错误响应码以及对应的简短的响应码错误说明，一般情况下我们服务器\n都会包装错误信息为一个JSON，客户端解析错误信息必要的时候动态展示在UI上以提示用户。如果我们要拿到这样的JSON，使用`throwable.getMessage()`这样做显然是不行的。是不是使用RxJava配合Retrofit只能拿到这样的错误Throwable信息呢？\n\n显然不是的，其实服务器返回的错误信息`非200`响应码的`Response Body`JSON对象包含在这个`throwable`对象中，我们可以这样将其解析出来:\n\n```java\nthrowable -> {\n          if(throwable instanceof HttpException){\n            HttpException httpException= (HttpException) throwable;\n            try {\n              String errorBody= httpException.response().errorBody().string();\n\n\t\t//TODO: parse To JSON Obj\n\n            } catch (IOException e) {\n              e.printStackTrace();\n            }\n          }\n\t //Ops Print throwable\n\n        });\n```\n\n在`Parse to JSON Obj`中将`errorBody`解析为JSON对象进行相应的处理即可。\n\n然而，你不能让我每个地方都加上这样的一段代码吧，既然我们使用的是`RxJava`，我们可以让这种处理稍微看起来优雅点。以下以`Jackson`为例:\n\n#### 自定义Action1\n\n由于`RxJava`的错误异常处理接受一个参数，并且没有返回值，因此我们可以定义一个`Action1`来替代默认的Error Action:\n\n```java\npublic abstract class ErrorAction implements Action1<Throwable> {\n\n  @Override public void call(Throwable throwable) {\n    call(ErrorMessage.handle(throwable));\n  }\n\n  public abstract void call(ErrorMessage error);\n}\n```\n\n\n其中`ErrorMessage`为我们定义好的错误消息Model:\n\n#### 定义Throwable Handle\n\n```java\n@JsonIgnoreProperties(ignoreUnknown = true) public class ResponseError {\n  private final static int ERROR_CODE_IO_ERROR = 2072;\n  private final static int ERROR_CODE_UN_KNOW = 2073;\n  @JsonProperty(\"status_code\") public int statusCode;\n  public String message;\n\n  public void setStatusCode(int statusCode) {\n    this.statusCode = statusCode;\n  }\n\n  public void setMessage(String message) {\n    this.message = message;\n  }\n\n  public static ResponseError handle(Throwable throwable) {\n    ResponseError responseError = null;\n    if (throwable instanceof HttpException) {\n      HttpException exception = (HttpException) throwable;\n      try {\n        responseError = new ObjectMapper().readValue(exception.response().errorBody().string(),\n            ResponseError.class);\n      } catch (IOException e) {\n        responseError = new ResponseError();\n        responseError.setMessage(e.getLocalizedMessage());\n        responseError.setStatusCode(ERROR_CODE_IO_ERROR);\n      }\n    } else {\n      responseError = new ResponseError();\n      responseError.setMessage(throwable.getMessage());\n      responseError.setStatusCode(ERROR_CODE_UN_KNOW);\n    }\n    return responseError;\n  }\n}\n```\n\n这样，我们就完成了一个自定义`Action1`了，接下来我们便可以这样使用了:\n\n```java\n\nSubscription subscription = mApi.getSimpleApi()\n        .subscribeOn(Schedulers.io())\n        .observeOn(AndroidSchedulers.mainThread())\n        .subscribe(response -> {\n\n         //do Something\n\n        },  new ErrorAction() {\n              @Override public void call(ErrorMessage msg) {\n\t\t\t//Do Error               \n\n              }\n            });\n```\n\n其中在`Do Error`中拿到`ErrorMessage`对象，进行相应的对象操作即可~\n\nEnjoy IT!\n\n\n\n\n\n","source":"_posts/RxJava配合Retofit接收错误body.md","raw":"title: RxJava、Retrofit接收Error Response Body\nisupdate: false\ndate: 2016-07-02 22:10:53\nupdatetime:\ntags: \n - Android\n - Android Studio\n - RxJava\n - Retrofit\ncategories: Android\n---\n\n`RxJava`配合`Retrofit`能够大大简化Android项目中的网络请求代码量，使得逻辑更清晰，当然也可能会遇到一些问题。下面给出一种问题的解决方案。\n\n\n\n### 需求\n\n一个基本的RxJava配合Retrofit以及Lambda的网络调用看起来像这个样子的:\n\n```java\n\n Subscription subscription = mApi.getSimpleApi()\n        .subscribeOn(Schedulers.io())\n        .observeOn(AndroidSchedulers.mainThread())\n        .subscribe(response -> {\n\n         //do Something\n\n        }, throwable -> {\n\n        //Ops Error\n\n        });\n\n```\n\n当`Retrofit`中的网络请求返回码状态码为`200`时，执行`do Something`中的逻辑处理正常的\n业务流程，但是当服务器返回状态码为`非200`时，将会执行`Ops Error`中的业务流程而不会\n执行`do Something`中的业务逻辑。\n\n<!-- more -->\n\n这样本没有什么问题，一般我们会在错误处理逻辑中在UI中给出错误提示，像这样:\n\n```java\nLog.e(\"Ops\", \"Error:\" + throwable.getMessage());\n```\n\n但是这样的话我们只能获取到一服务器的错误响应码以及对应的简短的响应码错误说明，一般情况下我们服务器\n都会包装错误信息为一个JSON，客户端解析错误信息必要的时候动态展示在UI上以提示用户。如果我们要拿到这样的JSON，使用`throwable.getMessage()`这样做显然是不行的。是不是使用RxJava配合Retrofit只能拿到这样的错误Throwable信息呢？\n\n显然不是的，其实服务器返回的错误信息`非200`响应码的`Response Body`JSON对象包含在这个`throwable`对象中，我们可以这样将其解析出来:\n\n```java\nthrowable -> {\n          if(throwable instanceof HttpException){\n            HttpException httpException= (HttpException) throwable;\n            try {\n              String errorBody= httpException.response().errorBody().string();\n\n\t\t//TODO: parse To JSON Obj\n\n            } catch (IOException e) {\n              e.printStackTrace();\n            }\n          }\n\t //Ops Print throwable\n\n        });\n```\n\n在`Parse to JSON Obj`中将`errorBody`解析为JSON对象进行相应的处理即可。\n\n然而，你不能让我每个地方都加上这样的一段代码吧，既然我们使用的是`RxJava`，我们可以让这种处理稍微看起来优雅点。以下以`Jackson`为例:\n\n#### 自定义Action1\n\n由于`RxJava`的错误异常处理接受一个参数，并且没有返回值，因此我们可以定义一个`Action1`来替代默认的Error Action:\n\n```java\npublic abstract class ErrorAction implements Action1<Throwable> {\n\n  @Override public void call(Throwable throwable) {\n    call(ErrorMessage.handle(throwable));\n  }\n\n  public abstract void call(ErrorMessage error);\n}\n```\n\n\n其中`ErrorMessage`为我们定义好的错误消息Model:\n\n#### 定义Throwable Handle\n\n```java\n@JsonIgnoreProperties(ignoreUnknown = true) public class ResponseError {\n  private final static int ERROR_CODE_IO_ERROR = 2072;\n  private final static int ERROR_CODE_UN_KNOW = 2073;\n  @JsonProperty(\"status_code\") public int statusCode;\n  public String message;\n\n  public void setStatusCode(int statusCode) {\n    this.statusCode = statusCode;\n  }\n\n  public void setMessage(String message) {\n    this.message = message;\n  }\n\n  public static ResponseError handle(Throwable throwable) {\n    ResponseError responseError = null;\n    if (throwable instanceof HttpException) {\n      HttpException exception = (HttpException) throwable;\n      try {\n        responseError = new ObjectMapper().readValue(exception.response().errorBody().string(),\n            ResponseError.class);\n      } catch (IOException e) {\n        responseError = new ResponseError();\n        responseError.setMessage(e.getLocalizedMessage());\n        responseError.setStatusCode(ERROR_CODE_IO_ERROR);\n      }\n    } else {\n      responseError = new ResponseError();\n      responseError.setMessage(throwable.getMessage());\n      responseError.setStatusCode(ERROR_CODE_UN_KNOW);\n    }\n    return responseError;\n  }\n}\n```\n\n这样，我们就完成了一个自定义`Action1`了，接下来我们便可以这样使用了:\n\n```java\n\nSubscription subscription = mApi.getSimpleApi()\n        .subscribeOn(Schedulers.io())\n        .observeOn(AndroidSchedulers.mainThread())\n        .subscribe(response -> {\n\n         //do Something\n\n        },  new ErrorAction() {\n              @Override public void call(ErrorMessage msg) {\n\t\t\t//Do Error               \n\n              }\n            });\n```\n\n其中在`Do Error`中拿到`ErrorMessage`对象，进行相应的对象操作即可~\n\nEnjoy IT!\n\n\n\n\n\n","slug":"RxJava配合Retofit接收错误body","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb9c001b2ev2z91lv0lc","content":"<p><code>RxJava</code>配合<code>Retrofit</code>能够大大简化Android项目中的网络请求代码量，使得逻辑更清晰，当然也可能会遇到一些问题。下面给出一种问题的解决方案。</p>\n<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>一个基本的RxJava配合Retrofit以及Lambda的网络调用看起来像这个样子的:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Subscription subscription = mApi.getSimpleApi()</span><br><span class=\"line\">       .subscribeOn(Schedulers.io())</span><br><span class=\"line\">       .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">       .subscribe(response -&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//do Something</span></span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;, throwable -&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//Ops Error</span></span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;);</span><br></pre></td></tr></table></figure>\n<p>当<code>Retrofit</code>中的网络请求返回码状态码为<code>200</code>时，执行<code>do Something</code>中的逻辑处理正常的<br>业务流程，但是当服务器返回状态码为<code>非200</code>时，将会执行<code>Ops Error</code>中的业务流程而不会<br>执行<code>do Something</code>中的业务逻辑。</p>\n<a id=\"more\"></a>\n<p>这样本没有什么问题，一般我们会在错误处理逻辑中在UI中给出错误提示，像这样:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Log.e(<span class=\"string\">\"Ops\"</span>, <span class=\"string\">\"Error:\"</span> + throwable.getMessage());</span><br></pre></td></tr></table></figure>\n<p>但是这样的话我们只能获取到一服务器的错误响应码以及对应的简短的响应码错误说明，一般情况下我们服务器<br>都会包装错误信息为一个JSON，客户端解析错误信息必要的时候动态展示在UI上以提示用户。如果我们要拿到这样的JSON，使用<code>throwable.getMessage()</code>这样做显然是不行的。是不是使用RxJava配合Retrofit只能拿到这样的错误Throwable信息呢？</p>\n<p>显然不是的，其实服务器返回的错误信息<code>非200</code>响应码的<code>Response Body</code>JSON对象包含在这个<code>throwable</code>对象中，我们可以这样将其解析出来:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">throwable -&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(throwable <span class=\"keyword\">instanceof</span> HttpException)&#123;</span><br><span class=\"line\">            HttpException httpException= (HttpException) throwable;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              String errorBody= httpException.response().errorBody().string();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//<span class=\"doctag\">TODO:</span> parse To JSON Obj</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">              e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">\t <span class=\"comment\">//Ops Print throwable</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<p>在<code>Parse to JSON Obj</code>中将<code>errorBody</code>解析为JSON对象进行相应的处理即可。</p>\n<p>然而，你不能让我每个地方都加上这样的一段代码吧，既然我们使用的是<code>RxJava</code>，我们可以让这种处理稍微看起来优雅点。以下以<code>Jackson</code>为例:</p>\n<h4 id=\"自定义Action1\"><a href=\"#自定义Action1\" class=\"headerlink\" title=\"自定义Action1\"></a>自定义Action1</h4><p>由于<code>RxJava</code>的错误异常处理接受一个参数，并且没有返回值，因此我们可以定义一个<code>Action1</code>来替代默认的Error Action:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ErrorAction</span> <span class=\"keyword\">implements</span> <span class=\"title\">Action1</span>&lt;<span class=\"title\">Throwable</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Throwable throwable)</span> </span>&#123;</span><br><span class=\"line\">    call(ErrorMessage.handle(throwable));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(ErrorMessage error)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中<code>ErrorMessage</code>为我们定义好的错误消息Model:</p>\n<h4 id=\"定义Throwable-Handle\"><a href=\"#定义Throwable-Handle\" class=\"headerlink\" title=\"定义Throwable Handle\"></a>定义Throwable Handle</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonIgnoreProperties</span>(ignoreUnknown = <span class=\"keyword\">true</span>) <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResponseError</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ERROR_CODE_IO_ERROR = <span class=\"number\">2072</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ERROR_CODE_UN_KNOW = <span class=\"number\">2073</span>;</span><br><span class=\"line\">  <span class=\"meta\">@JsonProperty</span>(<span class=\"string\">\"status_code\"</span>) <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> statusCode;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> String message;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStatusCode</span><span class=\"params\">(<span class=\"keyword\">int</span> statusCode)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.statusCode = statusCode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMessage</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.message = message;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ResponseError <span class=\"title\">handle</span><span class=\"params\">(Throwable throwable)</span> </span>&#123;</span><br><span class=\"line\">    ResponseError responseError = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (throwable <span class=\"keyword\">instanceof</span> HttpException) &#123;</span><br><span class=\"line\">      HttpException exception = (HttpException) throwable;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        responseError = <span class=\"keyword\">new</span> ObjectMapper().readValue(exception.response().errorBody().string(),</span><br><span class=\"line\">            ResponseError.class);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        responseError = <span class=\"keyword\">new</span> ResponseError();</span><br><span class=\"line\">        responseError.setMessage(e.getLocalizedMessage());</span><br><span class=\"line\">        responseError.setStatusCode(ERROR_CODE_IO_ERROR);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      responseError = <span class=\"keyword\">new</span> ResponseError();</span><br><span class=\"line\">      responseError.setMessage(throwable.getMessage());</span><br><span class=\"line\">      responseError.setStatusCode(ERROR_CODE_UN_KNOW);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> responseError;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，我们就完成了一个自定义<code>Action1</code>了，接下来我们便可以这样使用了:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Subscription subscription = mApi.getSimpleApi()</span><br><span class=\"line\">        .subscribeOn(Schedulers.io())</span><br><span class=\"line\">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">        .subscribe(response -&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">//do Something</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;,  <span class=\"keyword\">new</span> ErrorAction() &#123;</span><br><span class=\"line\">              <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(ErrorMessage msg)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//Do Error               </span></span><br><span class=\"line\"></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;);</span><br></pre></td></tr></table></figure>\n<p>其中在<code>Do Error</code>中拿到<code>ErrorMessage</code>对象，进行相应的对象操作即可~</p>\n<p>Enjoy IT!</p>\n","site":{"data":{}},"excerpt":"<p><code>RxJava</code>配合<code>Retrofit</code>能够大大简化Android项目中的网络请求代码量，使得逻辑更清晰，当然也可能会遇到一些问题。下面给出一种问题的解决方案。</p>\n<h3 id=\"需求\"><a href=\"#需求\" class=\"headerlink\" title=\"需求\"></a>需求</h3><p>一个基本的RxJava配合Retrofit以及Lambda的网络调用看起来像这个样子的:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Subscription subscription = mApi.getSimpleApi()</span><br><span class=\"line\">       .subscribeOn(Schedulers.io())</span><br><span class=\"line\">       .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">       .subscribe(response -&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//do Something</span></span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;, throwable -&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">//Ops Error</span></span><br><span class=\"line\"></span><br><span class=\"line\">       &#125;);</span><br></pre></td></tr></table></figure>\n<p>当<code>Retrofit</code>中的网络请求返回码状态码为<code>200</code>时，执行<code>do Something</code>中的逻辑处理正常的<br>业务流程，但是当服务器返回状态码为<code>非200</code>时，将会执行<code>Ops Error</code>中的业务流程而不会<br>执行<code>do Something</code>中的业务逻辑。</p>","more":"<p>这样本没有什么问题，一般我们会在错误处理逻辑中在UI中给出错误提示，像这样:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Log.e(<span class=\"string\">\"Ops\"</span>, <span class=\"string\">\"Error:\"</span> + throwable.getMessage());</span><br></pre></td></tr></table></figure>\n<p>但是这样的话我们只能获取到一服务器的错误响应码以及对应的简短的响应码错误说明，一般情况下我们服务器<br>都会包装错误信息为一个JSON，客户端解析错误信息必要的时候动态展示在UI上以提示用户。如果我们要拿到这样的JSON，使用<code>throwable.getMessage()</code>这样做显然是不行的。是不是使用RxJava配合Retrofit只能拿到这样的错误Throwable信息呢？</p>\n<p>显然不是的，其实服务器返回的错误信息<code>非200</code>响应码的<code>Response Body</code>JSON对象包含在这个<code>throwable</code>对象中，我们可以这样将其解析出来:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">throwable -&gt; &#123;</span><br><span class=\"line\">          <span class=\"keyword\">if</span>(throwable <span class=\"keyword\">instanceof</span> HttpException)&#123;</span><br><span class=\"line\">            HttpException httpException= (HttpException) throwable;</span><br><span class=\"line\">            <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">              String errorBody= httpException.response().errorBody().string();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t<span class=\"comment\">//<span class=\"doctag\">TODO:</span> parse To JSON Obj</span></span><br><span class=\"line\"></span><br><span class=\"line\">            &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">              e.printStackTrace();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">\t <span class=\"comment\">//Ops Print throwable</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n<p>在<code>Parse to JSON Obj</code>中将<code>errorBody</code>解析为JSON对象进行相应的处理即可。</p>\n<p>然而，你不能让我每个地方都加上这样的一段代码吧，既然我们使用的是<code>RxJava</code>，我们可以让这种处理稍微看起来优雅点。以下以<code>Jackson</code>为例:</p>\n<h4 id=\"自定义Action1\"><a href=\"#自定义Action1\" class=\"headerlink\" title=\"自定义Action1\"></a>自定义Action1</h4><p>由于<code>RxJava</code>的错误异常处理接受一个参数，并且没有返回值，因此我们可以定义一个<code>Action1</code>来替代默认的Error Action:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ErrorAction</span> <span class=\"keyword\">implements</span> <span class=\"title\">Action1</span>&lt;<span class=\"title\">Throwable</span>&gt; </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(Throwable throwable)</span> </span>&#123;</span><br><span class=\"line\">    call(ErrorMessage.handle(throwable));</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">abstract</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(ErrorMessage error)</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中<code>ErrorMessage</code>为我们定义好的错误消息Model:</p>\n<h4 id=\"定义Throwable-Handle\"><a href=\"#定义Throwable-Handle\" class=\"headerlink\" title=\"定义Throwable Handle\"></a>定义Throwable Handle</h4><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@JsonIgnoreProperties</span>(ignoreUnknown = <span class=\"keyword\">true</span>) <span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ResponseError</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ERROR_CODE_IO_ERROR = <span class=\"number\">2072</span>;</span><br><span class=\"line\">  <span class=\"keyword\">private</span> <span class=\"keyword\">final</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> ERROR_CODE_UN_KNOW = <span class=\"number\">2073</span>;</span><br><span class=\"line\">  <span class=\"meta\">@JsonProperty</span>(<span class=\"string\">\"status_code\"</span>) <span class=\"keyword\">public</span> <span class=\"keyword\">int</span> statusCode;</span><br><span class=\"line\">  <span class=\"keyword\">public</span> String message;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setStatusCode</span><span class=\"params\">(<span class=\"keyword\">int</span> statusCode)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.statusCode = statusCode;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">setMessage</span><span class=\"params\">(String message)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.message = message;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> ResponseError <span class=\"title\">handle</span><span class=\"params\">(Throwable throwable)</span> </span>&#123;</span><br><span class=\"line\">    ResponseError responseError = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (throwable <span class=\"keyword\">instanceof</span> HttpException) &#123;</span><br><span class=\"line\">      HttpException exception = (HttpException) throwable;</span><br><span class=\"line\">      <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">        responseError = <span class=\"keyword\">new</span> ObjectMapper().readValue(exception.response().errorBody().string(),</span><br><span class=\"line\">            ResponseError.class);</span><br><span class=\"line\">      &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">        responseError = <span class=\"keyword\">new</span> ResponseError();</span><br><span class=\"line\">        responseError.setMessage(e.getLocalizedMessage());</span><br><span class=\"line\">        responseError.setStatusCode(ERROR_CODE_IO_ERROR);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      responseError = <span class=\"keyword\">new</span> ResponseError();</span><br><span class=\"line\">      responseError.setMessage(throwable.getMessage());</span><br><span class=\"line\">      responseError.setStatusCode(ERROR_CODE_UN_KNOW);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> responseError;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>这样，我们就完成了一个自定义<code>Action1</code>了，接下来我们便可以这样使用了:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Subscription subscription = mApi.getSimpleApi()</span><br><span class=\"line\">        .subscribeOn(Schedulers.io())</span><br><span class=\"line\">        .observeOn(AndroidSchedulers.mainThread())</span><br><span class=\"line\">        .subscribe(response -&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">         <span class=\"comment\">//do Something</span></span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;,  <span class=\"keyword\">new</span> ErrorAction() &#123;</span><br><span class=\"line\">              <span class=\"meta\">@Override</span> <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">call</span><span class=\"params\">(ErrorMessage msg)</span> </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">//Do Error               </span></span><br><span class=\"line\"></span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;);</span><br></pre></td></tr></table></figure>\n<p>其中在<code>Do Error</code>中拿到<code>ErrorMessage</code>对象，进行相应的对象操作即可~</p>\n<p>Enjoy IT!</p>"},{"title":"Spring Boot使用SpringFox自动生成Api Doc","date":"2017-06-30T02:56:01.000Z","_content":"\n{% note info %}在做Android开发的时候，对于Api接口的对接有着深刻的体会：后端通过Markdown或者Word写好Api文档，然后通过类似Samba或者Dropbox这样的服务与移动端实现文档共享。有的时候因为接口出了问题，中间还得来回修改对接，效率低下不说，要是后端手抖写错参数而没有意识到，移动端埋头一顿调试。。。说多了都是泪。{%endnote%}\n\n为了避免同时维护代码和文档来保持两者之间的同步而带来的额外负担，同事推荐了[`ApiDoc`](http://apidocjs.com/)来生成文档，虽然生成的文档界面比较清爽然而前提是必须得按照规定的语法写上详细的注释，才能生成对应的文档，虽然写注释本身是一件好事，不过有能够自动生成的方法为啥不使用呢?\n\n<!--more-->\n\n-----------\n\n与`Apidoc`类似，`Swagger`也是一个用来文档化Resetful Api的项目，不过开源社区的支持应该是所有类似项目中最为完善的，因此除了可以使用[Swagger Editor](https://github.com/swagger-api/swagger-editor)来编写Api文档之外，你还可以使用其它对应的自动化生成工具，以此来避免同时维护文档和代码的麻烦：\n\n- [Springfox](https://github.com/springfox/springfox) 是为Spring而打造的自动化生成接口文档的其中一个Java实现\n- [Django Reset Swagger](https://github.com/marcgibbons/django-rest-swagger) 则是为Django而打造的Python实现。\n\n这篇文章将从头创建一个Spring Boot项目并使用Springfox来生成对应的接口文档，来说明使用Springfox是多么的简单。首先创建Spring Boot项目：\n\n\n\n### 创建Spring Boot项目\n\n#### Eclipse\n\n如果你是使用Eclipse的话，那么：\n\n![](https://camo.githubusercontent.com/8caa3693b4268c095c001089313d687f647d551a/687474703a2f2f696d67322e77696b69612e6e6f636f6f6b69652e6e65742f5f5f636232303133303831393134323932382f6361726466696768742f696d616765732f7468756d622f352f35352f476f2d686f6d652d796f7572652d6472756e6b2e6a70672f35303070782d476f2d686f6d652d796f7572652d6472756e6b2e6a7067)\n\n#### IntelliJ IDEA\n\n我们使用IDEA的`Spring initializr`向导来简化初始化创建项目，如图所示：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fh3qqzjjr9j21gu0w4td1.jpg)\n\n点击下一步根据个人的喜好来配置喜欢的JVM语言和构建工具，此处我选择`Kotlin`和`Gradle`，一切都是为了爽：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fh3qv1abohj21gu0w4jum.jpg)\n\n点击下一步选择需要集成的依赖项，此处我们简单演示下Resetful Api文档生成，所以选择Web即可，如图：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fh45g74sdaj21gu0w4agg.jpg)\n\n点击Next直至完成。这样，我们就完成了Spring Boot项目的创建了。\n\n-------------\n\n### 添加Springfox依赖\n\n编辑根目录下的`build.gradle`文件，修改以下内容：\n\n```groovy\ndependencies {\n    .... /*some depends...*/\n    compile \"io.springfox:springfox-swagger2:$springfoxVersion\"\n    compile \"io.springfox:springfox-swagger-ui:$springfoxVersion\"\n\n}\n\next {\n    springfoxVersion = '2.7.0'\n}\n\n```\n\n### 配置Springfox\n\nSpringfox通过`Docket`对象来定义生成的Api的一些属性，因此我们来创建一个Configure类来专门做Springfox的配置。创建一个`Swagger2Configure.kt`文件，并添加以下内容：\n\n```kotlin\n@Configuration\n@EnableSwagger2\nclass Swagger2Configure {\n\n    @Bean fun petApi(): Docket {\n        return Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(generateApiInfo()) /*定制swagger ui显示的版本信息*/\n                .useDefaultResponseMessages(false)\n                .select()\n                /*移除默认的Error Controller*/\n                .apis(Predicates.not(RequestHandlerSelectors.basePackage(\"org.springframework.boot\")))\n                .paths(PathSelectors.any())\n                .build()\n    }\n\n    private fun generateApiInfo(): ApiInfo {\n        return ApiInfoBuilder().title(\"Spring Boot Api Doc\")\n                .contact(Contact(\"Doublemine\", \"https://notes.wanghao.work\", \"doublemine.w@gmail.com\"))\n                .description(\"This is a sample api doc description\")\n                .build()\n    }\n\n}\n```\n\n上述示例只演示了最基本的配置，如果想查看完整的示例解释，请移步[Configuration explained](http://springfox.github.io/springfox/docs/current/#configuration-explained),至此，Springfox的配置就完成了。就是这么简单。\n\n---------------\n\n### 创建接口\n\n我们创建一个简单的UserController来模拟获取用户信息，`UserController.kt`：\n\n```kotlin\n@RequestMapping(\"/user/\")\n@RestController\nopen class UserController : BaseController() {\n    @RequestMapping(value = \"/info/{id}\", method = arrayOf(RequestMethod.GET))\n    fun getUserInfoById(@PathVariable id: Int): User {\n        return User(id, \"小白\", 35)\n    }\n}\n```\n\n对应的Model`User.kt`:\n\n```kotlin\ndata class User(val id: Int, var name: String, var age: Int)\n```\n\n至此就完成了简单的接口，接着我们启动项目并访问http://localhost:8080/swagger-ui.html ，一切正常的话，你将会看到以下页面：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fh4gacpr8wj21sk0su0wr.jpg)\n\n一般来说这样已经能够满足我们的基本需要了，如果还需要更为详细的文档，Springfox也提供的注解来简化配置过程，我们接下来稍微修改下`UserController.kt`：\n\n```kotlin\n@Api(tags = arrayOf(\"用户信息\"))\n@RequestMapping(\"/user/\")\n@RestController\nopen class UserController : BaseController() {\n    @ApiOperation(\"获取用户信息\", notes = \"根据用户Id在来查询用户信息\")\n    @RequestMapping(value = \"/info/{id}\", method = arrayOf(RequestMethod.GET))\n    fun getUserInfoById(@PathVariable id: Int): User {\n        return User(id, \"小白\", 35)\n    }\n}\n```\n\n我们重启项目查看下：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fh4gfu3btij21qo0qi786.jpg)\n\n可以发现文档添加了对应的中文，要查看全部可用的注解以及其作用，请移步官方文档：\n\n- [ Support for documentation from property file lookup](http://springfox.github.io/springfox/docs/current/#support-for-documentation-from-property-file-lookup)\n- [Swagger-Core Annotations](https://github.com/swagger-api/swagger-core/wiki/Annotations-1.5.X)\n\n简单集成使用到这里👌咯，后续再写一写生成静态文档相关的内容吧。Just for Fun！","source":"_posts/Spring-Boot使用Swagger自动生成Api-Doc.md","raw":"---\ntitle: Spring Boot使用SpringFox自动生成Api Doc\ndate: 2017-06-30 10:56:01\ntags: \n - Swagger\n - Spring Boot\n - Gradle\n - Kotlin\n---\n\n{% note info %}在做Android开发的时候，对于Api接口的对接有着深刻的体会：后端通过Markdown或者Word写好Api文档，然后通过类似Samba或者Dropbox这样的服务与移动端实现文档共享。有的时候因为接口出了问题，中间还得来回修改对接，效率低下不说，要是后端手抖写错参数而没有意识到，移动端埋头一顿调试。。。说多了都是泪。{%endnote%}\n\n为了避免同时维护代码和文档来保持两者之间的同步而带来的额外负担，同事推荐了[`ApiDoc`](http://apidocjs.com/)来生成文档，虽然生成的文档界面比较清爽然而前提是必须得按照规定的语法写上详细的注释，才能生成对应的文档，虽然写注释本身是一件好事，不过有能够自动生成的方法为啥不使用呢?\n\n<!--more-->\n\n-----------\n\n与`Apidoc`类似，`Swagger`也是一个用来文档化Resetful Api的项目，不过开源社区的支持应该是所有类似项目中最为完善的，因此除了可以使用[Swagger Editor](https://github.com/swagger-api/swagger-editor)来编写Api文档之外，你还可以使用其它对应的自动化生成工具，以此来避免同时维护文档和代码的麻烦：\n\n- [Springfox](https://github.com/springfox/springfox) 是为Spring而打造的自动化生成接口文档的其中一个Java实现\n- [Django Reset Swagger](https://github.com/marcgibbons/django-rest-swagger) 则是为Django而打造的Python实现。\n\n这篇文章将从头创建一个Spring Boot项目并使用Springfox来生成对应的接口文档，来说明使用Springfox是多么的简单。首先创建Spring Boot项目：\n\n\n\n### 创建Spring Boot项目\n\n#### Eclipse\n\n如果你是使用Eclipse的话，那么：\n\n![](https://camo.githubusercontent.com/8caa3693b4268c095c001089313d687f647d551a/687474703a2f2f696d67322e77696b69612e6e6f636f6f6b69652e6e65742f5f5f636232303133303831393134323932382f6361726466696768742f696d616765732f7468756d622f352f35352f476f2d686f6d652d796f7572652d6472756e6b2e6a70672f35303070782d476f2d686f6d652d796f7572652d6472756e6b2e6a7067)\n\n#### IntelliJ IDEA\n\n我们使用IDEA的`Spring initializr`向导来简化初始化创建项目，如图所示：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fh3qqzjjr9j21gu0w4td1.jpg)\n\n点击下一步根据个人的喜好来配置喜欢的JVM语言和构建工具，此处我选择`Kotlin`和`Gradle`，一切都是为了爽：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fh3qv1abohj21gu0w4jum.jpg)\n\n点击下一步选择需要集成的依赖项，此处我们简单演示下Resetful Api文档生成，所以选择Web即可，如图：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fh45g74sdaj21gu0w4agg.jpg)\n\n点击Next直至完成。这样，我们就完成了Spring Boot项目的创建了。\n\n-------------\n\n### 添加Springfox依赖\n\n编辑根目录下的`build.gradle`文件，修改以下内容：\n\n```groovy\ndependencies {\n    .... /*some depends...*/\n    compile \"io.springfox:springfox-swagger2:$springfoxVersion\"\n    compile \"io.springfox:springfox-swagger-ui:$springfoxVersion\"\n\n}\n\next {\n    springfoxVersion = '2.7.0'\n}\n\n```\n\n### 配置Springfox\n\nSpringfox通过`Docket`对象来定义生成的Api的一些属性，因此我们来创建一个Configure类来专门做Springfox的配置。创建一个`Swagger2Configure.kt`文件，并添加以下内容：\n\n```kotlin\n@Configuration\n@EnableSwagger2\nclass Swagger2Configure {\n\n    @Bean fun petApi(): Docket {\n        return Docket(DocumentationType.SWAGGER_2)\n                .apiInfo(generateApiInfo()) /*定制swagger ui显示的版本信息*/\n                .useDefaultResponseMessages(false)\n                .select()\n                /*移除默认的Error Controller*/\n                .apis(Predicates.not(RequestHandlerSelectors.basePackage(\"org.springframework.boot\")))\n                .paths(PathSelectors.any())\n                .build()\n    }\n\n    private fun generateApiInfo(): ApiInfo {\n        return ApiInfoBuilder().title(\"Spring Boot Api Doc\")\n                .contact(Contact(\"Doublemine\", \"https://notes.wanghao.work\", \"doublemine.w@gmail.com\"))\n                .description(\"This is a sample api doc description\")\n                .build()\n    }\n\n}\n```\n\n上述示例只演示了最基本的配置，如果想查看完整的示例解释，请移步[Configuration explained](http://springfox.github.io/springfox/docs/current/#configuration-explained),至此，Springfox的配置就完成了。就是这么简单。\n\n---------------\n\n### 创建接口\n\n我们创建一个简单的UserController来模拟获取用户信息，`UserController.kt`：\n\n```kotlin\n@RequestMapping(\"/user/\")\n@RestController\nopen class UserController : BaseController() {\n    @RequestMapping(value = \"/info/{id}\", method = arrayOf(RequestMethod.GET))\n    fun getUserInfoById(@PathVariable id: Int): User {\n        return User(id, \"小白\", 35)\n    }\n}\n```\n\n对应的Model`User.kt`:\n\n```kotlin\ndata class User(val id: Int, var name: String, var age: Int)\n```\n\n至此就完成了简单的接口，接着我们启动项目并访问http://localhost:8080/swagger-ui.html ，一切正常的话，你将会看到以下页面：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fh4gacpr8wj21sk0su0wr.jpg)\n\n一般来说这样已经能够满足我们的基本需要了，如果还需要更为详细的文档，Springfox也提供的注解来简化配置过程，我们接下来稍微修改下`UserController.kt`：\n\n```kotlin\n@Api(tags = arrayOf(\"用户信息\"))\n@RequestMapping(\"/user/\")\n@RestController\nopen class UserController : BaseController() {\n    @ApiOperation(\"获取用户信息\", notes = \"根据用户Id在来查询用户信息\")\n    @RequestMapping(value = \"/info/{id}\", method = arrayOf(RequestMethod.GET))\n    fun getUserInfoById(@PathVariable id: Int): User {\n        return User(id, \"小白\", 35)\n    }\n}\n```\n\n我们重启项目查看下：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fh4gfu3btij21qo0qi786.jpg)\n\n可以发现文档添加了对应的中文，要查看全部可用的注解以及其作用，请移步官方文档：\n\n- [ Support for documentation from property file lookup](http://springfox.github.io/springfox/docs/current/#support-for-documentation-from-property-file-lookup)\n- [Swagger-Core Annotations](https://github.com/swagger-api/swagger-core/wiki/Annotations-1.5.X)\n\n简单集成使用到这里👌咯，后续再写一写生成静态文档相关的内容吧。Just for Fun！","slug":"Spring-Boot使用Swagger自动生成Api-Doc","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb9d001f2ev20v3rszkr","content":"<div class=\"note info\"><p>在做Android开发的时候，对于Api接口的对接有着深刻的体会：后端通过Markdown或者Word写好Api文档，然后通过类似Samba或者Dropbox这样的服务与移动端实现文档共享。有的时候因为接口出了问题，中间还得来回修改对接，效率低下不说，要是后端手抖写错参数而没有意识到，移动端埋头一顿调试。。。说多了都是泪。</p></div>\n<p>为了避免同时维护代码和文档来保持两者之间的同步而带来的额外负担，同事推荐了<a href=\"http://apidocjs.com/\" target=\"_blank\" rel=\"noopener\"><code>ApiDoc</code></a>来生成文档，虽然生成的文档界面比较清爽然而前提是必须得按照规定的语法写上详细的注释，才能生成对应的文档，虽然写注释本身是一件好事，不过有能够自动生成的方法为啥不使用呢?</p>\n<a id=\"more\"></a>\n<hr>\n<p>与<code>Apidoc</code>类似，<code>Swagger</code>也是一个用来文档化Resetful Api的项目，不过开源社区的支持应该是所有类似项目中最为完善的，因此除了可以使用<a href=\"https://github.com/swagger-api/swagger-editor\" target=\"_blank\" rel=\"noopener\">Swagger Editor</a>来编写Api文档之外，你还可以使用其它对应的自动化生成工具，以此来避免同时维护文档和代码的麻烦：</p>\n<ul>\n<li><a href=\"https://github.com/springfox/springfox\" target=\"_blank\" rel=\"noopener\">Springfox</a> 是为Spring而打造的自动化生成接口文档的其中一个Java实现</li>\n<li><a href=\"https://github.com/marcgibbons/django-rest-swagger\" target=\"_blank\" rel=\"noopener\">Django Reset Swagger</a> 则是为Django而打造的Python实现。</li>\n</ul>\n<p>这篇文章将从头创建一个Spring Boot项目并使用Springfox来生成对应的接口文档，来说明使用Springfox是多么的简单。首先创建Spring Boot项目：</p>\n<h3 id=\"创建Spring-Boot项目\"><a href=\"#创建Spring-Boot项目\" class=\"headerlink\" title=\"创建Spring Boot项目\"></a>创建Spring Boot项目</h3><h4 id=\"Eclipse\"><a href=\"#Eclipse\" class=\"headerlink\" title=\"Eclipse\"></a>Eclipse</h4><p>如果你是使用Eclipse的话，那么：</p>\n<p><img src=\"https://camo.githubusercontent.com/8caa3693b4268c095c001089313d687f647d551a/687474703a2f2f696d67322e77696b69612e6e6f636f6f6b69652e6e65742f5f5f636232303133303831393134323932382f6361726466696768742f696d616765732f7468756d622f352f35352f476f2d686f6d652d796f7572652d6472756e6b2e6a70672f35303070782d476f2d686f6d652d796f7572652d6472756e6b2e6a7067\" alt></p>\n<h4 id=\"IntelliJ-IDEA\"><a href=\"#IntelliJ-IDEA\" class=\"headerlink\" title=\"IntelliJ IDEA\"></a>IntelliJ IDEA</h4><p>我们使用IDEA的<code>Spring initializr</code>向导来简化初始化创建项目，如图所示：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fh3qqzjjr9j21gu0w4td1.jpg\" alt></p>\n<p>点击下一步根据个人的喜好来配置喜欢的JVM语言和构建工具，此处我选择<code>Kotlin</code>和<code>Gradle</code>，一切都是为了爽：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fh3qv1abohj21gu0w4jum.jpg\" alt></p>\n<p>点击下一步选择需要集成的依赖项，此处我们简单演示下Resetful Api文档生成，所以选择Web即可，如图：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fh45g74sdaj21gu0w4agg.jpg\" alt></p>\n<p>点击Next直至完成。这样，我们就完成了Spring Boot项目的创建了。</p>\n<hr>\n<h3 id=\"添加Springfox依赖\"><a href=\"#添加Springfox依赖\" class=\"headerlink\" title=\"添加Springfox依赖\"></a>添加Springfox依赖</h3><p>编辑根目录下的<code>build.gradle</code>文件，修改以下内容：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    .... <span class=\"comment\">/*some depends...*/</span></span><br><span class=\"line\">    compile <span class=\"string\">\"io.springfox:springfox-swagger2:$springfoxVersion\"</span></span><br><span class=\"line\">    compile <span class=\"string\">\"io.springfox:springfox-swagger-ui:$springfoxVersion\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ext &#123;</span><br><span class=\"line\">    springfoxVersion = <span class=\"string\">'2.7.0'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置Springfox\"><a href=\"#配置Springfox\" class=\"headerlink\" title=\"配置Springfox\"></a>配置Springfox</h3><p>Springfox通过<code>Docket</code>对象来定义生成的Api的一些属性，因此我们来创建一个Configure类来专门做Springfox的配置。创建一个<code>Swagger2Configure.kt</code>文件，并添加以下内容：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableSwagger2</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Swagger2Configure</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">petApi</span><span class=\"params\">()</span></span>: Docket &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">                .apiInfo(generateApiInfo()) <span class=\"comment\">/*定制swagger ui显示的版本信息*/</span></span><br><span class=\"line\">                .useDefaultResponseMessages(<span class=\"literal\">false</span>)</span><br><span class=\"line\">                .select()</span><br><span class=\"line\">                <span class=\"comment\">/*移除默认的Error Controller*/</span></span><br><span class=\"line\">                .apis(Predicates.not(RequestHandlerSelectors.basePackage(<span class=\"string\">\"org.springframework.boot\"</span>)))</span><br><span class=\"line\">                .paths(PathSelectors.any())</span><br><span class=\"line\">                .build()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">generateApiInfo</span><span class=\"params\">()</span></span>: ApiInfo &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ApiInfoBuilder().title(<span class=\"string\">\"Spring Boot Api Doc\"</span>)</span><br><span class=\"line\">                .contact(Contact(<span class=\"string\">\"Doublemine\"</span>, <span class=\"string\">\"https://notes.wanghao.work\"</span>, <span class=\"string\">\"doublemine.w@gmail.com\"</span>))</span><br><span class=\"line\">                .description(<span class=\"string\">\"This is a sample api doc description\"</span>)</span><br><span class=\"line\">                .build()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述示例只演示了最基本的配置，如果想查看完整的示例解释，请移步<a href=\"http://springfox.github.io/springfox/docs/current/#configuration-explained\" target=\"_blank\" rel=\"noopener\">Configuration explained</a>,至此，Springfox的配置就完成了。就是这么简单。</p>\n<hr>\n<h3 id=\"创建接口\"><a href=\"#创建接口\" class=\"headerlink\" title=\"创建接口\"></a>创建接口</h3><p>我们创建一个简单的UserController来模拟获取用户信息，<code>UserController.kt</code>：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(<span class=\"meta-string\">\"/user/\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> : <span class=\"type\">BaseController</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = <span class=\"meta-string\">\"/info/&#123;id&#125;\"</span>, method = arrayOf(RequestMethod.GET)</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getUserInfoById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> id: <span class=\"type\">Int</span>)</span></span>: User &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> User(id, <span class=\"string\">\"小白\"</span>, <span class=\"number\">35</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对应的Model<code>User.kt</code>:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>(<span class=\"keyword\">val</span> id: <span class=\"built_in\">Int</span>, <span class=\"keyword\">var</span> name: String, <span class=\"keyword\">var</span> age: <span class=\"built_in\">Int</span>)</span><br></pre></td></tr></table></figure>\n<p>至此就完成了简单的接口，接着我们启动项目并访问<a href=\"http://localhost:8080/swagger-ui.html\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/swagger-ui.html</a> ，一切正常的话，你将会看到以下页面：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fh4gacpr8wj21sk0su0wr.jpg\" alt></p>\n<p>一般来说这样已经能够满足我们的基本需要了，如果还需要更为详细的文档，Springfox也提供的注解来简化配置过程，我们接下来稍微修改下<code>UserController.kt</code>：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Api(tags = arrayOf(<span class=\"meta-string\">\"用户信息\"</span>)</span>)</span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(<span class=\"meta-string\">\"/user/\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> : <span class=\"type\">BaseController</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(<span class=\"meta-string\">\"获取用户信息\"</span>, notes = <span class=\"meta-string\">\"根据用户Id在来查询用户信息\"</span>)</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = <span class=\"meta-string\">\"/info/&#123;id&#125;\"</span>, method = arrayOf(RequestMethod.GET)</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getUserInfoById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> id: <span class=\"type\">Int</span>)</span></span>: User &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> User(id, <span class=\"string\">\"小白\"</span>, <span class=\"number\">35</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们重启项目查看下：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fh4gfu3btij21qo0qi786.jpg\" alt></p>\n<p>可以发现文档添加了对应的中文，要查看全部可用的注解以及其作用，请移步官方文档：</p>\n<ul>\n<li><a href=\"http://springfox.github.io/springfox/docs/current/#support-for-documentation-from-property-file-lookup\" target=\"_blank\" rel=\"noopener\"> Support for documentation from property file lookup</a></li>\n<li><a href=\"https://github.com/swagger-api/swagger-core/wiki/Annotations-1.5.X\" target=\"_blank\" rel=\"noopener\">Swagger-Core Annotations</a></li>\n</ul>\n<p>简单集成使用到这里👌咯，后续再写一写生成静态文档相关的内容吧。Just for Fun！</p>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>在做Android开发的时候，对于Api接口的对接有着深刻的体会：后端通过Markdown或者Word写好Api文档，然后通过类似Samba或者Dropbox这样的服务与移动端实现文档共享。有的时候因为接口出了问题，中间还得来回修改对接，效率低下不说，要是后端手抖写错参数而没有意识到，移动端埋头一顿调试。。。说多了都是泪。</p></div>\n<p>为了避免同时维护代码和文档来保持两者之间的同步而带来的额外负担，同事推荐了<a href=\"http://apidocjs.com/\" target=\"_blank\" rel=\"noopener\"><code>ApiDoc</code></a>来生成文档，虽然生成的文档界面比较清爽然而前提是必须得按照规定的语法写上详细的注释，才能生成对应的文档，虽然写注释本身是一件好事，不过有能够自动生成的方法为啥不使用呢?</p>","more":"<hr>\n<p>与<code>Apidoc</code>类似，<code>Swagger</code>也是一个用来文档化Resetful Api的项目，不过开源社区的支持应该是所有类似项目中最为完善的，因此除了可以使用<a href=\"https://github.com/swagger-api/swagger-editor\" target=\"_blank\" rel=\"noopener\">Swagger Editor</a>来编写Api文档之外，你还可以使用其它对应的自动化生成工具，以此来避免同时维护文档和代码的麻烦：</p>\n<ul>\n<li><a href=\"https://github.com/springfox/springfox\" target=\"_blank\" rel=\"noopener\">Springfox</a> 是为Spring而打造的自动化生成接口文档的其中一个Java实现</li>\n<li><a href=\"https://github.com/marcgibbons/django-rest-swagger\" target=\"_blank\" rel=\"noopener\">Django Reset Swagger</a> 则是为Django而打造的Python实现。</li>\n</ul>\n<p>这篇文章将从头创建一个Spring Boot项目并使用Springfox来生成对应的接口文档，来说明使用Springfox是多么的简单。首先创建Spring Boot项目：</p>\n<h3 id=\"创建Spring-Boot项目\"><a href=\"#创建Spring-Boot项目\" class=\"headerlink\" title=\"创建Spring Boot项目\"></a>创建Spring Boot项目</h3><h4 id=\"Eclipse\"><a href=\"#Eclipse\" class=\"headerlink\" title=\"Eclipse\"></a>Eclipse</h4><p>如果你是使用Eclipse的话，那么：</p>\n<p><img src=\"https://camo.githubusercontent.com/8caa3693b4268c095c001089313d687f647d551a/687474703a2f2f696d67322e77696b69612e6e6f636f6f6b69652e6e65742f5f5f636232303133303831393134323932382f6361726466696768742f696d616765732f7468756d622f352f35352f476f2d686f6d652d796f7572652d6472756e6b2e6a70672f35303070782d476f2d686f6d652d796f7572652d6472756e6b2e6a7067\" alt></p>\n<h4 id=\"IntelliJ-IDEA\"><a href=\"#IntelliJ-IDEA\" class=\"headerlink\" title=\"IntelliJ IDEA\"></a>IntelliJ IDEA</h4><p>我们使用IDEA的<code>Spring initializr</code>向导来简化初始化创建项目，如图所示：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fh3qqzjjr9j21gu0w4td1.jpg\" alt></p>\n<p>点击下一步根据个人的喜好来配置喜欢的JVM语言和构建工具，此处我选择<code>Kotlin</code>和<code>Gradle</code>，一切都是为了爽：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fh3qv1abohj21gu0w4jum.jpg\" alt></p>\n<p>点击下一步选择需要集成的依赖项，此处我们简单演示下Resetful Api文档生成，所以选择Web即可，如图：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fh45g74sdaj21gu0w4agg.jpg\" alt></p>\n<p>点击Next直至完成。这样，我们就完成了Spring Boot项目的创建了。</p>\n<hr>\n<h3 id=\"添加Springfox依赖\"><a href=\"#添加Springfox依赖\" class=\"headerlink\" title=\"添加Springfox依赖\"></a>添加Springfox依赖</h3><p>编辑根目录下的<code>build.gradle</code>文件，修改以下内容：</p>\n<figure class=\"highlight groovy\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dependencies &#123;</span><br><span class=\"line\">    .... <span class=\"comment\">/*some depends...*/</span></span><br><span class=\"line\">    compile <span class=\"string\">\"io.springfox:springfox-swagger2:$springfoxVersion\"</span></span><br><span class=\"line\">    compile <span class=\"string\">\"io.springfox:springfox-swagger-ui:$springfoxVersion\"</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ext &#123;</span><br><span class=\"line\">    springfoxVersion = <span class=\"string\">'2.7.0'</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"配置Springfox\"><a href=\"#配置Springfox\" class=\"headerlink\" title=\"配置Springfox\"></a>配置Springfox</h3><p>Springfox通过<code>Docket</code>对象来定义生成的Api的一些属性，因此我们来创建一个Configure类来专门做Springfox的配置。创建一个<code>Swagger2Configure.kt</code>文件，并添加以下内容：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"meta\">@EnableSwagger2</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Swagger2Configure</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Bean</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">petApi</span><span class=\"params\">()</span></span>: Docket &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> Docket(DocumentationType.SWAGGER_2)</span><br><span class=\"line\">                .apiInfo(generateApiInfo()) <span class=\"comment\">/*定制swagger ui显示的版本信息*/</span></span><br><span class=\"line\">                .useDefaultResponseMessages(<span class=\"literal\">false</span>)</span><br><span class=\"line\">                .select()</span><br><span class=\"line\">                <span class=\"comment\">/*移除默认的Error Controller*/</span></span><br><span class=\"line\">                .apis(Predicates.not(RequestHandlerSelectors.basePackage(<span class=\"string\">\"org.springframework.boot\"</span>)))</span><br><span class=\"line\">                .paths(PathSelectors.any())</span><br><span class=\"line\">                .build()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">generateApiInfo</span><span class=\"params\">()</span></span>: ApiInfo &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ApiInfoBuilder().title(<span class=\"string\">\"Spring Boot Api Doc\"</span>)</span><br><span class=\"line\">                .contact(Contact(<span class=\"string\">\"Doublemine\"</span>, <span class=\"string\">\"https://notes.wanghao.work\"</span>, <span class=\"string\">\"doublemine.w@gmail.com\"</span>))</span><br><span class=\"line\">                .description(<span class=\"string\">\"This is a sample api doc description\"</span>)</span><br><span class=\"line\">                .build()</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述示例只演示了最基本的配置，如果想查看完整的示例解释，请移步<a href=\"http://springfox.github.io/springfox/docs/current/#configuration-explained\" target=\"_blank\" rel=\"noopener\">Configuration explained</a>,至此，Springfox的配置就完成了。就是这么简单。</p>\n<hr>\n<h3 id=\"创建接口\"><a href=\"#创建接口\" class=\"headerlink\" title=\"创建接口\"></a>创建接口</h3><p>我们创建一个简单的UserController来模拟获取用户信息，<code>UserController.kt</code>：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@RequestMapping(<span class=\"meta-string\">\"/user/\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> : <span class=\"type\">BaseController</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = <span class=\"meta-string\">\"/info/&#123;id&#125;\"</span>, method = arrayOf(RequestMethod.GET)</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getUserInfoById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> id: <span class=\"type\">Int</span>)</span></span>: User &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> User(id, <span class=\"string\">\"小白\"</span>, <span class=\"number\">35</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>对应的Model<code>User.kt</code>:</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">data</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">User</span></span>(<span class=\"keyword\">val</span> id: <span class=\"built_in\">Int</span>, <span class=\"keyword\">var</span> name: String, <span class=\"keyword\">var</span> age: <span class=\"built_in\">Int</span>)</span><br></pre></td></tr></table></figure>\n<p>至此就完成了简单的接口，接着我们启动项目并访问<a href=\"http://localhost:8080/swagger-ui.html\" target=\"_blank\" rel=\"noopener\">http://localhost:8080/swagger-ui.html</a> ，一切正常的话，你将会看到以下页面：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fh4gacpr8wj21sk0su0wr.jpg\" alt></p>\n<p>一般来说这样已经能够满足我们的基本需要了，如果还需要更为详细的文档，Springfox也提供的注解来简化配置过程，我们接下来稍微修改下<code>UserController.kt</code>：</p>\n<figure class=\"highlight kotlin\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Api(tags = arrayOf(<span class=\"meta-string\">\"用户信息\"</span>)</span>)</span><br><span class=\"line\"><span class=\"meta\">@RequestMapping(<span class=\"meta-string\">\"/user/\"</span>)</span></span><br><span class=\"line\"><span class=\"meta\">@RestController</span></span><br><span class=\"line\"><span class=\"keyword\">open</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">UserController</span> : <span class=\"type\">BaseController</span></span>() &#123;</span><br><span class=\"line\">    <span class=\"meta\">@ApiOperation(<span class=\"meta-string\">\"获取用户信息\"</span>, notes = <span class=\"meta-string\">\"根据用户Id在来查询用户信息\"</span>)</span></span><br><span class=\"line\">    <span class=\"meta\">@RequestMapping(value = <span class=\"meta-string\">\"/info/&#123;id&#125;\"</span>, method = arrayOf(RequestMethod.GET)</span>)</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">fun</span> <span class=\"title\">getUserInfoById</span><span class=\"params\">(<span class=\"meta\">@PathVariable</span> id: <span class=\"type\">Int</span>)</span></span>: User &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> User(id, <span class=\"string\">\"小白\"</span>, <span class=\"number\">35</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>我们重启项目查看下：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fh4gfu3btij21qo0qi786.jpg\" alt></p>\n<p>可以发现文档添加了对应的中文，要查看全部可用的注解以及其作用，请移步官方文档：</p>\n<ul>\n<li><a href=\"http://springfox.github.io/springfox/docs/current/#support-for-documentation-from-property-file-lookup\" target=\"_blank\" rel=\"noopener\"> Support for documentation from property file lookup</a></li>\n<li><a href=\"https://github.com/swagger-api/swagger-core/wiki/Annotations-1.5.X\" target=\"_blank\" rel=\"noopener\">Swagger-Core Annotations</a></li>\n</ul>\n<p>简单集成使用到这里👌咯，后续再写一写生成静态文档相关的内容吧。Just for Fun！</p>"},{"title":"Kubernetes集群之路（二）etcd集群部署","date":"2018-04-26T04:40:08.000Z","_content":"\n![](https://cdn.worldvectorlogo.com/logos/etcd.svg)\n\n{%note info%}\n\n在前面我们生成了所有kubernetes相关的TLS证书，kubernetes集群自身所有配置相关信息都存储在etcd之中，而flannel也将网络子网网段注册到etcd之中并为集群中节点的pod提供了加入同一局域网的能力。因此接下来我们安装部署etcd集群。{%endnote%}\n\n因为flannel插件也依赖于etcd存储信息，所以我们首先需要安装etcd集群，使之实现高可用。\n\n在开始之前请确保在上一篇文章中生成的TLS证书都分发到需要部署的`所有机器节点`的以下位置：\n\n1. `/etc/kubernetes/ssl/etcd.pem`\n2. `/etc/kubernetes/ssl/etcd-key.pem`\n3. `/etc/kubernetes/ssl/ca.pem`\n\n<!--more-->\n\n#### 部署etcd\n\n我们采用纯二进制安装etcd,因此不使用默认的包管理器中的安装文件。在每台需要部署的etcd的节点上，通过官方仓库下载你需要的版本的etcd二进制安装包：\n\n- [https://github.com/coreos/etcd/releases](https://github.com/coreos/etcd/releases)\n\n\n\n##### 下载安装二进制文件\n\n目前最新版本是[v3.3.4](https://github.com/coreos/etcd/releases/tag/v3.3.4)（截止到我写这篇文章的时候），而kubernetes v1.10验证过的版本为[`3.1.12`](https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.10.md#external-dependencies),如果没有特殊需求请尽量使用验证版本（如果你是不升级不舒服斯基当我没说）找到对应的系统架构并直接下载:  [https://github.com/coreos/etcd/releases/download/v3.1.12/etcd-v3.1.12-linux-amd64.tar.gz](https://github.com/coreos/etcd/releases/download/v3.1.12/etcd-v3.1.12-linux-amd64.tar.gz)\n\n在所有需要安装etcd节点执行以下命令来安装`etcd和etcdctl`(注意:etcd目前不支持降级，如果你初始安装版本过高，后续像降级到验证版是比较麻烦的):\n\n```bash\nwget https://github.com/coreos/etcd/releases/download/v3.1.12/etcd-v3.1.12-linux-amd64.tar.gz\ntar zxvf etcd-v3.1.12-linux-amd64.tar.gz\ncd etcd-v3.1.12-linux-amd64\nsudo mv etcd etcdctl /usr/local/bin/\n```\n\n\n\n##### 配置systemd unit\n\n接着，我们需要编辑对应的systemd unit service文件，我们需要新建一个`etcd.service`文件并放置于以下路径：`/usr/lib/systemd/system/etcd.service`并键入以下内容：\n\n```properties\n[Unit]\nDescription=Etcd Server\nAfter=network.target\nAfter=network-online.target\nWants=network-online.target\nDocumentation=https://github.com/coreos\n\n[Service]\nType=notify\nWorkingDirectory=/var/lib/etcd/\nEnvironmentFile=-/etc/etcd/etcd.conf\nExecStart=/usr/local/bin/etcd \\\n  --name ${ETCD_NAME} \\\n  --cert-file=${ETCD_TRUST_CERT_FILE} \\\n  --key-file=${ETCD_TRUST_CERT_KEY} \\\n  --peer-cert-file=${ETCD_TRUST_CERT_FILE} \\\n  --peer-key-file=${ETCD_TRUST_CERT_KEY} \\\n  --trusted-ca-file=${ETCD_TRUST_CA_FILE} \\\n  --peer-trusted-ca-file=${ETCD_TRUST_CA_FILE} \\\n  --initial-advertise-peer-urls ${ETCD_INITIAL_ADVERTISE_PEER_URLS} \\\n  --listen-peer-urls ${ETCD_LISTEN_PEER_URLS} \\\n  --listen-client-urls ${ETCD_LISTEN_CLIENT_URLS} \\\n  --advertise-client-urls ${ETCD_ADVERTISE_CLIENT_URLS} \\\n  --initial-cluster-token ${ETCD_INITIAL_CLUSTER_TOKEN} \\\n  --initial-cluster ${ETCD_CLUSTER_NODE_LIST} \\\n  --initial-cluster-state new \\\n  --data-dir=${ETCD_DATA_DIR}\nRestart=on-failure\nRestartSec=5\nLimitNOFILE=65536\n\n[Install]\nWantedBy=multi-user.target\n```\n\n\n\n{%note warning%}\n\n1. `WorkingDirectory`:指定 etcd 的工作目录和数据目录为 `/var/lib/etcd`，需在启动服务前创建这个目录。\n2. 为了保证通信安全，需要指定 etcd 的公私钥(cert-file和key-file)、Peers 通信的公私钥和CA证书(peer-cert-file、peer-key-file、peer-trusted-ca-file)、客户端的CA证书（trusted-ca-file）。\n3. `--initial-cluster-state` 值为 `new` 时，`--name` 的参数值必须位于 `--initial-cluster` 列表中。\n4. 我们将其中一些参数的设置抽取为环境变量，以便于我们修改参数的时候不需要再次systemctl daemon-reload。\n5. 带有`--peer-xxx`前缀的配置为etcd与其它etcd节点通信的相关配置，不带有的该前缀的则为客户端（例如：etcdctl）与etcd节点（作为服务器）通信的相关配置。\n\n{%endnote%}\n\n对应的，我们在`/etc/etcd/etcd.conf`路径中新建一个`etcd.conf`文件并键入以下内容:\n\n```properties\n# [member]\nETCD_NAME=node1\nETCD_DATA_DIR=\"/var/lib/etcd\"\nETCD_LISTEN_PEER_URLS=\"https://0.0.0.0:2380\"\nETCD_LISTEN_CLIENT_URLS=\"https://0.0.0.0:2379\"\n\nETCD_TRUST_CA_FILE=\"/etc/kubernetes/ssl/ca.pem\"\nETCD_TRUST_CERT_FILE=\"/etc/kubernetes/ssl/etcd.pem\"\nETCD_TRUST_CERT_KEY=\"/etc/kubernetes/ssl/etcd-key.pem\"\n\n#[cluster]\nETCD_INITIAL_ADVERTISE_PEER_URLS=\"https://10.138.148.161:2380\"\nETCD_INITIAL_CLUSTER_TOKEN=\"etcd-cluster\"\nETCD_ADVERTISE_CLIENT_URLS=\"https://10.138.148.161:2379\"\n\nETCD_CLUSTER_NODE_LIST=\"node1=https://10.138.148.161:2380,node2=https://10.138.196.180:2380,node3=https://10.138.212.68:2380\"\n```\n\n\n\n{%note warning%}\n\n1. 这是节点IP为10.138.148.161的环境变量配置文件内容，对于其他节点，修改对应的`ETCD_NAME`为对应的node1、node2、node3，并将`ETCD_INITIAL_ADVERTISE_PEER_URLS`和`ETCD_INITIAL_ADVERTISE_PEER_URLS`修改为对应的节点的`ip`。\n2. 此处需要特别说明的是：`ETCD_CLUSTER_NODE_LIST`中的ip必须在生成etcd TLS证书时在`etcd-csr.json`中的`hosts`字段中指定（Subject Alternative Name（SAN）），否则可能会得到`(error \"remote error: tls: bad certificate\", ServerName \"\")`这样的错误。\n3. 所有需要加入的节点都需要在`ETCD_CLUSTER_NODE_LIST`中指定，并正确配置其`ETCD_NAME`。\n\n{%endnote%}\n\n------\n\n##### 验证etcd安装\n\n在所有的节点上完成了上述两步之后，我们分别执行以下命令来启动etcd（初始可能会阻塞一段时间）:\n\n```bash\nsudo systemctl daemon-reload\nsudo systemctl start etcd\n```\n\n如果配置正确，那么上述命令执行结果应该是任何输出的。如果结果有错，请参照上述配置和环境变量文件检查配置。一旦我们顺利启动`etcd`服务，我们还需要正确检查我们的`etcd`集群是否可用，在`etcd`集群中任一节点中执行以下命令：\n\n```bash\n etcdctl --endpoint https://127.0.0.1:2379   \\\n --ca-file=/etc/kubernetes/ssl/ca.pem        \\\n --cert-file=/etc/kubernetes/ssl/etcd.pem    \\\n --key-file=/etc/kubernetes/ssl/etcd-key.pem \\\n cluster-health\n```\n\n在一切正常情况下，你会得到类似如下的输出结果:\n\n```bash\nmember 245a74588a3e85d0 is healthy: got healthy result from https://xxx.xxx.xxx.xxx:2379\nmember 953bacee4a009939 is healthy: got healthy result from https://xxx.xxx.xxx.xxx:2379\nmember f43a05b0ce1a8ed6 is healthy: got healthy result from https://xxx.xxx.xxx.xxx:2379\ncluster is healthy\n```\n\n------\n\n#### 后记\n\n需要特别说明的是：`etcd`集群是否和`kubernetes`部署在同样的服务器节点上是`可选的`。也就是说`etcd`集群可以脱离`kubernetes`部署的集群而单独部署在其他单独的服务器上，且并不需要和`kubernetes`节点数对应。经过我的实践如果有条件的话请务必：\n\n- 将etcd部署在kubernetes的Node节点之外负载比较低的服务器节点上。\n- etcd的集群数量尽量为奇数，以确保某些情况下部分etcd节点挂掉的选举问题。\n\n------\n\n至此，我们的`etcd`集群已经顺利安装完成。接下来安装flannel插件。\n\n\n\n#### 参考资料\n\n- [在CentOS上部署kubernetes集群](https://jimmysong.io/kubernetes-handbook/practice/install-kubernetes-on-centos.html)\n\n","source":"_posts/kubernetes集群之路etcd集群部署.md","raw":"title: Kubernetes集群之路（二）etcd集群部署\ndate: 2018-4-26 12:40:08\ntags:\n\n- docker\n- kubernetes\n\n---\n\n![](https://cdn.worldvectorlogo.com/logos/etcd.svg)\n\n{%note info%}\n\n在前面我们生成了所有kubernetes相关的TLS证书，kubernetes集群自身所有配置相关信息都存储在etcd之中，而flannel也将网络子网网段注册到etcd之中并为集群中节点的pod提供了加入同一局域网的能力。因此接下来我们安装部署etcd集群。{%endnote%}\n\n因为flannel插件也依赖于etcd存储信息，所以我们首先需要安装etcd集群，使之实现高可用。\n\n在开始之前请确保在上一篇文章中生成的TLS证书都分发到需要部署的`所有机器节点`的以下位置：\n\n1. `/etc/kubernetes/ssl/etcd.pem`\n2. `/etc/kubernetes/ssl/etcd-key.pem`\n3. `/etc/kubernetes/ssl/ca.pem`\n\n<!--more-->\n\n#### 部署etcd\n\n我们采用纯二进制安装etcd,因此不使用默认的包管理器中的安装文件。在每台需要部署的etcd的节点上，通过官方仓库下载你需要的版本的etcd二进制安装包：\n\n- [https://github.com/coreos/etcd/releases](https://github.com/coreos/etcd/releases)\n\n\n\n##### 下载安装二进制文件\n\n目前最新版本是[v3.3.4](https://github.com/coreos/etcd/releases/tag/v3.3.4)（截止到我写这篇文章的时候），而kubernetes v1.10验证过的版本为[`3.1.12`](https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.10.md#external-dependencies),如果没有特殊需求请尽量使用验证版本（如果你是不升级不舒服斯基当我没说）找到对应的系统架构并直接下载:  [https://github.com/coreos/etcd/releases/download/v3.1.12/etcd-v3.1.12-linux-amd64.tar.gz](https://github.com/coreos/etcd/releases/download/v3.1.12/etcd-v3.1.12-linux-amd64.tar.gz)\n\n在所有需要安装etcd节点执行以下命令来安装`etcd和etcdctl`(注意:etcd目前不支持降级，如果你初始安装版本过高，后续像降级到验证版是比较麻烦的):\n\n```bash\nwget https://github.com/coreos/etcd/releases/download/v3.1.12/etcd-v3.1.12-linux-amd64.tar.gz\ntar zxvf etcd-v3.1.12-linux-amd64.tar.gz\ncd etcd-v3.1.12-linux-amd64\nsudo mv etcd etcdctl /usr/local/bin/\n```\n\n\n\n##### 配置systemd unit\n\n接着，我们需要编辑对应的systemd unit service文件，我们需要新建一个`etcd.service`文件并放置于以下路径：`/usr/lib/systemd/system/etcd.service`并键入以下内容：\n\n```properties\n[Unit]\nDescription=Etcd Server\nAfter=network.target\nAfter=network-online.target\nWants=network-online.target\nDocumentation=https://github.com/coreos\n\n[Service]\nType=notify\nWorkingDirectory=/var/lib/etcd/\nEnvironmentFile=-/etc/etcd/etcd.conf\nExecStart=/usr/local/bin/etcd \\\n  --name ${ETCD_NAME} \\\n  --cert-file=${ETCD_TRUST_CERT_FILE} \\\n  --key-file=${ETCD_TRUST_CERT_KEY} \\\n  --peer-cert-file=${ETCD_TRUST_CERT_FILE} \\\n  --peer-key-file=${ETCD_TRUST_CERT_KEY} \\\n  --trusted-ca-file=${ETCD_TRUST_CA_FILE} \\\n  --peer-trusted-ca-file=${ETCD_TRUST_CA_FILE} \\\n  --initial-advertise-peer-urls ${ETCD_INITIAL_ADVERTISE_PEER_URLS} \\\n  --listen-peer-urls ${ETCD_LISTEN_PEER_URLS} \\\n  --listen-client-urls ${ETCD_LISTEN_CLIENT_URLS} \\\n  --advertise-client-urls ${ETCD_ADVERTISE_CLIENT_URLS} \\\n  --initial-cluster-token ${ETCD_INITIAL_CLUSTER_TOKEN} \\\n  --initial-cluster ${ETCD_CLUSTER_NODE_LIST} \\\n  --initial-cluster-state new \\\n  --data-dir=${ETCD_DATA_DIR}\nRestart=on-failure\nRestartSec=5\nLimitNOFILE=65536\n\n[Install]\nWantedBy=multi-user.target\n```\n\n\n\n{%note warning%}\n\n1. `WorkingDirectory`:指定 etcd 的工作目录和数据目录为 `/var/lib/etcd`，需在启动服务前创建这个目录。\n2. 为了保证通信安全，需要指定 etcd 的公私钥(cert-file和key-file)、Peers 通信的公私钥和CA证书(peer-cert-file、peer-key-file、peer-trusted-ca-file)、客户端的CA证书（trusted-ca-file）。\n3. `--initial-cluster-state` 值为 `new` 时，`--name` 的参数值必须位于 `--initial-cluster` 列表中。\n4. 我们将其中一些参数的设置抽取为环境变量，以便于我们修改参数的时候不需要再次systemctl daemon-reload。\n5. 带有`--peer-xxx`前缀的配置为etcd与其它etcd节点通信的相关配置，不带有的该前缀的则为客户端（例如：etcdctl）与etcd节点（作为服务器）通信的相关配置。\n\n{%endnote%}\n\n对应的，我们在`/etc/etcd/etcd.conf`路径中新建一个`etcd.conf`文件并键入以下内容:\n\n```properties\n# [member]\nETCD_NAME=node1\nETCD_DATA_DIR=\"/var/lib/etcd\"\nETCD_LISTEN_PEER_URLS=\"https://0.0.0.0:2380\"\nETCD_LISTEN_CLIENT_URLS=\"https://0.0.0.0:2379\"\n\nETCD_TRUST_CA_FILE=\"/etc/kubernetes/ssl/ca.pem\"\nETCD_TRUST_CERT_FILE=\"/etc/kubernetes/ssl/etcd.pem\"\nETCD_TRUST_CERT_KEY=\"/etc/kubernetes/ssl/etcd-key.pem\"\n\n#[cluster]\nETCD_INITIAL_ADVERTISE_PEER_URLS=\"https://10.138.148.161:2380\"\nETCD_INITIAL_CLUSTER_TOKEN=\"etcd-cluster\"\nETCD_ADVERTISE_CLIENT_URLS=\"https://10.138.148.161:2379\"\n\nETCD_CLUSTER_NODE_LIST=\"node1=https://10.138.148.161:2380,node2=https://10.138.196.180:2380,node3=https://10.138.212.68:2380\"\n```\n\n\n\n{%note warning%}\n\n1. 这是节点IP为10.138.148.161的环境变量配置文件内容，对于其他节点，修改对应的`ETCD_NAME`为对应的node1、node2、node3，并将`ETCD_INITIAL_ADVERTISE_PEER_URLS`和`ETCD_INITIAL_ADVERTISE_PEER_URLS`修改为对应的节点的`ip`。\n2. 此处需要特别说明的是：`ETCD_CLUSTER_NODE_LIST`中的ip必须在生成etcd TLS证书时在`etcd-csr.json`中的`hosts`字段中指定（Subject Alternative Name（SAN）），否则可能会得到`(error \"remote error: tls: bad certificate\", ServerName \"\")`这样的错误。\n3. 所有需要加入的节点都需要在`ETCD_CLUSTER_NODE_LIST`中指定，并正确配置其`ETCD_NAME`。\n\n{%endnote%}\n\n------\n\n##### 验证etcd安装\n\n在所有的节点上完成了上述两步之后，我们分别执行以下命令来启动etcd（初始可能会阻塞一段时间）:\n\n```bash\nsudo systemctl daemon-reload\nsudo systemctl start etcd\n```\n\n如果配置正确，那么上述命令执行结果应该是任何输出的。如果结果有错，请参照上述配置和环境变量文件检查配置。一旦我们顺利启动`etcd`服务，我们还需要正确检查我们的`etcd`集群是否可用，在`etcd`集群中任一节点中执行以下命令：\n\n```bash\n etcdctl --endpoint https://127.0.0.1:2379   \\\n --ca-file=/etc/kubernetes/ssl/ca.pem        \\\n --cert-file=/etc/kubernetes/ssl/etcd.pem    \\\n --key-file=/etc/kubernetes/ssl/etcd-key.pem \\\n cluster-health\n```\n\n在一切正常情况下，你会得到类似如下的输出结果:\n\n```bash\nmember 245a74588a3e85d0 is healthy: got healthy result from https://xxx.xxx.xxx.xxx:2379\nmember 953bacee4a009939 is healthy: got healthy result from https://xxx.xxx.xxx.xxx:2379\nmember f43a05b0ce1a8ed6 is healthy: got healthy result from https://xxx.xxx.xxx.xxx:2379\ncluster is healthy\n```\n\n------\n\n#### 后记\n\n需要特别说明的是：`etcd`集群是否和`kubernetes`部署在同样的服务器节点上是`可选的`。也就是说`etcd`集群可以脱离`kubernetes`部署的集群而单独部署在其他单独的服务器上，且并不需要和`kubernetes`节点数对应。经过我的实践如果有条件的话请务必：\n\n- 将etcd部署在kubernetes的Node节点之外负载比较低的服务器节点上。\n- etcd的集群数量尽量为奇数，以确保某些情况下部分etcd节点挂掉的选举问题。\n\n------\n\n至此，我们的`etcd`集群已经顺利安装完成。接下来安装flannel插件。\n\n\n\n#### 参考资料\n\n- [在CentOS上部署kubernetes集群](https://jimmysong.io/kubernetes-handbook/practice/install-kubernetes-on-centos.html)\n\n","slug":"kubernetes集群之路etcd集群部署","published":1,"updated":"2019-05-20T13:46:13.820Z","_id":"cjvtoyb9e001i2ev21yqejhmz","comments":1,"layout":"post","photos":[],"link":"","content":"<p><img src=\"https://cdn.worldvectorlogo.com/logos/etcd.svg\" alt></p>\n<div class=\"note info\"><p>在前面我们生成了所有kubernetes相关的TLS证书，kubernetes集群自身所有配置相关信息都存储在etcd之中，而flannel也将网络子网网段注册到etcd之中并为集群中节点的pod提供了加入同一局域网的能力。因此接下来我们安装部署etcd集群。</p></div>\n<p>因为flannel插件也依赖于etcd存储信息，所以我们首先需要安装etcd集群，使之实现高可用。</p>\n<p>在开始之前请确保在上一篇文章中生成的TLS证书都分发到需要部署的<code>所有机器节点</code>的以下位置：</p>\n<ol>\n<li><code>/etc/kubernetes/ssl/etcd.pem</code></li>\n<li><code>/etc/kubernetes/ssl/etcd-key.pem</code></li>\n<li><code>/etc/kubernetes/ssl/ca.pem</code></li>\n</ol>\n<a id=\"more\"></a>\n<h4 id=\"部署etcd\"><a href=\"#部署etcd\" class=\"headerlink\" title=\"部署etcd\"></a>部署etcd</h4><p>我们采用纯二进制安装etcd,因此不使用默认的包管理器中的安装文件。在每台需要部署的etcd的节点上，通过官方仓库下载你需要的版本的etcd二进制安装包：</p>\n<ul>\n<li><a href=\"https://github.com/coreos/etcd/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/coreos/etcd/releases</a></li>\n</ul>\n<h5 id=\"下载安装二进制文件\"><a href=\"#下载安装二进制文件\" class=\"headerlink\" title=\"下载安装二进制文件\"></a>下载安装二进制文件</h5><p>目前最新版本是<a href=\"https://github.com/coreos/etcd/releases/tag/v3.3.4\" target=\"_blank\" rel=\"noopener\">v3.3.4</a>（截止到我写这篇文章的时候），而kubernetes v1.10验证过的版本为<a href=\"https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.10.md#external-dependencies\" target=\"_blank\" rel=\"noopener\"><code>3.1.12</code></a>,如果没有特殊需求请尽量使用验证版本（如果你是不升级不舒服斯基当我没说）找到对应的系统架构并直接下载:  <a href=\"https://github.com/coreos/etcd/releases/download/v3.1.12/etcd-v3.1.12-linux-amd64.tar.gz\" target=\"_blank\" rel=\"noopener\">https://github.com/coreos/etcd/releases/download/v3.1.12/etcd-v3.1.12-linux-amd64.tar.gz</a></p>\n<p>在所有需要安装etcd节点执行以下命令来安装<code>etcd和etcdctl</code>(注意:etcd目前不支持降级，如果你初始安装版本过高，后续像降级到验证版是比较麻烦的):</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/coreos/etcd/releases/download/v3.1.12/etcd-v3.1.12-linux-amd64.tar.gz</span><br><span class=\"line\">tar zxvf etcd-v3.1.12-linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> etcd-v3.1.12-linux-amd64</span><br><span class=\"line\">sudo mv etcd etcdctl /usr/<span class=\"built_in\">local</span>/bin/</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置systemd-unit\"><a href=\"#配置systemd-unit\" class=\"headerlink\" title=\"配置systemd unit\"></a>配置systemd unit</h5><p>接着，我们需要编辑对应的systemd unit service文件，我们需要新建一个<code>etcd.service</code>文件并放置于以下路径：<code>/usr/lib/systemd/system/etcd.service</code>并键入以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Etcd Server</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\">After=network-online.target</span><br><span class=\"line\">Wants=network-online.target</span><br><span class=\"line\">Documentation=https://github.com/coreos</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=notify</span><br><span class=\"line\">WorkingDirectory=/var/lib/etcd/</span><br><span class=\"line\">EnvironmentFile=-/etc/etcd/etcd.conf</span><br><span class=\"line\">ExecStart=/usr/local/bin/etcd \\</span><br><span class=\"line\">  --name $&#123;ETCD_NAME&#125; \\</span><br><span class=\"line\">  --cert-file=$&#123;ETCD_TRUST_CERT_FILE&#125; \\</span><br><span class=\"line\">  --key-file=$&#123;ETCD_TRUST_CERT_KEY&#125; \\</span><br><span class=\"line\">  --peer-cert-file=$&#123;ETCD_TRUST_CERT_FILE&#125; \\</span><br><span class=\"line\">  --peer-key-file=$&#123;ETCD_TRUST_CERT_KEY&#125; \\</span><br><span class=\"line\">  --trusted-ca-file=$&#123;ETCD_TRUST_CA_FILE&#125; \\</span><br><span class=\"line\">  --peer-trusted-ca-file=$&#123;ETCD_TRUST_CA_FILE&#125; \\</span><br><span class=\"line\">  --initial-advertise-peer-urls $&#123;ETCD_INITIAL_ADVERTISE_PEER_URLS&#125; \\</span><br><span class=\"line\">  --listen-peer-urls $&#123;ETCD_LISTEN_PEER_URLS&#125; \\</span><br><span class=\"line\">  --listen-client-urls $&#123;ETCD_LISTEN_CLIENT_URLS&#125; \\</span><br><span class=\"line\">  --advertise-client-urls $&#123;ETCD_ADVERTISE_CLIENT_URLS&#125; \\</span><br><span class=\"line\">  --initial-cluster-token $&#123;ETCD_INITIAL_CLUSTER_TOKEN&#125; \\</span><br><span class=\"line\">  --initial-cluster $&#123;ETCD_CLUSTER_NODE_LIST&#125; \\</span><br><span class=\"line\">  --initial-cluster-state new \\</span><br><span class=\"line\">  --data-dir=$&#123;ETCD_DATA_DIR&#125;</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\">RestartSec=5</span><br><span class=\"line\">LimitNOFILE=65536</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<div class=\"note warning\"><ol>\n<li><code>WorkingDirectory</code>:指定 etcd 的工作目录和数据目录为 <code>/var/lib/etcd</code>，需在启动服务前创建这个目录。</li>\n<li>为了保证通信安全，需要指定 etcd 的公私钥(cert-file和key-file)、Peers 通信的公私钥和CA证书(peer-cert-file、peer-key-file、peer-trusted-ca-file)、客户端的CA证书（trusted-ca-file）。</li>\n<li><code>--initial-cluster-state</code> 值为 <code>new</code> 时，<code>--name</code> 的参数值必须位于 <code>--initial-cluster</code> 列表中。</li>\n<li>我们将其中一些参数的设置抽取为环境变量，以便于我们修改参数的时候不需要再次systemctl daemon-reload。</li>\n<li>带有<code>--peer-xxx</code>前缀的配置为etcd与其它etcd节点通信的相关配置，不带有的该前缀的则为客户端（例如：etcdctl）与etcd节点（作为服务器）通信的相关配置。</li>\n</ol></div>\n<p>对应的，我们在<code>/etc/etcd/etcd.conf</code>路径中新建一个<code>etcd.conf</code>文件并键入以下内容:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># [member]</span><br><span class=\"line\">ETCD_NAME=node1</span><br><span class=\"line\">ETCD_DATA_DIR=&quot;/var/lib/etcd&quot;</span><br><span class=\"line\">ETCD_LISTEN_PEER_URLS=&quot;https://0.0.0.0:2380&quot;</span><br><span class=\"line\">ETCD_LISTEN_CLIENT_URLS=&quot;https://0.0.0.0:2379&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">ETCD_TRUST_CA_FILE=&quot;/etc/kubernetes/ssl/ca.pem&quot;</span><br><span class=\"line\">ETCD_TRUST_CERT_FILE=&quot;/etc/kubernetes/ssl/etcd.pem&quot;</span><br><span class=\"line\">ETCD_TRUST_CERT_KEY=&quot;/etc/kubernetes/ssl/etcd-key.pem&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#[cluster]</span><br><span class=\"line\">ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://10.138.148.161:2380&quot;</span><br><span class=\"line\">ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster&quot;</span><br><span class=\"line\">ETCD_ADVERTISE_CLIENT_URLS=&quot;https://10.138.148.161:2379&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">ETCD_CLUSTER_NODE_LIST=&quot;node1=https://10.138.148.161:2380,node2=https://10.138.196.180:2380,node3=https://10.138.212.68:2380&quot;</span><br></pre></td></tr></table></figure>\n<div class=\"note warning\"><ol>\n<li>这是节点IP为10.138.148.161的环境变量配置文件内容，对于其他节点，修改对应的<code>ETCD_NAME</code>为对应的node1、node2、node3，并将<code>ETCD_INITIAL_ADVERTISE_PEER_URLS</code>和<code>ETCD_INITIAL_ADVERTISE_PEER_URLS</code>修改为对应的节点的<code>ip</code>。</li>\n<li>此处需要特别说明的是：<code>ETCD_CLUSTER_NODE_LIST</code>中的ip必须在生成etcd TLS证书时在<code>etcd-csr.json</code>中的<code>hosts</code>字段中指定（Subject Alternative Name（SAN）），否则可能会得到<code>(error &quot;remote error: tls: bad certificate&quot;, ServerName &quot;&quot;)</code>这样的错误。</li>\n<li>所有需要加入的节点都需要在<code>ETCD_CLUSTER_NODE_LIST</code>中指定，并正确配置其<code>ETCD_NAME</code>。</li>\n</ol></div>\n<hr>\n<h5 id=\"验证etcd安装\"><a href=\"#验证etcd安装\" class=\"headerlink\" title=\"验证etcd安装\"></a>验证etcd安装</h5><p>在所有的节点上完成了上述两步之后，我们分别执行以下命令来启动etcd（初始可能会阻塞一段时间）:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl start etcd</span><br></pre></td></tr></table></figure>\n<p>如果配置正确，那么上述命令执行结果应该是任何输出的。如果结果有错，请参照上述配置和环境变量文件检查配置。一旦我们顺利启动<code>etcd</code>服务，我们还需要正确检查我们的<code>etcd</code>集群是否可用，在<code>etcd</code>集群中任一节点中执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">etcdctl --endpoint https://127.0.0.1:2379   \\</span><br><span class=\"line\">--ca-file=/etc/kubernetes/ssl/ca.pem        \\</span><br><span class=\"line\">--cert-file=/etc/kubernetes/ssl/etcd.pem    \\</span><br><span class=\"line\">--key-file=/etc/kubernetes/ssl/etcd-key.pem \\</span><br><span class=\"line\">cluster-health</span><br></pre></td></tr></table></figure>\n<p>在一切正常情况下，你会得到类似如下的输出结果:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">member 245a74588a3e85d0 is healthy: got healthy result from https://xxx.xxx.xxx.xxx:2379</span><br><span class=\"line\">member 953bacee4a009939 is healthy: got healthy result from https://xxx.xxx.xxx.xxx:2379</span><br><span class=\"line\">member f43a05b0ce1a8ed6 is healthy: got healthy result from https://xxx.xxx.xxx.xxx:2379</span><br><span class=\"line\">cluster is healthy</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h4><p>需要特别说明的是：<code>etcd</code>集群是否和<code>kubernetes</code>部署在同样的服务器节点上是<code>可选的</code>。也就是说<code>etcd</code>集群可以脱离<code>kubernetes</code>部署的集群而单独部署在其他单独的服务器上，且并不需要和<code>kubernetes</code>节点数对应。经过我的实践如果有条件的话请务必：</p>\n<ul>\n<li>将etcd部署在kubernetes的Node节点之外负载比较低的服务器节点上。</li>\n<li>etcd的集群数量尽量为奇数，以确保某些情况下部分etcd节点挂掉的选举问题。</li>\n</ul>\n<hr>\n<p>至此，我们的<code>etcd</code>集群已经顺利安装完成。接下来安装flannel插件。</p>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><ul>\n<li><a href=\"https://jimmysong.io/kubernetes-handbook/practice/install-kubernetes-on-centos.html\" target=\"_blank\" rel=\"noopener\">在CentOS上部署kubernetes集群</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://cdn.worldvectorlogo.com/logos/etcd.svg\" alt></p>\n<div class=\"note info\"><p>在前面我们生成了所有kubernetes相关的TLS证书，kubernetes集群自身所有配置相关信息都存储在etcd之中，而flannel也将网络子网网段注册到etcd之中并为集群中节点的pod提供了加入同一局域网的能力。因此接下来我们安装部署etcd集群。</p></div>\n<p>因为flannel插件也依赖于etcd存储信息，所以我们首先需要安装etcd集群，使之实现高可用。</p>\n<p>在开始之前请确保在上一篇文章中生成的TLS证书都分发到需要部署的<code>所有机器节点</code>的以下位置：</p>\n<ol>\n<li><code>/etc/kubernetes/ssl/etcd.pem</code></li>\n<li><code>/etc/kubernetes/ssl/etcd-key.pem</code></li>\n<li><code>/etc/kubernetes/ssl/ca.pem</code></li>\n</ol>","more":"<h4 id=\"部署etcd\"><a href=\"#部署etcd\" class=\"headerlink\" title=\"部署etcd\"></a>部署etcd</h4><p>我们采用纯二进制安装etcd,因此不使用默认的包管理器中的安装文件。在每台需要部署的etcd的节点上，通过官方仓库下载你需要的版本的etcd二进制安装包：</p>\n<ul>\n<li><a href=\"https://github.com/coreos/etcd/releases\" target=\"_blank\" rel=\"noopener\">https://github.com/coreos/etcd/releases</a></li>\n</ul>\n<h5 id=\"下载安装二进制文件\"><a href=\"#下载安装二进制文件\" class=\"headerlink\" title=\"下载安装二进制文件\"></a>下载安装二进制文件</h5><p>目前最新版本是<a href=\"https://github.com/coreos/etcd/releases/tag/v3.3.4\" target=\"_blank\" rel=\"noopener\">v3.3.4</a>（截止到我写这篇文章的时候），而kubernetes v1.10验证过的版本为<a href=\"https://github.com/kubernetes/kubernetes/blob/master/CHANGELOG-1.10.md#external-dependencies\" target=\"_blank\" rel=\"noopener\"><code>3.1.12</code></a>,如果没有特殊需求请尽量使用验证版本（如果你是不升级不舒服斯基当我没说）找到对应的系统架构并直接下载:  <a href=\"https://github.com/coreos/etcd/releases/download/v3.1.12/etcd-v3.1.12-linux-amd64.tar.gz\" target=\"_blank\" rel=\"noopener\">https://github.com/coreos/etcd/releases/download/v3.1.12/etcd-v3.1.12-linux-amd64.tar.gz</a></p>\n<p>在所有需要安装etcd节点执行以下命令来安装<code>etcd和etcdctl</code>(注意:etcd目前不支持降级，如果你初始安装版本过高，后续像降级到验证版是比较麻烦的):</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/coreos/etcd/releases/download/v3.1.12/etcd-v3.1.12-linux-amd64.tar.gz</span><br><span class=\"line\">tar zxvf etcd-v3.1.12-linux-amd64.tar.gz</span><br><span class=\"line\"><span class=\"built_in\">cd</span> etcd-v3.1.12-linux-amd64</span><br><span class=\"line\">sudo mv etcd etcdctl /usr/<span class=\"built_in\">local</span>/bin/</span><br></pre></td></tr></table></figure>\n<h5 id=\"配置systemd-unit\"><a href=\"#配置systemd-unit\" class=\"headerlink\" title=\"配置systemd unit\"></a>配置systemd unit</h5><p>接着，我们需要编辑对应的systemd unit service文件，我们需要新建一个<code>etcd.service</code>文件并放置于以下路径：<code>/usr/lib/systemd/system/etcd.service</code>并键入以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[Unit]</span><br><span class=\"line\">Description=Etcd Server</span><br><span class=\"line\">After=network.target</span><br><span class=\"line\">After=network-online.target</span><br><span class=\"line\">Wants=network-online.target</span><br><span class=\"line\">Documentation=https://github.com/coreos</span><br><span class=\"line\"></span><br><span class=\"line\">[Service]</span><br><span class=\"line\">Type=notify</span><br><span class=\"line\">WorkingDirectory=/var/lib/etcd/</span><br><span class=\"line\">EnvironmentFile=-/etc/etcd/etcd.conf</span><br><span class=\"line\">ExecStart=/usr/local/bin/etcd \\</span><br><span class=\"line\">  --name $&#123;ETCD_NAME&#125; \\</span><br><span class=\"line\">  --cert-file=$&#123;ETCD_TRUST_CERT_FILE&#125; \\</span><br><span class=\"line\">  --key-file=$&#123;ETCD_TRUST_CERT_KEY&#125; \\</span><br><span class=\"line\">  --peer-cert-file=$&#123;ETCD_TRUST_CERT_FILE&#125; \\</span><br><span class=\"line\">  --peer-key-file=$&#123;ETCD_TRUST_CERT_KEY&#125; \\</span><br><span class=\"line\">  --trusted-ca-file=$&#123;ETCD_TRUST_CA_FILE&#125; \\</span><br><span class=\"line\">  --peer-trusted-ca-file=$&#123;ETCD_TRUST_CA_FILE&#125; \\</span><br><span class=\"line\">  --initial-advertise-peer-urls $&#123;ETCD_INITIAL_ADVERTISE_PEER_URLS&#125; \\</span><br><span class=\"line\">  --listen-peer-urls $&#123;ETCD_LISTEN_PEER_URLS&#125; \\</span><br><span class=\"line\">  --listen-client-urls $&#123;ETCD_LISTEN_CLIENT_URLS&#125; \\</span><br><span class=\"line\">  --advertise-client-urls $&#123;ETCD_ADVERTISE_CLIENT_URLS&#125; \\</span><br><span class=\"line\">  --initial-cluster-token $&#123;ETCD_INITIAL_CLUSTER_TOKEN&#125; \\</span><br><span class=\"line\">  --initial-cluster $&#123;ETCD_CLUSTER_NODE_LIST&#125; \\</span><br><span class=\"line\">  --initial-cluster-state new \\</span><br><span class=\"line\">  --data-dir=$&#123;ETCD_DATA_DIR&#125;</span><br><span class=\"line\">Restart=on-failure</span><br><span class=\"line\">RestartSec=5</span><br><span class=\"line\">LimitNOFILE=65536</span><br><span class=\"line\"></span><br><span class=\"line\">[Install]</span><br><span class=\"line\">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>\n<div class=\"note warning\"><ol>\n<li><code>WorkingDirectory</code>:指定 etcd 的工作目录和数据目录为 <code>/var/lib/etcd</code>，需在启动服务前创建这个目录。</li>\n<li>为了保证通信安全，需要指定 etcd 的公私钥(cert-file和key-file)、Peers 通信的公私钥和CA证书(peer-cert-file、peer-key-file、peer-trusted-ca-file)、客户端的CA证书（trusted-ca-file）。</li>\n<li><code>--initial-cluster-state</code> 值为 <code>new</code> 时，<code>--name</code> 的参数值必须位于 <code>--initial-cluster</code> 列表中。</li>\n<li>我们将其中一些参数的设置抽取为环境变量，以便于我们修改参数的时候不需要再次systemctl daemon-reload。</li>\n<li>带有<code>--peer-xxx</code>前缀的配置为etcd与其它etcd节点通信的相关配置，不带有的该前缀的则为客户端（例如：etcdctl）与etcd节点（作为服务器）通信的相关配置。</li>\n</ol></div>\n<p>对应的，我们在<code>/etc/etcd/etcd.conf</code>路径中新建一个<code>etcd.conf</code>文件并键入以下内容:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># [member]</span><br><span class=\"line\">ETCD_NAME=node1</span><br><span class=\"line\">ETCD_DATA_DIR=&quot;/var/lib/etcd&quot;</span><br><span class=\"line\">ETCD_LISTEN_PEER_URLS=&quot;https://0.0.0.0:2380&quot;</span><br><span class=\"line\">ETCD_LISTEN_CLIENT_URLS=&quot;https://0.0.0.0:2379&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">ETCD_TRUST_CA_FILE=&quot;/etc/kubernetes/ssl/ca.pem&quot;</span><br><span class=\"line\">ETCD_TRUST_CERT_FILE=&quot;/etc/kubernetes/ssl/etcd.pem&quot;</span><br><span class=\"line\">ETCD_TRUST_CERT_KEY=&quot;/etc/kubernetes/ssl/etcd-key.pem&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">#[cluster]</span><br><span class=\"line\">ETCD_INITIAL_ADVERTISE_PEER_URLS=&quot;https://10.138.148.161:2380&quot;</span><br><span class=\"line\">ETCD_INITIAL_CLUSTER_TOKEN=&quot;etcd-cluster&quot;</span><br><span class=\"line\">ETCD_ADVERTISE_CLIENT_URLS=&quot;https://10.138.148.161:2379&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">ETCD_CLUSTER_NODE_LIST=&quot;node1=https://10.138.148.161:2380,node2=https://10.138.196.180:2380,node3=https://10.138.212.68:2380&quot;</span><br></pre></td></tr></table></figure>\n<div class=\"note warning\"><ol>\n<li>这是节点IP为10.138.148.161的环境变量配置文件内容，对于其他节点，修改对应的<code>ETCD_NAME</code>为对应的node1、node2、node3，并将<code>ETCD_INITIAL_ADVERTISE_PEER_URLS</code>和<code>ETCD_INITIAL_ADVERTISE_PEER_URLS</code>修改为对应的节点的<code>ip</code>。</li>\n<li>此处需要特别说明的是：<code>ETCD_CLUSTER_NODE_LIST</code>中的ip必须在生成etcd TLS证书时在<code>etcd-csr.json</code>中的<code>hosts</code>字段中指定（Subject Alternative Name（SAN）），否则可能会得到<code>(error &quot;remote error: tls: bad certificate&quot;, ServerName &quot;&quot;)</code>这样的错误。</li>\n<li>所有需要加入的节点都需要在<code>ETCD_CLUSTER_NODE_LIST</code>中指定，并正确配置其<code>ETCD_NAME</code>。</li>\n</ol></div>\n<hr>\n<h5 id=\"验证etcd安装\"><a href=\"#验证etcd安装\" class=\"headerlink\" title=\"验证etcd安装\"></a>验证etcd安装</h5><p>在所有的节点上完成了上述两步之后，我们分别执行以下命令来启动etcd（初始可能会阻塞一段时间）:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl daemon-reload</span><br><span class=\"line\">sudo systemctl start etcd</span><br></pre></td></tr></table></figure>\n<p>如果配置正确，那么上述命令执行结果应该是任何输出的。如果结果有错，请参照上述配置和环境变量文件检查配置。一旦我们顺利启动<code>etcd</code>服务，我们还需要正确检查我们的<code>etcd</code>集群是否可用，在<code>etcd</code>集群中任一节点中执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">etcdctl --endpoint https://127.0.0.1:2379   \\</span><br><span class=\"line\">--ca-file=/etc/kubernetes/ssl/ca.pem        \\</span><br><span class=\"line\">--cert-file=/etc/kubernetes/ssl/etcd.pem    \\</span><br><span class=\"line\">--key-file=/etc/kubernetes/ssl/etcd-key.pem \\</span><br><span class=\"line\">cluster-health</span><br></pre></td></tr></table></figure>\n<p>在一切正常情况下，你会得到类似如下的输出结果:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">member 245a74588a3e85d0 is healthy: got healthy result from https://xxx.xxx.xxx.xxx:2379</span><br><span class=\"line\">member 953bacee4a009939 is healthy: got healthy result from https://xxx.xxx.xxx.xxx:2379</span><br><span class=\"line\">member f43a05b0ce1a8ed6 is healthy: got healthy result from https://xxx.xxx.xxx.xxx:2379</span><br><span class=\"line\">cluster is healthy</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"后记\"><a href=\"#后记\" class=\"headerlink\" title=\"后记\"></a>后记</h4><p>需要特别说明的是：<code>etcd</code>集群是否和<code>kubernetes</code>部署在同样的服务器节点上是<code>可选的</code>。也就是说<code>etcd</code>集群可以脱离<code>kubernetes</code>部署的集群而单独部署在其他单独的服务器上，且并不需要和<code>kubernetes</code>节点数对应。经过我的实践如果有条件的话请务必：</p>\n<ul>\n<li>将etcd部署在kubernetes的Node节点之外负载比较低的服务器节点上。</li>\n<li>etcd的集群数量尽量为奇数，以确保某些情况下部分etcd节点挂掉的选举问题。</li>\n</ul>\n<hr>\n<p>至此，我们的<code>etcd</code>集群已经顺利安装完成。接下来安装flannel插件。</p>\n<h4 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h4><ul>\n<li><a href=\"https://jimmysong.io/kubernetes-handbook/practice/install-kubernetes-on-centos.html\" target=\"_blank\" rel=\"noopener\">在CentOS上部署kubernetes集群</a></li>\n</ul>"},{"title":"lua读取redis数据的null判断","date":"2018-01-26T04:40:08.000Z","_content":"\n\n\n最近在配合移动端调试的时候，被抓去debug一个在清除redis缓存之后才会出现的网关错误。于是打开服务器上的log定位到类似错误:\n\n\n\n```log\n[error] 7#7: *12030 lua entry thread aborted: runtime error: /data/share/apps/lua/access_check.lua:133: bad argument #1 to 'decode' (string expected, got userdata)\n```\n\n该段代码的主要作用是在`openresty`中`lua`读取`redis`中数据并解码为`json`：\n\n```lua\n\tlocal access_token = redis_client:read_by_key(token_key)\n    if access_token == nil then\n        -- do something...\n        return false\n    end\n\n    local obj_token = cjson.decode(access_token)\n    -- do something\n```\n\n通过查询资料得知原因：**`lua`读取`redis`数据返回结果为空时，返回的结果不是`nil`而是`userdata`类型的`ngx.null`。**\n\n-------------\n\n<!--more-->\n\n#### [为什么要这么设计？](https://github.com/openresty/lua-resty-redis/issues/90)\n\n> 因为`nil`在`lua`中有特殊的意义，如果一个变量被设置为`nil`相当于告知该变量`未定义`(不存在)一样，如果把`redis`查询的结果为空设置为`nil`，而该查询的`key`对应在`redis`中又是存在的，就无法把`查询为空`和`未定义`区分开来了，这样显然是不合理的。所以必须使用一个`userdata`类型的值来表示这个查询记录为空，但是又不等同于`未定义变量`（ngx.null)。\n\n-----------------\n\n因此，代码做如下修改即可:\n\n```lua\n\tlocal access_token = redis_client:read_by_key(token_key)\n    if access_token == ngx.null or access_token == nil then\n        -- do something...\n        return false\n    end\n\n    local obj_token = cjson.decode(access_token)\n    -- do something\n```\n\n","source":"_posts/lua读取redis数据的null判断.md","raw":"title: lua读取redis数据的null判断\ndate: 2018-1-26 12:40:08\ntags:\n\n- openresty\n- lua\n- Redis\n\n---\n\n\n\n最近在配合移动端调试的时候，被抓去debug一个在清除redis缓存之后才会出现的网关错误。于是打开服务器上的log定位到类似错误:\n\n\n\n```log\n[error] 7#7: *12030 lua entry thread aborted: runtime error: /data/share/apps/lua/access_check.lua:133: bad argument #1 to 'decode' (string expected, got userdata)\n```\n\n该段代码的主要作用是在`openresty`中`lua`读取`redis`中数据并解码为`json`：\n\n```lua\n\tlocal access_token = redis_client:read_by_key(token_key)\n    if access_token == nil then\n        -- do something...\n        return false\n    end\n\n    local obj_token = cjson.decode(access_token)\n    -- do something\n```\n\n通过查询资料得知原因：**`lua`读取`redis`数据返回结果为空时，返回的结果不是`nil`而是`userdata`类型的`ngx.null`。**\n\n-------------\n\n<!--more-->\n\n#### [为什么要这么设计？](https://github.com/openresty/lua-resty-redis/issues/90)\n\n> 因为`nil`在`lua`中有特殊的意义，如果一个变量被设置为`nil`相当于告知该变量`未定义`(不存在)一样，如果把`redis`查询的结果为空设置为`nil`，而该查询的`key`对应在`redis`中又是存在的，就无法把`查询为空`和`未定义`区分开来了，这样显然是不合理的。所以必须使用一个`userdata`类型的值来表示这个查询记录为空，但是又不等同于`未定义变量`（ngx.null)。\n\n-----------------\n\n因此，代码做如下修改即可:\n\n```lua\n\tlocal access_token = redis_client:read_by_key(token_key)\n    if access_token == ngx.null or access_token == nil then\n        -- do something...\n        return false\n    end\n\n    local obj_token = cjson.decode(access_token)\n    -- do something\n```\n\n","slug":"lua读取redis数据的null判断","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb9g001l2ev2lqtqkiqi","content":"<p>最近在配合移动端调试的时候，被抓去debug一个在清除redis缓存之后才会出现的网关错误。于是打开服务器上的log定位到类似错误:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[error] 7#7: *12030 lua entry thread aborted: runtime error: /data/share/apps/lua/access_check.lua:133: bad argument #1 to &apos;decode&apos; (string expected, got userdata)</span><br></pre></td></tr></table></figure>\n<p>该段代码的主要作用是在<code>openresty</code>中<code>lua</code>读取<code>redis</code>中数据并解码为<code>json</code>：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> access_token = redis_client:read_by_key(token_key)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> access_token == <span class=\"literal\">nil</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">       <span class=\"comment\">-- do something...</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">   <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">local</span> obj_token = cjson.decode(access_token)</span><br><span class=\"line\">   <span class=\"comment\">-- do something</span></span><br></pre></td></tr></table></figure>\n<p>通过查询资料得知原因：<strong><code>lua</code>读取<code>redis</code>数据返回结果为空时，返回的结果不是<code>nil</code>而是<code>userdata</code>类型的<code>ngx.null</code>。</strong></p>\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"为什么要这么设计？\"><a href=\"#为什么要这么设计？\" class=\"headerlink\" title=\"为什么要这么设计？\"></a><a href=\"https://github.com/openresty/lua-resty-redis/issues/90\" target=\"_blank\" rel=\"noopener\">为什么要这么设计？</a></h4><blockquote>\n<p>因为<code>nil</code>在<code>lua</code>中有特殊的意义，如果一个变量被设置为<code>nil</code>相当于告知该变量<code>未定义</code>(不存在)一样，如果把<code>redis</code>查询的结果为空设置为<code>nil</code>，而该查询的<code>key</code>对应在<code>redis</code>中又是存在的，就无法把<code>查询为空</code>和<code>未定义</code>区分开来了，这样显然是不合理的。所以必须使用一个<code>userdata</code>类型的值来表示这个查询记录为空，但是又不等同于<code>未定义变量</code>（ngx.null)。</p>\n</blockquote>\n<hr>\n<p>因此，代码做如下修改即可:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> access_token = redis_client:read_by_key(token_key)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> access_token == ngx.null <span class=\"keyword\">or</span> access_token == <span class=\"literal\">nil</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">       <span class=\"comment\">-- do something...</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">   <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">local</span> obj_token = cjson.decode(access_token)</span><br><span class=\"line\">   <span class=\"comment\">-- do something</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>最近在配合移动端调试的时候，被抓去debug一个在清除redis缓存之后才会出现的网关错误。于是打开服务器上的log定位到类似错误:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[error] 7#7: *12030 lua entry thread aborted: runtime error: /data/share/apps/lua/access_check.lua:133: bad argument #1 to &apos;decode&apos; (string expected, got userdata)</span><br></pre></td></tr></table></figure>\n<p>该段代码的主要作用是在<code>openresty</code>中<code>lua</code>读取<code>redis</code>中数据并解码为<code>json</code>：</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> access_token = redis_client:read_by_key(token_key)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> access_token == <span class=\"literal\">nil</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">       <span class=\"comment\">-- do something...</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">   <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">local</span> obj_token = cjson.decode(access_token)</span><br><span class=\"line\">   <span class=\"comment\">-- do something</span></span><br></pre></td></tr></table></figure>\n<p>通过查询资料得知原因：<strong><code>lua</code>读取<code>redis</code>数据返回结果为空时，返回的结果不是<code>nil</code>而是<code>userdata</code>类型的<code>ngx.null</code>。</strong></p>\n<hr>","more":"<h4 id=\"为什么要这么设计？\"><a href=\"#为什么要这么设计？\" class=\"headerlink\" title=\"为什么要这么设计？\"></a><a href=\"https://github.com/openresty/lua-resty-redis/issues/90\" target=\"_blank\" rel=\"noopener\">为什么要这么设计？</a></h4><blockquote>\n<p>因为<code>nil</code>在<code>lua</code>中有特殊的意义，如果一个变量被设置为<code>nil</code>相当于告知该变量<code>未定义</code>(不存在)一样，如果把<code>redis</code>查询的结果为空设置为<code>nil</code>，而该查询的<code>key</code>对应在<code>redis</code>中又是存在的，就无法把<code>查询为空</code>和<code>未定义</code>区分开来了，这样显然是不合理的。所以必须使用一个<code>userdata</code>类型的值来表示这个查询记录为空，但是又不等同于<code>未定义变量</code>（ngx.null)。</p>\n</blockquote>\n<hr>\n<p>因此，代码做如下修改即可:</p>\n<figure class=\"highlight lua\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">local</span> access_token = redis_client:read_by_key(token_key)</span><br><span class=\"line\">   <span class=\"keyword\">if</span> access_token == ngx.null <span class=\"keyword\">or</span> access_token == <span class=\"literal\">nil</span> <span class=\"keyword\">then</span></span><br><span class=\"line\">       <span class=\"comment\">-- do something...</span></span><br><span class=\"line\">       <span class=\"keyword\">return</span> <span class=\"literal\">false</span></span><br><span class=\"line\">   <span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"keyword\">local</span> obj_token = cjson.decode(access_token)</span><br><span class=\"line\">   <span class=\"comment\">-- do something</span></span><br></pre></td></tr></table></figure>"},{"title":"基于Debian Linux搭建Git服务器","date":"2015-07-18T09:47:37.000Z","isupdate":true,"updatetime":"2015-07-19T16:00:00.000Z","_content":"\n&ensp;&ensp;&ensp;&ensp;因为一些众所周知的原因，某些项目不适合开源（代码写的烂我会乱说？(╯﹏╰)b ）。又因为博主不是壕，买不起Github的私有空间，所以只能利用手头上的Debian服务器搭建Git服务器咯~\n\n\n\n-----\n\n### 安装Git\n\n    要搭建Git服务器，第一步当然是要安装Git了，键入以下命令来完成Git的安装：\n\n```bash\nsudo apt-get install git\n```\n\n### 新建Git用户\n\n&ensp;&ensp;&ensp;&ensp;出于安全的原因考虑，我们肯定是不会使用`root`或者其它具有完整的shell执行权限的用户来运行Git的。因此，我们需要创建一个`git`用户来运行`git`服务。\n\n键入以下命令来完成`git`用户的创建：\n\n```bash\nsudo adduser git\n```\n\n创建用户的途中会要求输入用户密码，这个密码请务必记住，这个密码的作用我们后面再说。`git`用户的其它配置使用默认值直接回车就行。\n\n### 禁用shell登录\n\n`git`用户创建完成之后，系统默认是为其分配的`bash`的，我们不希望`git`用户拥有shell执行权限，因此我们需要更改`git`用户的默认shell，使其不允许登录shell。\n\n我们可以通过编辑<font color=red>`/etc/passwd`</font>文件来完成对`git`用户shell的更改。\n\n键入以下命令编辑<font color=red>`/etc/passwd`</font>文件：\n\n```bash\nvim /etc/passwd\n```\n<!--more-->\n\n找到类似下面的一行（一般在文件的末尾）：\n\n```bash\ngit:x:1000:1000:,,,:/home/git:/usr/bin/bash\n```\n修改为：\n```bash\ngit:x:1000:1000:,,,:/home/git:/usr/bin/git-shell\n```\n如果你不确定<font color=red>`git-shell`</font>是不是在<font color=red>`/usr/bin/git-shell`</font>这个位置的话，可以使用以下命令来查看`git-shell`的路径：\n```bash\nwhich git-shell\n```\n\n这样，`git`用户可以正常通过`ssh`使用git，但无法登录shell，因为我们为`git用户`指定的`git-shell`每次一登录就自动退出。\n\n### Git密钥登录\n\n既然是私有Git服务器，当然必要的`push`和`pull`以及`clone`等操作不能让其他未经允许的人使用了。当然，我们也不想每次进行远程仓库操作的时候都输入`git`用户的密码。\n\n因此，通过ssh密钥证书的方式就很有必要了~\n\n- 如同Github导入公钥一样，首先收集授权访问用户的公钥文件，也就是他们的<font color=red>`id_rsa.pub`</font>文件。\n- 复制`id_rsa.pub`文件其中全部的内容。\n- 将<font color=red>`id_rsa.pub`</font>文件其中全部的内容导入到Git服务器的<font color=red>`/home/git/.ssh/authorized_keys`</font>文件中，每一行导入一个公钥文件。\n\n如果没有<font color=red>`/home/git/.ssh/authorized_keys`</font>文件，请执行以下命令自行创建：\n```bash\ncd /home/git\nmkdir .ssh\ncd .ssh\ntouch authorized_keys\n```\n**这样，凡是添加了公钥到<font color=red>`/home/git/.ssh/authorized_keys`</font>文件的用户都能够正常的使用远程仓库的常用操作了，如果Git公钥没有被添加到<font color=red>`/home/git/.ssh/authorized_keys`</font>文件中又想执行远程仓库的操作的话，那么就需要用到上面`git`用户的密码了，因为`git`会要求输入Git服务器的`git`用户的密码。这就是上面设置`git`用户密码的作用了~**\n\n### 初始化服务器Git仓库\n\n上面的准备工作做完，就需要在Git服务器上选定一个目录作为Git仓库了。假定我们选择<font color=red>`/gitserver/Demo.git`</font>作为Git仓库，那么我们首先需要执行以下命令创建<font color=red>`/gitserver`</font>目录：\n\n```bash\ncd /\nmkdir gitserver\ncd gitserver\n```\n然后进入`gitserver`目录，执行以下命令：\n\n```bash\nsudo git init --bare demo.git\n```\nGit就会创建一个裸仓库，裸仓库没有工作区，因为Git服务器上的Git仓库主要是为了共享，所以不让用户直接登录到Git服务器上去修改工作区。\n\n**Git服务器上的Git仓库通常都以<font color=red>`.git`</font>结尾。**\n\n### 修改Git仓库owner\n\n创建好仓库之后，我们需要将仓库的owner设置为`git`用户，不让我们前面为`git`用户所做的配置就没啥意义了~\n\n执行以下命令，修改仓库的owner：\n```bash\nsudo chown -R git:git demo.git\n```\n\n### 克隆远程仓库\n\n现在就可以通过`git clone`命令克隆Git服务器上的`demo`仓库了，在各自的PC上执行以下命令以完成克隆：\n\n```bash\n$ git clone ssh://git@server:/gitserver/demo.git\nCloning into 'demo'...\nwarning: You appear to have cloned an empty repository.\n```\n\n其中需要注意的是：\n\n- 上述命令`git clone ssh://git@SERVER:/gitserver/demo.git`中,<font color=red>`SERVER`</font>的值为你的服务器的<font color=red>`ip地址`</font>或者<font color=red>`域名`</font>。\n- 如果你的服务器更改了默认的ssh端口号，那么需要在地址中指出，像这样：\n\n```bash\n$ git clone ssh://git@server:PORT/gitserver/demo.git\n```\n其中<font color=red>`PORT`</font>即为更改之后的ssh端口号。\n\n例如，博主对服务器做了A记录的域名解析，也更改了默认端口号为9669，那么执行的克隆地址的命令即为：\n```bash\n$ git clone ssh://git@server.xiamo.tk:9669/gitserver/demo.git\n```\n\n后面的操作不用我多说，大家也都懂的了~","source":"_posts/基于Debian-Linux搭建Git服务器.md","raw":"title: 基于Debian Linux搭建Git服务器\ndate: 2015-07-18 17:47:37\nisupdate: true\nupdatetime: 2015-07-20\ntags: \n- Git\n- Linux\ncategories: Linux\n---\n\n&ensp;&ensp;&ensp;&ensp;因为一些众所周知的原因，某些项目不适合开源（代码写的烂我会乱说？(╯﹏╰)b ）。又因为博主不是壕，买不起Github的私有空间，所以只能利用手头上的Debian服务器搭建Git服务器咯~\n\n\n\n-----\n\n### 安装Git\n\n    要搭建Git服务器，第一步当然是要安装Git了，键入以下命令来完成Git的安装：\n\n```bash\nsudo apt-get install git\n```\n\n### 新建Git用户\n\n&ensp;&ensp;&ensp;&ensp;出于安全的原因考虑，我们肯定是不会使用`root`或者其它具有完整的shell执行权限的用户来运行Git的。因此，我们需要创建一个`git`用户来运行`git`服务。\n\n键入以下命令来完成`git`用户的创建：\n\n```bash\nsudo adduser git\n```\n\n创建用户的途中会要求输入用户密码，这个密码请务必记住，这个密码的作用我们后面再说。`git`用户的其它配置使用默认值直接回车就行。\n\n### 禁用shell登录\n\n`git`用户创建完成之后，系统默认是为其分配的`bash`的，我们不希望`git`用户拥有shell执行权限，因此我们需要更改`git`用户的默认shell，使其不允许登录shell。\n\n我们可以通过编辑<font color=red>`/etc/passwd`</font>文件来完成对`git`用户shell的更改。\n\n键入以下命令编辑<font color=red>`/etc/passwd`</font>文件：\n\n```bash\nvim /etc/passwd\n```\n<!--more-->\n\n找到类似下面的一行（一般在文件的末尾）：\n\n```bash\ngit:x:1000:1000:,,,:/home/git:/usr/bin/bash\n```\n修改为：\n```bash\ngit:x:1000:1000:,,,:/home/git:/usr/bin/git-shell\n```\n如果你不确定<font color=red>`git-shell`</font>是不是在<font color=red>`/usr/bin/git-shell`</font>这个位置的话，可以使用以下命令来查看`git-shell`的路径：\n```bash\nwhich git-shell\n```\n\n这样，`git`用户可以正常通过`ssh`使用git，但无法登录shell，因为我们为`git用户`指定的`git-shell`每次一登录就自动退出。\n\n### Git密钥登录\n\n既然是私有Git服务器，当然必要的`push`和`pull`以及`clone`等操作不能让其他未经允许的人使用了。当然，我们也不想每次进行远程仓库操作的时候都输入`git`用户的密码。\n\n因此，通过ssh密钥证书的方式就很有必要了~\n\n- 如同Github导入公钥一样，首先收集授权访问用户的公钥文件，也就是他们的<font color=red>`id_rsa.pub`</font>文件。\n- 复制`id_rsa.pub`文件其中全部的内容。\n- 将<font color=red>`id_rsa.pub`</font>文件其中全部的内容导入到Git服务器的<font color=red>`/home/git/.ssh/authorized_keys`</font>文件中，每一行导入一个公钥文件。\n\n如果没有<font color=red>`/home/git/.ssh/authorized_keys`</font>文件，请执行以下命令自行创建：\n```bash\ncd /home/git\nmkdir .ssh\ncd .ssh\ntouch authorized_keys\n```\n**这样，凡是添加了公钥到<font color=red>`/home/git/.ssh/authorized_keys`</font>文件的用户都能够正常的使用远程仓库的常用操作了，如果Git公钥没有被添加到<font color=red>`/home/git/.ssh/authorized_keys`</font>文件中又想执行远程仓库的操作的话，那么就需要用到上面`git`用户的密码了，因为`git`会要求输入Git服务器的`git`用户的密码。这就是上面设置`git`用户密码的作用了~**\n\n### 初始化服务器Git仓库\n\n上面的准备工作做完，就需要在Git服务器上选定一个目录作为Git仓库了。假定我们选择<font color=red>`/gitserver/Demo.git`</font>作为Git仓库，那么我们首先需要执行以下命令创建<font color=red>`/gitserver`</font>目录：\n\n```bash\ncd /\nmkdir gitserver\ncd gitserver\n```\n然后进入`gitserver`目录，执行以下命令：\n\n```bash\nsudo git init --bare demo.git\n```\nGit就会创建一个裸仓库，裸仓库没有工作区，因为Git服务器上的Git仓库主要是为了共享，所以不让用户直接登录到Git服务器上去修改工作区。\n\n**Git服务器上的Git仓库通常都以<font color=red>`.git`</font>结尾。**\n\n### 修改Git仓库owner\n\n创建好仓库之后，我们需要将仓库的owner设置为`git`用户，不让我们前面为`git`用户所做的配置就没啥意义了~\n\n执行以下命令，修改仓库的owner：\n```bash\nsudo chown -R git:git demo.git\n```\n\n### 克隆远程仓库\n\n现在就可以通过`git clone`命令克隆Git服务器上的`demo`仓库了，在各自的PC上执行以下命令以完成克隆：\n\n```bash\n$ git clone ssh://git@server:/gitserver/demo.git\nCloning into 'demo'...\nwarning: You appear to have cloned an empty repository.\n```\n\n其中需要注意的是：\n\n- 上述命令`git clone ssh://git@SERVER:/gitserver/demo.git`中,<font color=red>`SERVER`</font>的值为你的服务器的<font color=red>`ip地址`</font>或者<font color=red>`域名`</font>。\n- 如果你的服务器更改了默认的ssh端口号，那么需要在地址中指出，像这样：\n\n```bash\n$ git clone ssh://git@server:PORT/gitserver/demo.git\n```\n其中<font color=red>`PORT`</font>即为更改之后的ssh端口号。\n\n例如，博主对服务器做了A记录的域名解析，也更改了默认端口号为9669，那么执行的克隆地址的命令即为：\n```bash\n$ git clone ssh://git@server.xiamo.tk:9669/gitserver/demo.git\n```\n\n后面的操作不用我多说，大家也都懂的了~","slug":"基于Debian-Linux搭建Git服务器","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb9h001p2ev2lhsbd24h","content":"<p>&ensp;&ensp;&ensp;&ensp;因为一些众所周知的原因，某些项目不适合开源（代码写的烂我会乱说？(╯﹏╰)b ）。又因为博主不是壕，买不起Github的私有空间，所以只能利用手头上的Debian服务器搭建Git服务器咯~</p>\n<hr>\n<h3 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h3><p>    要搭建Git服务器，第一步当然是要安装Git了，键入以下命令来完成Git的安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure>\n<h3 id=\"新建Git用户\"><a href=\"#新建Git用户\" class=\"headerlink\" title=\"新建Git用户\"></a>新建Git用户</h3><p>&ensp;&ensp;&ensp;&ensp;出于安全的原因考虑，我们肯定是不会使用<code>root</code>或者其它具有完整的shell执行权限的用户来运行Git的。因此，我们需要创建一个<code>git</code>用户来运行<code>git</code>服务。</p>\n<p>键入以下命令来完成<code>git</code>用户的创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo adduser git</span><br></pre></td></tr></table></figure>\n<p>创建用户的途中会要求输入用户密码，这个密码请务必记住，这个密码的作用我们后面再说。<code>git</code>用户的其它配置使用默认值直接回车就行。</p>\n<h3 id=\"禁用shell登录\"><a href=\"#禁用shell登录\" class=\"headerlink\" title=\"禁用shell登录\"></a>禁用shell登录</h3><p><code>git</code>用户创建完成之后，系统默认是为其分配的<code>bash</code>的，我们不希望<code>git</code>用户拥有shell执行权限，因此我们需要更改<code>git</code>用户的默认shell，使其不允许登录shell。</p>\n<p>我们可以通过编辑<font color=\"red\"><code>/etc/passwd</code></font>文件来完成对<code>git</code>用户shell的更改。</p>\n<p>键入以下命令编辑<font color=\"red\"><code>/etc/passwd</code></font>文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/passwd</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a>\n<p>找到类似下面的一行（一般在文件的末尾）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git:x:1000:1000:,,,:/home/git:/usr/bin/bash</span><br></pre></td></tr></table></figure>\n<p>修改为：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git:x:1000:1000:,,,:/home/git:/usr/bin/git-shell</span><br></pre></td></tr></table></figure></p>\n<p>如果你不确定<font color=\"red\"><code>git-shell</code></font>是不是在<font color=\"red\"><code>/usr/bin/git-shell</code></font>这个位置的话，可以使用以下命令来查看<code>git-shell</code>的路径：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">which</span> git-shell</span><br></pre></td></tr></table></figure></p>\n<p>这样，<code>git</code>用户可以正常通过<code>ssh</code>使用git，但无法登录shell，因为我们为<code>git用户</code>指定的<code>git-shell</code>每次一登录就自动退出。</p>\n<h3 id=\"Git密钥登录\"><a href=\"#Git密钥登录\" class=\"headerlink\" title=\"Git密钥登录\"></a>Git密钥登录</h3><p>既然是私有Git服务器，当然必要的<code>push</code>和<code>pull</code>以及<code>clone</code>等操作不能让其他未经允许的人使用了。当然，我们也不想每次进行远程仓库操作的时候都输入<code>git</code>用户的密码。</p>\n<p>因此，通过ssh密钥证书的方式就很有必要了~</p>\n<ul>\n<li>如同Github导入公钥一样，首先收集授权访问用户的公钥文件，也就是他们的<font color=\"red\"><code>id_rsa.pub</code></font>文件。</li>\n<li>复制<code>id_rsa.pub</code>文件其中全部的内容。</li>\n<li>将<font color=\"red\"><code>id_rsa.pub</code></font>文件其中全部的内容导入到Git服务器的<font color=\"red\"><code>/home/git/.ssh/authorized_keys</code></font>文件中，每一行导入一个公钥文件。</li>\n</ul>\n<p>如果没有<font color=\"red\"><code>/home/git/.ssh/authorized_keys</code></font>文件，请执行以下命令自行创建：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /home/git</span><br><span class=\"line\">mkdir .ssh</span><br><span class=\"line\"><span class=\"built_in\">cd</span> .ssh</span><br><span class=\"line\">touch authorized_keys</span><br></pre></td></tr></table></figure></p>\n<p><strong>这样，凡是添加了公钥到<font color=\"red\"><code>/home/git/.ssh/authorized_keys</code></font>文件的用户都能够正常的使用远程仓库的常用操作了，如果Git公钥没有被添加到<font color=\"red\"><code>/home/git/.ssh/authorized_keys</code></font>文件中又想执行远程仓库的操作的话，那么就需要用到上面<code>git</code>用户的密码了，因为<code>git</code>会要求输入Git服务器的<code>git</code>用户的密码。这就是上面设置<code>git</code>用户密码的作用了~</strong></p>\n<h3 id=\"初始化服务器Git仓库\"><a href=\"#初始化服务器Git仓库\" class=\"headerlink\" title=\"初始化服务器Git仓库\"></a>初始化服务器Git仓库</h3><p>上面的准备工作做完，就需要在Git服务器上选定一个目录作为Git仓库了。假定我们选择<font color=\"red\"><code>/gitserver/Demo.git</code></font>作为Git仓库，那么我们首先需要执行以下命令创建<font color=\"red\"><code>/gitserver</code></font>目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /</span><br><span class=\"line\">mkdir gitserver</span><br><span class=\"line\"><span class=\"built_in\">cd</span> gitserver</span><br></pre></td></tr></table></figure>\n<p>然后进入<code>gitserver</code>目录，执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo git init --bare demo.git</span><br></pre></td></tr></table></figure>\n<p>Git就会创建一个裸仓库，裸仓库没有工作区，因为Git服务器上的Git仓库主要是为了共享，所以不让用户直接登录到Git服务器上去修改工作区。</p>\n<p><strong>Git服务器上的Git仓库通常都以<font color=\"red\"><code>.git</code></font>结尾。</strong></p>\n<h3 id=\"修改Git仓库owner\"><a href=\"#修改Git仓库owner\" class=\"headerlink\" title=\"修改Git仓库owner\"></a>修改Git仓库owner</h3><p>创建好仓库之后，我们需要将仓库的owner设置为<code>git</code>用户，不让我们前面为<code>git</code>用户所做的配置就没啥意义了~</p>\n<p>执行以下命令，修改仓库的owner：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown -R git:git demo.git</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"克隆远程仓库\"><a href=\"#克隆远程仓库\" class=\"headerlink\" title=\"克隆远程仓库\"></a>克隆远程仓库</h3><p>现在就可以通过<code>git clone</code>命令克隆Git服务器上的<code>demo</code>仓库了，在各自的PC上执行以下命令以完成克隆：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> ssh://git@server:/gitserver/demo.git</span><br><span class=\"line\">Cloning into <span class=\"string\">'demo'</span>...</span><br><span class=\"line\">warning: You appear to have cloned an empty repository.</span><br></pre></td></tr></table></figure>\n<p>其中需要注意的是：</p>\n<ul>\n<li>上述命令<code>git clone ssh://git@SERVER:/gitserver/demo.git</code>中,<font color=\"red\"><code>SERVER</code></font>的值为你的服务器的<font color=\"red\"><code>ip地址</code></font>或者<font color=\"red\"><code>域名</code></font>。</li>\n<li>如果你的服务器更改了默认的ssh端口号，那么需要在地址中指出，像这样：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> ssh://git@server:PORT/gitserver/demo.git</span><br></pre></td></tr></table></figure>\n<p>其中<font color=\"red\"><code>PORT</code></font>即为更改之后的ssh端口号。</p>\n<p>例如，博主对服务器做了A记录的域名解析，也更改了默认端口号为9669，那么执行的克隆地址的命令即为：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> ssh://git@server.xiamo.tk:9669/gitserver/demo.git</span><br></pre></td></tr></table></figure></p>\n<p>后面的操作不用我多说，大家也都懂的了~</p>\n","site":{"data":{}},"excerpt":"<p>&ensp;&ensp;&ensp;&ensp;因为一些众所周知的原因，某些项目不适合开源（代码写的烂我会乱说？(╯﹏╰)b ）。又因为博主不是壕，买不起Github的私有空间，所以只能利用手头上的Debian服务器搭建Git服务器咯~</p>\n<hr>\n<h3 id=\"安装Git\"><a href=\"#安装Git\" class=\"headerlink\" title=\"安装Git\"></a>安装Git</h3><p>    要搭建Git服务器，第一步当然是要安装Git了，键入以下命令来完成Git的安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get install git</span><br></pre></td></tr></table></figure>\n<h3 id=\"新建Git用户\"><a href=\"#新建Git用户\" class=\"headerlink\" title=\"新建Git用户\"></a>新建Git用户</h3><p>&ensp;&ensp;&ensp;&ensp;出于安全的原因考虑，我们肯定是不会使用<code>root</code>或者其它具有完整的shell执行权限的用户来运行Git的。因此，我们需要创建一个<code>git</code>用户来运行<code>git</code>服务。</p>\n<p>键入以下命令来完成<code>git</code>用户的创建：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo adduser git</span><br></pre></td></tr></table></figure>\n<p>创建用户的途中会要求输入用户密码，这个密码请务必记住，这个密码的作用我们后面再说。<code>git</code>用户的其它配置使用默认值直接回车就行。</p>\n<h3 id=\"禁用shell登录\"><a href=\"#禁用shell登录\" class=\"headerlink\" title=\"禁用shell登录\"></a>禁用shell登录</h3><p><code>git</code>用户创建完成之后，系统默认是为其分配的<code>bash</code>的，我们不希望<code>git</code>用户拥有shell执行权限，因此我们需要更改<code>git</code>用户的默认shell，使其不允许登录shell。</p>\n<p>我们可以通过编辑<font color=\"red\"><code>/etc/passwd</code></font>文件来完成对<code>git</code>用户shell的更改。</p>\n<p>键入以下命令编辑<font color=\"red\"><code>/etc/passwd</code></font>文件：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/passwd</span><br></pre></td></tr></table></figure>","more":"<p>找到类似下面的一行（一般在文件的末尾）：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git:x:1000:1000:,,,:/home/git:/usr/bin/bash</span><br></pre></td></tr></table></figure>\n<p>修改为：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git:x:1000:1000:,,,:/home/git:/usr/bin/git-shell</span><br></pre></td></tr></table></figure></p>\n<p>如果你不确定<font color=\"red\"><code>git-shell</code></font>是不是在<font color=\"red\"><code>/usr/bin/git-shell</code></font>这个位置的话，可以使用以下命令来查看<code>git-shell</code>的路径：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">which</span> git-shell</span><br></pre></td></tr></table></figure></p>\n<p>这样，<code>git</code>用户可以正常通过<code>ssh</code>使用git，但无法登录shell，因为我们为<code>git用户</code>指定的<code>git-shell</code>每次一登录就自动退出。</p>\n<h3 id=\"Git密钥登录\"><a href=\"#Git密钥登录\" class=\"headerlink\" title=\"Git密钥登录\"></a>Git密钥登录</h3><p>既然是私有Git服务器，当然必要的<code>push</code>和<code>pull</code>以及<code>clone</code>等操作不能让其他未经允许的人使用了。当然，我们也不想每次进行远程仓库操作的时候都输入<code>git</code>用户的密码。</p>\n<p>因此，通过ssh密钥证书的方式就很有必要了~</p>\n<ul>\n<li>如同Github导入公钥一样，首先收集授权访问用户的公钥文件，也就是他们的<font color=\"red\"><code>id_rsa.pub</code></font>文件。</li>\n<li>复制<code>id_rsa.pub</code>文件其中全部的内容。</li>\n<li>将<font color=\"red\"><code>id_rsa.pub</code></font>文件其中全部的内容导入到Git服务器的<font color=\"red\"><code>/home/git/.ssh/authorized_keys</code></font>文件中，每一行导入一个公钥文件。</li>\n</ul>\n<p>如果没有<font color=\"red\"><code>/home/git/.ssh/authorized_keys</code></font>文件，请执行以下命令自行创建：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /home/git</span><br><span class=\"line\">mkdir .ssh</span><br><span class=\"line\"><span class=\"built_in\">cd</span> .ssh</span><br><span class=\"line\">touch authorized_keys</span><br></pre></td></tr></table></figure></p>\n<p><strong>这样，凡是添加了公钥到<font color=\"red\"><code>/home/git/.ssh/authorized_keys</code></font>文件的用户都能够正常的使用远程仓库的常用操作了，如果Git公钥没有被添加到<font color=\"red\"><code>/home/git/.ssh/authorized_keys</code></font>文件中又想执行远程仓库的操作的话，那么就需要用到上面<code>git</code>用户的密码了，因为<code>git</code>会要求输入Git服务器的<code>git</code>用户的密码。这就是上面设置<code>git</code>用户密码的作用了~</strong></p>\n<h3 id=\"初始化服务器Git仓库\"><a href=\"#初始化服务器Git仓库\" class=\"headerlink\" title=\"初始化服务器Git仓库\"></a>初始化服务器Git仓库</h3><p>上面的准备工作做完，就需要在Git服务器上选定一个目录作为Git仓库了。假定我们选择<font color=\"red\"><code>/gitserver/Demo.git</code></font>作为Git仓库，那么我们首先需要执行以下命令创建<font color=\"red\"><code>/gitserver</code></font>目录：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">cd</span> /</span><br><span class=\"line\">mkdir gitserver</span><br><span class=\"line\"><span class=\"built_in\">cd</span> gitserver</span><br></pre></td></tr></table></figure>\n<p>然后进入<code>gitserver</code>目录，执行以下命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo git init --bare demo.git</span><br></pre></td></tr></table></figure>\n<p>Git就会创建一个裸仓库，裸仓库没有工作区，因为Git服务器上的Git仓库主要是为了共享，所以不让用户直接登录到Git服务器上去修改工作区。</p>\n<p><strong>Git服务器上的Git仓库通常都以<font color=\"red\"><code>.git</code></font>结尾。</strong></p>\n<h3 id=\"修改Git仓库owner\"><a href=\"#修改Git仓库owner\" class=\"headerlink\" title=\"修改Git仓库owner\"></a>修改Git仓库owner</h3><p>创建好仓库之后，我们需要将仓库的owner设置为<code>git</code>用户，不让我们前面为<code>git</code>用户所做的配置就没啥意义了~</p>\n<p>执行以下命令，修改仓库的owner：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown -R git:git demo.git</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"克隆远程仓库\"><a href=\"#克隆远程仓库\" class=\"headerlink\" title=\"克隆远程仓库\"></a>克隆远程仓库</h3><p>现在就可以通过<code>git clone</code>命令克隆Git服务器上的<code>demo</code>仓库了，在各自的PC上执行以下命令以完成克隆：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> ssh://git@server:/gitserver/demo.git</span><br><span class=\"line\">Cloning into <span class=\"string\">'demo'</span>...</span><br><span class=\"line\">warning: You appear to have cloned an empty repository.</span><br></pre></td></tr></table></figure>\n<p>其中需要注意的是：</p>\n<ul>\n<li>上述命令<code>git clone ssh://git@SERVER:/gitserver/demo.git</code>中,<font color=\"red\"><code>SERVER</code></font>的值为你的服务器的<font color=\"red\"><code>ip地址</code></font>或者<font color=\"red\"><code>域名</code></font>。</li>\n<li>如果你的服务器更改了默认的ssh端口号，那么需要在地址中指出，像这样：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> ssh://git@server:PORT/gitserver/demo.git</span><br></pre></td></tr></table></figure>\n<p>其中<font color=\"red\"><code>PORT</code></font>即为更改之后的ssh端口号。</p>\n<p>例如，博主对服务器做了A记录的域名解析，也更改了默认端口号为9669，那么执行的克隆地址的命令即为：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ git <span class=\"built_in\">clone</span> ssh://git@server.xiamo.tk:9669/gitserver/demo.git</span><br></pre></td></tr></table></figure></p>\n<p>后面的操作不用我多说，大家也都懂的了~</p>"},{"title":"基于LeanCloud、Telegram实现多说评论推送","isupdate":false,"date":"2016-10-25T16:19:53.000Z","updatetime":null,"_content":"\n众所周知多说评论是不支持主动推送的，也就是说如果访客主动留言评论，多说是不会给我们邮件推送提醒的。但是我们总不能每隔一段时间去检查下博客的评论留言吧，这样效率也太低了ヾ(。￣□￣)ﾂ゜゜゜于是趁着最近闲的蛋疼折腾出了这么个东东，能够实现访客主动评论的时候，在5分钟之内响应并通过Telegram推送到手机上方便查看和浏览。\n\n--------------\n\n嗯，相关的源码和基本的部署说明丢在Github上了,感兴趣的可以<font color='red'>**[戳此查看](https://github.com/Doublemine/TelegramBot)**</font>。\n\n- [Telegram Bot For DuoShuo](https://github.com/Doublemine/TelegramBot)\n\n目前保证基本的功能能够稳定的运行，后续再添加一些其它的功能吧。嗯，详细的配置说明先挖个坑，改天再写。懒癌犯了，先休息~\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fh3r3jys56g208c08cx6p.jpg \"休息\")","source":"_posts/基于LeanCloud、Telegram实现多说评论推送.md","raw":"title: 基于LeanCloud、Telegram实现多说评论推送\nisupdate: false\ndate: 2016-10-26 00:19:53\nupdatetime:\ntags: \n- LeanCloud\n- Python\n- Telegram\ncategories: Python\n---\n\n众所周知多说评论是不支持主动推送的，也就是说如果访客主动留言评论，多说是不会给我们邮件推送提醒的。但是我们总不能每隔一段时间去检查下博客的评论留言吧，这样效率也太低了ヾ(。￣□￣)ﾂ゜゜゜于是趁着最近闲的蛋疼折腾出了这么个东东，能够实现访客主动评论的时候，在5分钟之内响应并通过Telegram推送到手机上方便查看和浏览。\n\n--------------\n\n嗯，相关的源码和基本的部署说明丢在Github上了,感兴趣的可以<font color='red'>**[戳此查看](https://github.com/Doublemine/TelegramBot)**</font>。\n\n- [Telegram Bot For DuoShuo](https://github.com/Doublemine/TelegramBot)\n\n目前保证基本的功能能够稳定的运行，后续再添加一些其它的功能吧。嗯，详细的配置说明先挖个坑，改天再写。懒癌犯了，先休息~\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fh3r3jys56g208c08cx6p.jpg \"休息\")","slug":"基于LeanCloud、Telegram实现多说评论推送","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb9i001r2ev29ei85b3l","content":"<p>众所周知多说评论是不支持主动推送的，也就是说如果访客主动留言评论，多说是不会给我们邮件推送提醒的。但是我们总不能每隔一段时间去检查下博客的评论留言吧，这样效率也太低了ヾ(。￣□￣)ﾂ゜゜゜于是趁着最近闲的蛋疼折腾出了这么个东东，能够实现访客主动评论的时候，在5分钟之内响应并通过Telegram推送到手机上方便查看和浏览。</p>\n<hr>\n<p>嗯，相关的源码和基本的部署说明丢在Github上了,感兴趣的可以<font color=\"red\"><strong><a href=\"https://github.com/Doublemine/TelegramBot\" target=\"_blank\" rel=\"noopener\">戳此查看</a></strong></font>。</p>\n<ul>\n<li><a href=\"https://github.com/Doublemine/TelegramBot\" target=\"_blank\" rel=\"noopener\">Telegram Bot For DuoShuo</a></li>\n</ul>\n<p>目前保证基本的功能能够稳定的运行，后续再添加一些其它的功能吧。嗯，详细的配置说明先挖个坑，改天再写。懒癌犯了，先休息~</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fh3r3jys56g208c08cx6p.jpg\" alt title=\"休息\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>众所周知多说评论是不支持主动推送的，也就是说如果访客主动留言评论，多说是不会给我们邮件推送提醒的。但是我们总不能每隔一段时间去检查下博客的评论留言吧，这样效率也太低了ヾ(。￣□￣)ﾂ゜゜゜于是趁着最近闲的蛋疼折腾出了这么个东东，能够实现访客主动评论的时候，在5分钟之内响应并通过Telegram推送到手机上方便查看和浏览。</p>\n<hr>\n<p>嗯，相关的源码和基本的部署说明丢在Github上了,感兴趣的可以<font color=\"red\"><strong><a href=\"https://github.com/Doublemine/TelegramBot\" target=\"_blank\" rel=\"noopener\">戳此查看</a></strong></font>。</p>\n<ul>\n<li><a href=\"https://github.com/Doublemine/TelegramBot\" target=\"_blank\" rel=\"noopener\">Telegram Bot For DuoShuo</a></li>\n</ul>\n<p>目前保证基本的功能能够稳定的运行，后续再添加一些其它的功能吧。嗯，详细的配置说明先挖个坑，改天再写。懒癌犯了，先休息~</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fh3r3jys56g208c08cx6p.jpg\" alt title=\"休息\"></p>\n"},{"title":"备份Hexo博客源文件","date":"2015-04-06T14:24:04.000Z","_content":"\n### 前言\n使用Hexo编写博客还是比较Nice的。但是有一个问题就是:Hexo博客的源文件都是放在本地的，如果更换了电脑需要更新博客或者不小心博客源文件丢失，那将是一件非常糟心的事情了。未雨绸缪，现在给出这个问题的一种解决办法吧。\n<!-- more -->\n### 备份方案\n想到的解决办法无非是:\n- 将博客源文件拷贝到U盘里。\n\n但是这样做的话，同步又比较麻烦。\n- 使用网盘的话，据说.git文件不能上传同步。\n\n而且我对国内的网盘也不怎么放心。。\n\n综合起来，我觉得比较可行的方法就是：\n- 将博客文件托管到Github。\n\n### 实现方法:\n\n-  在[Github](http://github.com)下创建一个新的repository，取名为`HEXO`。(与本地的Hexo源码文件夹同名即可)\n  -  进入本地的`Hexo`文件夹，执行以下命令创建仓库:\n\n```bash\n     git init\n```\n-  设置远程仓库地址，并更新:\n\n```bash\n    git remote add origin git@github.com:smilexiamo/hexo.git\n    git pull origin master\n```\n-  修改`.gitignore`文件（如果没有请手动创建一个），在里面加入`\n   *.log` 和 `public/` 以及`.deploy*/`。因为每次执行`hexo generate`命令时，上述目录都会被重写更新。因此忽略这两个目录下的文件更新，加快push速度。\n   -  执行命令以下命令，完成Hexo源码在本地的提交。\n\n```bash\n    git add .\n    git commit -m \"添加hexo源码文件作为备份\"\n```\n-  执行以下命令，将本地的仓库文件推送到Github。\n\n```\n    git push origin master\n```\n-  现在在任何一台电脑上，只需要`git clone git@github.com:smilexiamo/hexo.git`,即可完成将Hexo源文件复制到本地。（请将后面的`git@github.com:smilexiamo/hexo.git`替换为自己相应的仓库地址。否则，克隆的将是博主的博客源码:)）\n  -  在本地编写完博客时，顺次执行以下命令，即可完成Hexo博客源文件的更新同步，保持Github上的hexo源码为最新版本。\n```bash\n    git add .\n    git commit -m \"更新hexo源文件\"\n    git push origin master\n```\n-  当远程仓库有更新时，执行以下命令，即可同步hexo源文件到本地。\n\n```\n    git pull origin master\n```\n\n-  至此，Hexo源代码文件就完成了同步和更新了。","source":"_posts/备份Hexo博客源文件.md","raw":"title: \"备份Hexo博客源文件\"\ndate: 2015-04-06 22:24:04\ncategories: Hexo\ntags:\n- Hexo\n\n---\n\n### 前言\n使用Hexo编写博客还是比较Nice的。但是有一个问题就是:Hexo博客的源文件都是放在本地的，如果更换了电脑需要更新博客或者不小心博客源文件丢失，那将是一件非常糟心的事情了。未雨绸缪，现在给出这个问题的一种解决办法吧。\n<!-- more -->\n### 备份方案\n想到的解决办法无非是:\n- 将博客源文件拷贝到U盘里。\n\n但是这样做的话，同步又比较麻烦。\n- 使用网盘的话，据说.git文件不能上传同步。\n\n而且我对国内的网盘也不怎么放心。。\n\n综合起来，我觉得比较可行的方法就是：\n- 将博客文件托管到Github。\n\n### 实现方法:\n\n-  在[Github](http://github.com)下创建一个新的repository，取名为`HEXO`。(与本地的Hexo源码文件夹同名即可)\n  -  进入本地的`Hexo`文件夹，执行以下命令创建仓库:\n\n```bash\n     git init\n```\n-  设置远程仓库地址，并更新:\n\n```bash\n    git remote add origin git@github.com:smilexiamo/hexo.git\n    git pull origin master\n```\n-  修改`.gitignore`文件（如果没有请手动创建一个），在里面加入`\n   *.log` 和 `public/` 以及`.deploy*/`。因为每次执行`hexo generate`命令时，上述目录都会被重写更新。因此忽略这两个目录下的文件更新，加快push速度。\n   -  执行命令以下命令，完成Hexo源码在本地的提交。\n\n```bash\n    git add .\n    git commit -m \"添加hexo源码文件作为备份\"\n```\n-  执行以下命令，将本地的仓库文件推送到Github。\n\n```\n    git push origin master\n```\n-  现在在任何一台电脑上，只需要`git clone git@github.com:smilexiamo/hexo.git`,即可完成将Hexo源文件复制到本地。（请将后面的`git@github.com:smilexiamo/hexo.git`替换为自己相应的仓库地址。否则，克隆的将是博主的博客源码:)）\n  -  在本地编写完博客时，顺次执行以下命令，即可完成Hexo博客源文件的更新同步，保持Github上的hexo源码为最新版本。\n```bash\n    git add .\n    git commit -m \"更新hexo源文件\"\n    git push origin master\n```\n-  当远程仓库有更新时，执行以下命令，即可同步hexo源文件到本地。\n\n```\n    git pull origin master\n```\n\n-  至此，Hexo源代码文件就完成了同步和更新了。","slug":"备份Hexo博客源文件","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb9j001t2ev28ktfn8a4","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>使用Hexo编写博客还是比较Nice的。但是有一个问题就是:Hexo博客的源文件都是放在本地的，如果更换了电脑需要更新博客或者不小心博客源文件丢失，那将是一件非常糟心的事情了。未雨绸缪，现在给出这个问题的一种解决办法吧。<br><a id=\"more\"></a></p>\n<h3 id=\"备份方案\"><a href=\"#备份方案\" class=\"headerlink\" title=\"备份方案\"></a>备份方案</h3><p>想到的解决办法无非是:</p>\n<ul>\n<li>将博客源文件拷贝到U盘里。</li>\n</ul>\n<p>但是这样做的话，同步又比较麻烦。</p>\n<ul>\n<li>使用网盘的话，据说.git文件不能上传同步。</li>\n</ul>\n<p>而且我对国内的网盘也不怎么放心。。</p>\n<p>综合起来，我觉得比较可行的方法就是：</p>\n<ul>\n<li>将博客文件托管到Github。</li>\n</ul>\n<h3 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法:\"></a>实现方法:</h3><ul>\n<li>在<a href=\"http://github.com\" target=\"_blank\" rel=\"noopener\">Github</a>下创建一个新的repository，取名为<code>HEXO</code>。(与本地的Hexo源码文件夹同名即可)<ul>\n<li>进入本地的<code>Hexo</code>文件夹，执行以下命令创建仓库:</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<ul>\n<li>设置远程仓库地址，并更新:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github.com:smilexiamo/hexo.git</span><br><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改<code>.gitignore</code>文件（如果没有请手动创建一个），在里面加入<code>*.log</code> 和 <code>public/</code> 以及<code>.deploy*/</code>。因为每次执行<code>hexo generate</code>命令时，上述目录都会被重写更新。因此忽略这两个目录下的文件更新，加快push速度。<ul>\n<li>执行命令以下命令，完成Hexo源码在本地的提交。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">\"添加hexo源码文件作为备份\"</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>执行以下命令，将本地的仓库文件推送到Github。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>现在在任何一台电脑上，只需要<code>git clone git@github.com:smilexiamo/hexo.git</code>,即可完成将Hexo源文件复制到本地。（请将后面的<a href=\"mailto:`git@github.com\" target=\"_blank\" rel=\"noopener\">`git@github.com</a>:smilexiamo/hexo.git`替换为自己相应的仓库地址。否则，克隆的将是博主的博客源码:)）</p>\n<ul>\n<li>在本地编写完博客时，顺次执行以下命令，即可完成Hexo博客源文件的更新同步，保持Github上的hexo源码为最新版本。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">\"更新hexo源文件\"</span></span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>当远程仓库有更新时，执行以下命令，即可同步hexo源文件到本地。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure>\n<ul>\n<li>至此，Hexo源代码文件就完成了同步和更新了。</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>使用Hexo编写博客还是比较Nice的。但是有一个问题就是:Hexo博客的源文件都是放在本地的，如果更换了电脑需要更新博客或者不小心博客源文件丢失，那将是一件非常糟心的事情了。未雨绸缪，现在给出这个问题的一种解决办法吧。<br>","more":"</p>\n<h3 id=\"备份方案\"><a href=\"#备份方案\" class=\"headerlink\" title=\"备份方案\"></a>备份方案</h3><p>想到的解决办法无非是:</p>\n<ul>\n<li>将博客源文件拷贝到U盘里。</li>\n</ul>\n<p>但是这样做的话，同步又比较麻烦。</p>\n<ul>\n<li>使用网盘的话，据说.git文件不能上传同步。</li>\n</ul>\n<p>而且我对国内的网盘也不怎么放心。。</p>\n<p>综合起来，我觉得比较可行的方法就是：</p>\n<ul>\n<li>将博客文件托管到Github。</li>\n</ul>\n<h3 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法:\"></a>实现方法:</h3><ul>\n<li>在<a href=\"http://github.com\" target=\"_blank\" rel=\"noopener\">Github</a>下创建一个新的repository，取名为<code>HEXO</code>。(与本地的Hexo源码文件夹同名即可)<ul>\n<li>进入本地的<code>Hexo</code>文件夹，执行以下命令创建仓库:</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<ul>\n<li>设置远程仓库地址，并更新:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin git@github.com:smilexiamo/hexo.git</span><br><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure>\n<ul>\n<li>修改<code>.gitignore</code>文件（如果没有请手动创建一个），在里面加入<code>*.log</code> 和 <code>public/</code> 以及<code>.deploy*/</code>。因为每次执行<code>hexo generate</code>命令时，上述目录都会被重写更新。因此忽略这两个目录下的文件更新，加快push速度。<ul>\n<li>执行命令以下命令，完成Hexo源码在本地的提交。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">\"添加hexo源码文件作为备份\"</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>执行以下命令，将本地的仓库文件推送到Github。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>现在在任何一台电脑上，只需要<code>git clone git@github.com:smilexiamo/hexo.git</code>,即可完成将Hexo源文件复制到本地。（请将后面的<a href=\"mailto:`git@github.com\" target=\"_blank\" rel=\"noopener\">`git@github.com</a>:smilexiamo/hexo.git`替换为自己相应的仓库地址。否则，克隆的将是博主的博客源码:)）</p>\n<ul>\n<li>在本地编写完博客时，顺次执行以下命令，即可完成Hexo博客源文件的更新同步，保持Github上的hexo源码为最新版本。<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m <span class=\"string\">\"更新hexo源文件\"</span></span><br><span class=\"line\">git push origin master</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n<li><p>当远程仓库有更新时，执行以下命令，即可同步hexo源文件到本地。</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master</span><br></pre></td></tr></table></figure>\n<ul>\n<li>至此，Hexo源代码文件就完成了同步和更新了。</li>\n</ul>"},{"title":"开启NexT主题多说主动评论邮件通知","isupdate":false,"date":"2015-07-25T04:00:22.000Z","updatetime":null,"_content":"\n经过一段时间的折腾多说，博主发现原来多说是不支持主动评论提醒的。也就是说如果在一篇博客中有人主动评论留言的话，多说是不会邮件通知的。除非他回复了你，那么多说才会邮件通知。（怪不得博主觉得一会儿有邮件提醒一会儿没有咋个这么奇怪。。）\n\n\n\n- - -\n\n去多说的官方一番折腾，找到了官方文档，有说到使用`data-author-key`可以设置主动邮件提醒,以下给出多说官网说明的传送门：\n\n - **[同步用户到多说](http://dev.duoshuo.com/docs/51435552047fe92f490225de)**\n - **[评论框调用代码参数说明](http://dev.duoshuo.com/docs/5003ecd94cab3e7250000008/)**\n\n<!--more-->\n\n通过上面的链接查看多说的API说明，不难看要想实现评论主动邮件通知，只需要:\n - 自定义同步一个用户到多说的服务器。\n - 将这个同步的用户在站点中的身份设置为作者。\n - 取得自定义用户在站点中的ID。\n - 将这个ID作为`data-author-key`的值加在站点的多说评论框中即可。\n\n实现上述操作之后，当其他用户评论带有`data-author-key`标示的文章时，多说服务器会默认为在向我们自定义的作者用户评论，便会向我们自定义用户的邮箱发送邮件提醒啦~\n\n\n- - -\n\n分析了原理之后，我们具体应该怎么做呢？\n\n很简单，只需要向多说提供的同步用户接口发个POST就行了。语言不限，不过既然我们用的是Hexo，那就以NodeJS为例吧：\n\n - **随便在哪个地方新建一个文件夹**（就是这么随意~）\n - **进入该文件夹，执行以下命令:**\n\n```bash\nnpm install --save-dev request\n```\n\n - **新建一个`adduser.js`文件，将下面的代码粘贴进去，并修改`data`中的数据: **\n\n```javascript\nvar http = require('request');\n\nvar data = {\n  'short_name'         : '',     // 你的short_name，后台管理那里可以看到\n  'secret'             : '',     // 密钥，后台管理那里可以看到\n  'users[0][user_key]' : '1',    // 用户在站点的ID，就是后面需要设置的 data-author-key值，可以随意设置，这里默认为1吧\n  'users[0][name]'     : '',     // 显示的名字\n  'users[0][email]'    : '',     // 提醒的邮箱\n  'users[0][role]'     : 'author'// 用户的类型，设置为作者\n};\n\nhttp.post({url:'http://api.duoshuo.com/users/import.json', form: data}, function (error, response, body) {\n  if (!error && response.statusCode == 200) {\n    console.log('Post data to Duoshuo success');\n  }\n  else{\n    console.log('Post data to Duoshuo fail');\n  }\n});\n```\n\n将上面的代码中data中的数据按照自己的多说账户设置好之后，执行以下命令完成数据同步到多说服务器:\n```bash\nnode adduser.js\n```\n\n - 如果输出为`Post data to Duoshuo fail`,那么检察一下data数据是否修改正确，或者直接给我留言排查问题。\n - 如果输出为`Post data to Duoshuo success`,那么就可以登录到多说的后台，在用户那里看到新添加的用户了，类似这样:\n![](http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/1137805359113768cao.jpg \"多说用户界面\")\n\n如果角色不是作者的话，手动更改为作者。然后我们找到`NexT`主题的`layout/_layout.swig`文件，打开并找到这段代码：\n\n```javascript\n {% if page.comments %}\n              <div class=\"comments\" id=\"comments\">\n                {% if (config.duoshuo and config.duoshuo.shortname) or config.duoshuo_shortname %}\n                  <div class=\"ds-thread\" data-thread-key=\"{{ page.path }}\"\n                       data-title=\"{{ page.title }}\" data-url=\"{{ page.permalink }}\">\n                  </div>\n```\n将其修改为:\n```javascript\n            {% if page.comments %}\n              <div class=\"comments\" id=\"comments\">\n                {% if (config.duoshuo and config.duoshuo.shortname) or config.duoshuo_shortname %}\n                  <div class=\"ds-thread\" data-thread-key=\"{{ page.path }}\"\n                       data-title=\"{{ page.title }}\" data-url=\"{{ page.permalink }}\" data-author-key=\"{{ theme.duoshuo_info.data_author_key }}\">\n                  </div>\n```\n\n然后在主题的配置文件`_config.yml`文件中增加以下一行配置:\n```yml\nduoshuo_info:\n  data_author_key: 1 #此处填写上面js脚本中的data变量中的users[0][user_key]的值，因为上面为1，这里我就填写为1了。\n```\n\n当然你可以也可直接写死为1，像这个样子:\n```javascript\n            {% if page.comments %}\n              <div class=\"comments\" id=\"comments\">\n                {% if (config.duoshuo and config.duoshuo.shortname) or config.duoshuo_shortname %}\n                  <div class=\"ds-thread\" data-thread-key=\"{{ page.path }}\"\n                       data-title=\"{{ page.title }}\" data-url=\"{{ page.permalink }}\" data-author-key=\"1\">\n                  </div>\n```\n\n然后重新博客文件并发布，这样在就可以当其他人评论你的博客的时候主动发邮件通知啦~像这个样子的:\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/1137805358f327217do.jpg \"多说主动提醒示例\")\n\n像这样子，就让我们的`NexT`支持多说主动评论邮件通知啦，感谢[@arao](http://www.arao.me/)的友情出镜~\n\n**PS:这种邮件提醒不是实时提醒，而是每天一封汇总邮件。如果你中途查看了这个评论的话，也是不会邮件提醒的~**\n\n","source":"_posts/多说主动邮件提醒.md","raw":"title: 开启NexT主题多说主动评论邮件通知\nisupdate: false\ndate: 2015-07-25 12:00:22\nupdatetime:\ntags: \n - 多说\n - Hexo\ncategories: Hexo\n---\n\n经过一段时间的折腾多说，博主发现原来多说是不支持主动评论提醒的。也就是说如果在一篇博客中有人主动评论留言的话，多说是不会邮件通知的。除非他回复了你，那么多说才会邮件通知。（怪不得博主觉得一会儿有邮件提醒一会儿没有咋个这么奇怪。。）\n\n\n\n- - -\n\n去多说的官方一番折腾，找到了官方文档，有说到使用`data-author-key`可以设置主动邮件提醒,以下给出多说官网说明的传送门：\n\n - **[同步用户到多说](http://dev.duoshuo.com/docs/51435552047fe92f490225de)**\n - **[评论框调用代码参数说明](http://dev.duoshuo.com/docs/5003ecd94cab3e7250000008/)**\n\n<!--more-->\n\n通过上面的链接查看多说的API说明，不难看要想实现评论主动邮件通知，只需要:\n - 自定义同步一个用户到多说的服务器。\n - 将这个同步的用户在站点中的身份设置为作者。\n - 取得自定义用户在站点中的ID。\n - 将这个ID作为`data-author-key`的值加在站点的多说评论框中即可。\n\n实现上述操作之后，当其他用户评论带有`data-author-key`标示的文章时，多说服务器会默认为在向我们自定义的作者用户评论，便会向我们自定义用户的邮箱发送邮件提醒啦~\n\n\n- - -\n\n分析了原理之后，我们具体应该怎么做呢？\n\n很简单，只需要向多说提供的同步用户接口发个POST就行了。语言不限，不过既然我们用的是Hexo，那就以NodeJS为例吧：\n\n - **随便在哪个地方新建一个文件夹**（就是这么随意~）\n - **进入该文件夹，执行以下命令:**\n\n```bash\nnpm install --save-dev request\n```\n\n - **新建一个`adduser.js`文件，将下面的代码粘贴进去，并修改`data`中的数据: **\n\n```javascript\nvar http = require('request');\n\nvar data = {\n  'short_name'         : '',     // 你的short_name，后台管理那里可以看到\n  'secret'             : '',     // 密钥，后台管理那里可以看到\n  'users[0][user_key]' : '1',    // 用户在站点的ID，就是后面需要设置的 data-author-key值，可以随意设置，这里默认为1吧\n  'users[0][name]'     : '',     // 显示的名字\n  'users[0][email]'    : '',     // 提醒的邮箱\n  'users[0][role]'     : 'author'// 用户的类型，设置为作者\n};\n\nhttp.post({url:'http://api.duoshuo.com/users/import.json', form: data}, function (error, response, body) {\n  if (!error && response.statusCode == 200) {\n    console.log('Post data to Duoshuo success');\n  }\n  else{\n    console.log('Post data to Duoshuo fail');\n  }\n});\n```\n\n将上面的代码中data中的数据按照自己的多说账户设置好之后，执行以下命令完成数据同步到多说服务器:\n```bash\nnode adduser.js\n```\n\n - 如果输出为`Post data to Duoshuo fail`,那么检察一下data数据是否修改正确，或者直接给我留言排查问题。\n - 如果输出为`Post data to Duoshuo success`,那么就可以登录到多说的后台，在用户那里看到新添加的用户了，类似这样:\n![](http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/1137805359113768cao.jpg \"多说用户界面\")\n\n如果角色不是作者的话，手动更改为作者。然后我们找到`NexT`主题的`layout/_layout.swig`文件，打开并找到这段代码：\n\n```javascript\n {% if page.comments %}\n              <div class=\"comments\" id=\"comments\">\n                {% if (config.duoshuo and config.duoshuo.shortname) or config.duoshuo_shortname %}\n                  <div class=\"ds-thread\" data-thread-key=\"{{ page.path }}\"\n                       data-title=\"{{ page.title }}\" data-url=\"{{ page.permalink }}\">\n                  </div>\n```\n将其修改为:\n```javascript\n            {% if page.comments %}\n              <div class=\"comments\" id=\"comments\">\n                {% if (config.duoshuo and config.duoshuo.shortname) or config.duoshuo_shortname %}\n                  <div class=\"ds-thread\" data-thread-key=\"{{ page.path }}\"\n                       data-title=\"{{ page.title }}\" data-url=\"{{ page.permalink }}\" data-author-key=\"{{ theme.duoshuo_info.data_author_key }}\">\n                  </div>\n```\n\n然后在主题的配置文件`_config.yml`文件中增加以下一行配置:\n```yml\nduoshuo_info:\n  data_author_key: 1 #此处填写上面js脚本中的data变量中的users[0][user_key]的值，因为上面为1，这里我就填写为1了。\n```\n\n当然你可以也可直接写死为1，像这个样子:\n```javascript\n            {% if page.comments %}\n              <div class=\"comments\" id=\"comments\">\n                {% if (config.duoshuo and config.duoshuo.shortname) or config.duoshuo_shortname %}\n                  <div class=\"ds-thread\" data-thread-key=\"{{ page.path }}\"\n                       data-title=\"{{ page.title }}\" data-url=\"{{ page.permalink }}\" data-author-key=\"1\">\n                  </div>\n```\n\n然后重新博客文件并发布，这样在就可以当其他人评论你的博客的时候主动发邮件通知啦~像这个样子的:\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/1137805358f327217do.jpg \"多说主动提醒示例\")\n\n像这样子，就让我们的`NexT`支持多说主动评论邮件通知啦，感谢[@arao](http://www.arao.me/)的友情出镜~\n\n**PS:这种邮件提醒不是实时提醒，而是每天一封汇总邮件。如果你中途查看了这个评论的话，也是不会邮件提醒的~**\n\n","slug":"多说主动邮件提醒","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb9k001w2ev2384l973c","content":"<p>经过一段时间的折腾多说，博主发现原来多说是不支持主动评论提醒的。也就是说如果在一篇博客中有人主动评论留言的话，多说是不会邮件通知的。除非他回复了你，那么多说才会邮件通知。（怪不得博主觉得一会儿有邮件提醒一会儿没有咋个这么奇怪。。）</p>\n<hr>\n<p>去多说的官方一番折腾，找到了官方文档，有说到使用<code>data-author-key</code>可以设置主动邮件提醒,以下给出多说官网说明的传送门：</p>\n<ul>\n<li><strong><a href=\"http://dev.duoshuo.com/docs/51435552047fe92f490225de\" target=\"_blank\" rel=\"noopener\">同步用户到多说</a></strong></li>\n<li><strong><a href=\"http://dev.duoshuo.com/docs/5003ecd94cab3e7250000008/\" target=\"_blank\" rel=\"noopener\">评论框调用代码参数说明</a></strong></li>\n</ul>\n<a id=\"more\"></a>\n<p>通过上面的链接查看多说的API说明，不难看要想实现评论主动邮件通知，只需要:</p>\n<ul>\n<li>自定义同步一个用户到多说的服务器。</li>\n<li>将这个同步的用户在站点中的身份设置为作者。</li>\n<li>取得自定义用户在站点中的ID。</li>\n<li>将这个ID作为<code>data-author-key</code>的值加在站点的多说评论框中即可。</li>\n</ul>\n<p>实现上述操作之后，当其他用户评论带有<code>data-author-key</code>标示的文章时，多说服务器会默认为在向我们自定义的作者用户评论，便会向我们自定义用户的邮箱发送邮件提醒啦~</p>\n<hr>\n<p>分析了原理之后，我们具体应该怎么做呢？</p>\n<p>很简单，只需要向多说提供的同步用户接口发个POST就行了。语言不限，不过既然我们用的是Hexo，那就以NodeJS为例吧：</p>\n<ul>\n<li><strong>随便在哪个地方新建一个文件夹</strong>（就是这么随意~）</li>\n<li><strong>进入该文件夹，执行以下命令:</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev request</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>新建一个<code>adduser.js</code>文件，将下面的代码粘贴进去，并修改<code>data</code>中的数据: </strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">  <span class=\"string\">'short_name'</span>         : <span class=\"string\">''</span>,     <span class=\"comment\">// 你的short_name，后台管理那里可以看到</span></span><br><span class=\"line\">  <span class=\"string\">'secret'</span>             : <span class=\"string\">''</span>,     <span class=\"comment\">// 密钥，后台管理那里可以看到</span></span><br><span class=\"line\">  <span class=\"string\">'users[0][user_key]'</span> : <span class=\"string\">'1'</span>,    <span class=\"comment\">// 用户在站点的ID，就是后面需要设置的 data-author-key值，可以随意设置，这里默认为1吧</span></span><br><span class=\"line\">  <span class=\"string\">'users[0][name]'</span>     : <span class=\"string\">''</span>,     <span class=\"comment\">// 显示的名字</span></span><br><span class=\"line\">  <span class=\"string\">'users[0][email]'</span>    : <span class=\"string\">''</span>,     <span class=\"comment\">// 提醒的邮箱</span></span><br><span class=\"line\">  <span class=\"string\">'users[0][role]'</span>     : <span class=\"string\">'author'</span><span class=\"comment\">// 用户的类型，设置为作者</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">http.post(&#123;<span class=\"attr\">url</span>:<span class=\"string\">'http://api.duoshuo.com/users/import.json'</span>, <span class=\"attr\">form</span>: data&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, response, body</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!error &amp;&amp; response.statusCode == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Post data to Duoshuo success'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Post data to Duoshuo fail'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>将上面的代码中data中的数据按照自己的多说账户设置好之后，执行以下命令完成数据同步到多说服务器:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node adduser.js</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>如果输出为<code>Post data to Duoshuo fail</code>,那么检察一下data数据是否修改正确，或者直接给我留言排查问题。</li>\n<li>如果输出为<code>Post data to Duoshuo success</code>,那么就可以登录到多说的后台，在用户那里看到新添加的用户了，类似这样:<br><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/1137805359113768cao.jpg\" alt title=\"多说用户界面\"></li>\n</ul>\n<p>如果角色不是作者的话，手动更改为作者。然后我们找到<code>NexT</code>主题的<code>layout/_layout.swig</code>文件，打开并找到这段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">if</span> page.comments %&#125;</span><br><span class=\"line\">             &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"comments\"</span> id=<span class=\"string\">\"comments\"</span>&gt;</span><br><span class=\"line\">               &#123;% <span class=\"keyword\">if</span> (config.duoshuo and config.duoshuo.shortname) or config.duoshuo_shortname %&#125;</span><br><span class=\"line\">                 &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"ds-thread\"</span> data-thread-key=<span class=\"string\">\"&#123;&#123; page.path &#125;&#125;\"</span></span><br><span class=\"line\">                      data-title=<span class=\"string\">\"&#123;&#123; page.title &#125;&#125;\"</span> data-url=<span class=\"string\">\"&#123;&#123; page.permalink &#125;&#125;\"</span>&gt;</span><br><span class=\"line\">                 &lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>将其修改为:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">if</span> page.comments %&#125;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"comments\"</span> id=<span class=\"string\">\"comments\"</span>&gt;</span><br><span class=\"line\">    &#123;% <span class=\"keyword\">if</span> (config.duoshuo and config.duoshuo.shortname) or config.duoshuo_shortname %&#125;</span><br><span class=\"line\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"ds-thread\"</span> data-thread-key=<span class=\"string\">\"&#123;&#123; page.path &#125;&#125;\"</span></span><br><span class=\"line\">           data-title=<span class=\"string\">\"&#123;&#123; page.title &#125;&#125;\"</span> data-url=<span class=\"string\">\"&#123;&#123; page.permalink &#125;&#125;\"</span> data-author-key=<span class=\"string\">\"&#123;&#123; theme.duoshuo_info.data_author_key &#125;&#125;\"</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后在主题的配置文件<code>_config.yml</code>文件中增加以下一行配置:<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">duoshuo_info:</span></span><br><span class=\"line\"><span class=\"attr\">  data_author_key:</span> <span class=\"number\">1</span> <span class=\"comment\">#此处填写上面js脚本中的data变量中的users[0][user_key]的值，因为上面为1，这里我就填写为1了。</span></span><br></pre></td></tr></table></figure></p>\n<p>当然你可以也可直接写死为1，像这个样子:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">if</span> page.comments %&#125;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"comments\"</span> id=<span class=\"string\">\"comments\"</span>&gt;</span><br><span class=\"line\">    &#123;% <span class=\"keyword\">if</span> (config.duoshuo and config.duoshuo.shortname) or config.duoshuo_shortname %&#125;</span><br><span class=\"line\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"ds-thread\"</span> data-thread-key=<span class=\"string\">\"&#123;&#123; page.path &#125;&#125;\"</span></span><br><span class=\"line\">           data-title=<span class=\"string\">\"&#123;&#123; page.title &#125;&#125;\"</span> data-url=<span class=\"string\">\"&#123;&#123; page.permalink &#125;&#125;\"</span> data-author-key=<span class=\"string\">\"1\"</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后重新博客文件并发布，这样在就可以当其他人评论你的博客的时候主动发邮件通知啦~像这个样子的:</p>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/1137805358f327217do.jpg\" alt title=\"多说主动提醒示例\"></p>\n<p>像这样子，就让我们的<code>NexT</code>支持多说主动评论邮件通知啦，感谢<a href=\"http://www.arao.me/\" target=\"_blank\" rel=\"noopener\">@arao</a>的友情出镜~</p>\n<p><strong>PS:这种邮件提醒不是实时提醒，而是每天一封汇总邮件。如果你中途查看了这个评论的话，也是不会邮件提醒的~</strong></p>\n","site":{"data":{}},"excerpt":"<p>经过一段时间的折腾多说，博主发现原来多说是不支持主动评论提醒的。也就是说如果在一篇博客中有人主动评论留言的话，多说是不会邮件通知的。除非他回复了你，那么多说才会邮件通知。（怪不得博主觉得一会儿有邮件提醒一会儿没有咋个这么奇怪。。）</p>\n<hr>\n<p>去多说的官方一番折腾，找到了官方文档，有说到使用<code>data-author-key</code>可以设置主动邮件提醒,以下给出多说官网说明的传送门：</p>\n<ul>\n<li><strong><a href=\"http://dev.duoshuo.com/docs/51435552047fe92f490225de\" target=\"_blank\" rel=\"noopener\">同步用户到多说</a></strong></li>\n<li><strong><a href=\"http://dev.duoshuo.com/docs/5003ecd94cab3e7250000008/\" target=\"_blank\" rel=\"noopener\">评论框调用代码参数说明</a></strong></li>\n</ul>","more":"<p>通过上面的链接查看多说的API说明，不难看要想实现评论主动邮件通知，只需要:</p>\n<ul>\n<li>自定义同步一个用户到多说的服务器。</li>\n<li>将这个同步的用户在站点中的身份设置为作者。</li>\n<li>取得自定义用户在站点中的ID。</li>\n<li>将这个ID作为<code>data-author-key</code>的值加在站点的多说评论框中即可。</li>\n</ul>\n<p>实现上述操作之后，当其他用户评论带有<code>data-author-key</code>标示的文章时，多说服务器会默认为在向我们自定义的作者用户评论，便会向我们自定义用户的邮箱发送邮件提醒啦~</p>\n<hr>\n<p>分析了原理之后，我们具体应该怎么做呢？</p>\n<p>很简单，只需要向多说提供的同步用户接口发个POST就行了。语言不限，不过既然我们用的是Hexo，那就以NodeJS为例吧：</p>\n<ul>\n<li><strong>随便在哪个地方新建一个文件夹</strong>（就是这么随意~）</li>\n<li><strong>进入该文件夹，执行以下命令:</strong></li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save-dev request</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>新建一个<code>adduser.js</code>文件，将下面的代码粘贴进去，并修改<code>data</code>中的数据: </strong></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">'request'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> data = &#123;</span><br><span class=\"line\">  <span class=\"string\">'short_name'</span>         : <span class=\"string\">''</span>,     <span class=\"comment\">// 你的short_name，后台管理那里可以看到</span></span><br><span class=\"line\">  <span class=\"string\">'secret'</span>             : <span class=\"string\">''</span>,     <span class=\"comment\">// 密钥，后台管理那里可以看到</span></span><br><span class=\"line\">  <span class=\"string\">'users[0][user_key]'</span> : <span class=\"string\">'1'</span>,    <span class=\"comment\">// 用户在站点的ID，就是后面需要设置的 data-author-key值，可以随意设置，这里默认为1吧</span></span><br><span class=\"line\">  <span class=\"string\">'users[0][name]'</span>     : <span class=\"string\">''</span>,     <span class=\"comment\">// 显示的名字</span></span><br><span class=\"line\">  <span class=\"string\">'users[0][email]'</span>    : <span class=\"string\">''</span>,     <span class=\"comment\">// 提醒的邮箱</span></span><br><span class=\"line\">  <span class=\"string\">'users[0][role]'</span>     : <span class=\"string\">'author'</span><span class=\"comment\">// 用户的类型，设置为作者</span></span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">http.post(&#123;<span class=\"attr\">url</span>:<span class=\"string\">'http://api.duoshuo.com/users/import.json'</span>, <span class=\"attr\">form</span>: data&#125;, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">error, response, body</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (!error &amp;&amp; response.statusCode == <span class=\"number\">200</span>) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Post data to Duoshuo success'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">'Post data to Duoshuo fail'</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>将上面的代码中data中的数据按照自己的多说账户设置好之后，执行以下命令完成数据同步到多说服务器:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node adduser.js</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>如果输出为<code>Post data to Duoshuo fail</code>,那么检察一下data数据是否修改正确，或者直接给我留言排查问题。</li>\n<li>如果输出为<code>Post data to Duoshuo success</code>,那么就可以登录到多说的后台，在用户那里看到新添加的用户了，类似这样:<br><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/1137805359113768cao.jpg\" alt title=\"多说用户界面\"></li>\n</ul>\n<p>如果角色不是作者的话，手动更改为作者。然后我们找到<code>NexT</code>主题的<code>layout/_layout.swig</code>文件，打开并找到这段代码：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">if</span> page.comments %&#125;</span><br><span class=\"line\">             &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"comments\"</span> id=<span class=\"string\">\"comments\"</span>&gt;</span><br><span class=\"line\">               &#123;% <span class=\"keyword\">if</span> (config.duoshuo and config.duoshuo.shortname) or config.duoshuo_shortname %&#125;</span><br><span class=\"line\">                 &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"ds-thread\"</span> data-thread-key=<span class=\"string\">\"&#123;&#123; page.path &#125;&#125;\"</span></span><br><span class=\"line\">                      data-title=<span class=\"string\">\"&#123;&#123; page.title &#125;&#125;\"</span> data-url=<span class=\"string\">\"&#123;&#123; page.permalink &#125;&#125;\"</span>&gt;</span><br><span class=\"line\">                 &lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure>\n<p>将其修改为:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">if</span> page.comments %&#125;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"comments\"</span> id=<span class=\"string\">\"comments\"</span>&gt;</span><br><span class=\"line\">    &#123;% <span class=\"keyword\">if</span> (config.duoshuo and config.duoshuo.shortname) or config.duoshuo_shortname %&#125;</span><br><span class=\"line\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"ds-thread\"</span> data-thread-key=<span class=\"string\">\"&#123;&#123; page.path &#125;&#125;\"</span></span><br><span class=\"line\">           data-title=<span class=\"string\">\"&#123;&#123; page.title &#125;&#125;\"</span> data-url=<span class=\"string\">\"&#123;&#123; page.permalink &#125;&#125;\"</span> data-author-key=<span class=\"string\">\"&#123;&#123; theme.duoshuo_info.data_author_key &#125;&#125;\"</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后在主题的配置文件<code>_config.yml</code>文件中增加以下一行配置:<br><figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">duoshuo_info:</span></span><br><span class=\"line\"><span class=\"attr\">  data_author_key:</span> <span class=\"number\">1</span> <span class=\"comment\">#此处填写上面js脚本中的data变量中的users[0][user_key]的值，因为上面为1，这里我就填写为1了。</span></span><br></pre></td></tr></table></figure></p>\n<p>当然你可以也可直接写死为1，像这个样子:<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% <span class=\"keyword\">if</span> page.comments %&#125;</span><br><span class=\"line\">  &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"comments\"</span> id=<span class=\"string\">\"comments\"</span>&gt;</span><br><span class=\"line\">    &#123;% <span class=\"keyword\">if</span> (config.duoshuo and config.duoshuo.shortname) or config.duoshuo_shortname %&#125;</span><br><span class=\"line\">      &lt;div <span class=\"class\"><span class=\"keyword\">class</span></span>=<span class=\"string\">\"ds-thread\"</span> data-thread-key=<span class=\"string\">\"&#123;&#123; page.path &#125;&#125;\"</span></span><br><span class=\"line\">           data-title=<span class=\"string\">\"&#123;&#123; page.title &#125;&#125;\"</span> data-url=<span class=\"string\">\"&#123;&#123; page.permalink &#125;&#125;\"</span> data-author-key=<span class=\"string\">\"1\"</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>然后重新博客文件并发布，这样在就可以当其他人评论你的博客的时候主动发邮件通知啦~像这个样子的:</p>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/1137805358f327217do.jpg\" alt title=\"多说主动提醒示例\"></p>\n<p>像这样子，就让我们的<code>NexT</code>支持多说主动评论邮件通知啦，感谢<a href=\"http://www.arao.me/\" target=\"_blank\" rel=\"noopener\">@arao</a>的友情出镜~</p>\n<p><strong>PS:这种邮件提醒不是实时提醒，而是每天一封汇总邮件。如果你中途查看了这个评论的话，也是不会邮件提醒的~</strong></p>"},{"title":"常见的开源许可证","date":"2015-06-30T07:18:41.000Z","_content":"\n如何为代码选择开源许可证，这是一个问题。\n\n\n\n世界上的开源许可证，大概有上百种。很少有人搞得清楚它们的区别。千言万语，比不上一张图：\n\n<img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/1135650364a1ffda02o.jpg\" class=\"full-image\">\n\n<!--more-->\n\n以下是常见的六种开源协议：\n\n-  ## [GPL License](http://www.gnu.org/licenses/gpl.html)\n\n>GPL协议的主要内容是只要在一个软件中使用(“使用”指类库引用，修改后的代码或者衍生代码)GPL 协议的产品，则该软件产品必须也采用GPL协议，既必须也是开源和免费。这就是所谓的”传染性”。GPL协议的产品作为一个单独的产品使用没有任何问题，还可以享受免费的优势。\n\n>**由于GPL严格要求使用了GPL类库的软件产品必须使用GPL协议，对于使用GPL协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成/采用作为类库和二次开发的基础。**\n\n-  ## [BSD License](https://en.wikipedia.org/wiki/BSD_licenses)\n\n>BSD开源协议是一个给于使用者很大自由的协议。基本上使用者可以”为所欲为”,可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。\n\n>但”为所欲为”的前提当你发布使用了BSD协议的代码，或则以BSD协议代码为基础做二次开发自己的产品时，需要满足三个条件：\n\n> - 如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。\n> - 如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。\n> - 不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。\n\n>**BSD 代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选BSD协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。**\n\n-  ## [MIT License](https://en.wikipedia.org/wiki/MIT_License)\n\n>在所有常用的开源许可证中，MIT许可证最为简短，可能也最为广泛。它的条款非常松散，比起大部分其它许可证来说更加宽松。它的基本前提如下：\n\n> -     该许可免费授予任何获得本软件及相关文档（合称为“软件包”）的人，许可其无限制地应用软件，包括不受限地使用、拷贝、修改、合并、出版、分发、再授权、和/或出售软件的拷贝。被许可者获取软件包提供的权利须基于以下条件：\n\n>**以上版权声明和本许可声明必须包含在软件包的全部拷贝或实质性部分中。**\n\n> - 你可以任意使用、拷贝和修改软件。没人能够限制你将软件用于任何项目、以你喜欢的格式拷贝软件任意多次、或以任何方式收费。\n> - 你可以免费分发软件或者出售软件，你分发软件的方式不受限制。\n> - 唯一的限制是软件必须附带许可协议。\n\n>MIT许可证是限制最少的许可证，它基本上是说，只要附带许可证，任何人都可以利用该许可证授权的软件做任何想做的事。\n\n-  ## [Creative Commons](http://creativecommons.org/)\n\n>知识共享（Creative Commons，简称CC）许可证并非完全的开源许可证，但设计类项目也常常使用。有各种不同的CC许可证可供使用，每种授予特定的权利。一个CC许可证包含四个基本部分，每部分即可单独生效，又可联合使用。简述如下：\n\n> - 署名\n\n>*必须按照作者指定的方式对作品进行署名。除此之外，作品可被复制、分发、拷贝以及以其它方式使用*\n\n> - 相同方式共享\n\n>* 只能基于相同的CC许可证对作品进行修改、分发等。*\n\n> - 非商业性\n\n>*作品可被修改、分发等，但不得以商业为目的进行。关于什么构成商业行为，许可证条款并未提供清晰的定义，因此你可能需要在自己的项目里给予澄清。比如说，有人认为“非商业”只是简单地意味着你不能出售作品，也有人认为你不能把作品放到一个带广告的网站上，还有人认为只有当牟利发生时才能称为“商业”。*\n\n> - 禁止衍生\n\n>*你可以拷贝和分发授权作品，但你不得以任何方式修改、或基于原作进行创作。*\n\n>**如前所述，CC许可证的各个部分可以联合使用。最为严格的许可证为“署名-非商业-禁止衍生”许可证，即你可以自由分享作品，但不得修改或收费，同时你必须按照作者指定的方式为作品署名。这对那些一方面希望发布作品，另一方面又希望多多少少保留对作品使用方式的控制权的作者来说，颇为不错。限制最少的CC许可证是“署名”许可证，即只要按照作者指定的方式为作品署名，就可以用作品做任何事。**\n\n\n-  ## [Apache License](http://www.apache.org/licenses/LICENSE-2.0)\n\n>Apache许可证（2.0版）授予用户大量权利，这些权利适用于版权和专利权。由于有的许可证只适用于版权、不适用于专利权，Apache许可证的这一灵活性使其成为专利开发者的首选。\n\n>Apache许可证特点：\n>- 权利的永久性\n\n >*一旦许可证被授予，你就可以无限期使用。*\n\n> - 权利的世界性\n\n>*如果许可证在某一国授予，那么它同时也授予给其它所有国家。例如，如果你在美国，而原始许可证在印度颁发，那么，你在许可证授权下使用代码并无限制。*\n\n> - 获取权利的免费性\n\n>*你不用预先支付任何使用费，也不用为每次使用或基于其它方式而付费。*\n\n> - 权利的非排他性\n\n>*你能使用经授权的软件，任何其他人也能使用。*\n\n> - 权利的不可撤回性\n\n>*权利一旦授予，无人能撤回。换句话说，你无需担心将来的某个时候，当你创造出授权代码的优秀衍生产品时，有人会跳出来说：“抱歉，你再也不能使用这些代码了” （许可证有条款指出，如果你就许可证授权下的任何内容起诉他人，你的许可证授权即告终结。但这仅仅适用于有专利的软件，并且只要你不起诉软件相关的任何人，你就不必担心）.*\n\n>**Apache许可证对分发代码也有特殊要求，主要是有关给予代码作者以适当荣誉，以及保持许可证的一致性。**\n\n-  ## [LGPL License](http://www.gnu.org/copyleft/lesser.html)\n\n>LGPL允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业软件作为类库引用并发布和销售。\n\n>但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此LGPL协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。\n\n>**GPL/LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品**\n\n不难看出，即便是在这六种许可协议中作出选择，也是比较困难的。\n\n[乌克兰程序员Paul Bagwell](http://paulmillr.com/posts/simple-description-of-popular-software-licenses/)，画了一张分析图，说明应该怎么选择。这是我见过的最简单的讲解，只用两分钟，你就能搞清楚这六种许可证之间的最大区别。\n\n以下为汉化版本，感谢[wadefelix](http://blog.csdn.net/wadefelix/article/details/6384317)的制作：\n\n<img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/11356503627da387f0o.jpg\"  class=\"full-image\">\n\n\n","source":"_posts/常见的开源许可证区别.md","raw":"title: 常见的开源许可证\ndate: 2015-06-30 15:18:41\ntags: 笔记\ncategories: Notes\n\n---\n\n如何为代码选择开源许可证，这是一个问题。\n\n\n\n世界上的开源许可证，大概有上百种。很少有人搞得清楚它们的区别。千言万语，比不上一张图：\n\n<img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/1135650364a1ffda02o.jpg\" class=\"full-image\">\n\n<!--more-->\n\n以下是常见的六种开源协议：\n\n-  ## [GPL License](http://www.gnu.org/licenses/gpl.html)\n\n>GPL协议的主要内容是只要在一个软件中使用(“使用”指类库引用，修改后的代码或者衍生代码)GPL 协议的产品，则该软件产品必须也采用GPL协议，既必须也是开源和免费。这就是所谓的”传染性”。GPL协议的产品作为一个单独的产品使用没有任何问题，还可以享受免费的优势。\n\n>**由于GPL严格要求使用了GPL类库的软件产品必须使用GPL协议，对于使用GPL协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成/采用作为类库和二次开发的基础。**\n\n-  ## [BSD License](https://en.wikipedia.org/wiki/BSD_licenses)\n\n>BSD开源协议是一个给于使用者很大自由的协议。基本上使用者可以”为所欲为”,可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。\n\n>但”为所欲为”的前提当你发布使用了BSD协议的代码，或则以BSD协议代码为基础做二次开发自己的产品时，需要满足三个条件：\n\n> - 如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。\n> - 如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。\n> - 不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。\n\n>**BSD 代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选BSD协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。**\n\n-  ## [MIT License](https://en.wikipedia.org/wiki/MIT_License)\n\n>在所有常用的开源许可证中，MIT许可证最为简短，可能也最为广泛。它的条款非常松散，比起大部分其它许可证来说更加宽松。它的基本前提如下：\n\n> -     该许可免费授予任何获得本软件及相关文档（合称为“软件包”）的人，许可其无限制地应用软件，包括不受限地使用、拷贝、修改、合并、出版、分发、再授权、和/或出售软件的拷贝。被许可者获取软件包提供的权利须基于以下条件：\n\n>**以上版权声明和本许可声明必须包含在软件包的全部拷贝或实质性部分中。**\n\n> - 你可以任意使用、拷贝和修改软件。没人能够限制你将软件用于任何项目、以你喜欢的格式拷贝软件任意多次、或以任何方式收费。\n> - 你可以免费分发软件或者出售软件，你分发软件的方式不受限制。\n> - 唯一的限制是软件必须附带许可协议。\n\n>MIT许可证是限制最少的许可证，它基本上是说，只要附带许可证，任何人都可以利用该许可证授权的软件做任何想做的事。\n\n-  ## [Creative Commons](http://creativecommons.org/)\n\n>知识共享（Creative Commons，简称CC）许可证并非完全的开源许可证，但设计类项目也常常使用。有各种不同的CC许可证可供使用，每种授予特定的权利。一个CC许可证包含四个基本部分，每部分即可单独生效，又可联合使用。简述如下：\n\n> - 署名\n\n>*必须按照作者指定的方式对作品进行署名。除此之外，作品可被复制、分发、拷贝以及以其它方式使用*\n\n> - 相同方式共享\n\n>* 只能基于相同的CC许可证对作品进行修改、分发等。*\n\n> - 非商业性\n\n>*作品可被修改、分发等，但不得以商业为目的进行。关于什么构成商业行为，许可证条款并未提供清晰的定义，因此你可能需要在自己的项目里给予澄清。比如说，有人认为“非商业”只是简单地意味着你不能出售作品，也有人认为你不能把作品放到一个带广告的网站上，还有人认为只有当牟利发生时才能称为“商业”。*\n\n> - 禁止衍生\n\n>*你可以拷贝和分发授权作品，但你不得以任何方式修改、或基于原作进行创作。*\n\n>**如前所述，CC许可证的各个部分可以联合使用。最为严格的许可证为“署名-非商业-禁止衍生”许可证，即你可以自由分享作品，但不得修改或收费，同时你必须按照作者指定的方式为作品署名。这对那些一方面希望发布作品，另一方面又希望多多少少保留对作品使用方式的控制权的作者来说，颇为不错。限制最少的CC许可证是“署名”许可证，即只要按照作者指定的方式为作品署名，就可以用作品做任何事。**\n\n\n-  ## [Apache License](http://www.apache.org/licenses/LICENSE-2.0)\n\n>Apache许可证（2.0版）授予用户大量权利，这些权利适用于版权和专利权。由于有的许可证只适用于版权、不适用于专利权，Apache许可证的这一灵活性使其成为专利开发者的首选。\n\n>Apache许可证特点：\n>- 权利的永久性\n\n >*一旦许可证被授予，你就可以无限期使用。*\n\n> - 权利的世界性\n\n>*如果许可证在某一国授予，那么它同时也授予给其它所有国家。例如，如果你在美国，而原始许可证在印度颁发，那么，你在许可证授权下使用代码并无限制。*\n\n> - 获取权利的免费性\n\n>*你不用预先支付任何使用费，也不用为每次使用或基于其它方式而付费。*\n\n> - 权利的非排他性\n\n>*你能使用经授权的软件，任何其他人也能使用。*\n\n> - 权利的不可撤回性\n\n>*权利一旦授予，无人能撤回。换句话说，你无需担心将来的某个时候，当你创造出授权代码的优秀衍生产品时，有人会跳出来说：“抱歉，你再也不能使用这些代码了” （许可证有条款指出，如果你就许可证授权下的任何内容起诉他人，你的许可证授权即告终结。但这仅仅适用于有专利的软件，并且只要你不起诉软件相关的任何人，你就不必担心）.*\n\n>**Apache许可证对分发代码也有特殊要求，主要是有关给予代码作者以适当荣誉，以及保持许可证的一致性。**\n\n-  ## [LGPL License](http://www.gnu.org/copyleft/lesser.html)\n\n>LGPL允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业软件作为类库引用并发布和销售。\n\n>但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此LGPL协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。\n\n>**GPL/LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品**\n\n不难看出，即便是在这六种许可协议中作出选择，也是比较困难的。\n\n[乌克兰程序员Paul Bagwell](http://paulmillr.com/posts/simple-description-of-popular-software-licenses/)，画了一张分析图，说明应该怎么选择。这是我见过的最简单的讲解，只用两分钟，你就能搞清楚这六种许可证之间的最大区别。\n\n以下为汉化版本，感谢[wadefelix](http://blog.csdn.net/wadefelix/article/details/6384317)的制作：\n\n<img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/11356503627da387f0o.jpg\"  class=\"full-image\">\n\n\n","slug":"常见的开源许可证区别","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb9l001y2ev2q52lhuqb","content":"<p>如何为代码选择开源许可证，这是一个问题。</p>\n<p>世界上的开源许可证，大概有上百种。很少有人搞得清楚它们的区别。千言万语，比不上一张图：</p>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/1135650364a1ffda02o.jpg\" class=\"full-image\"></p>\n<a id=\"more\"></a>\n<p>以下是常见的六种开源协议：</p>\n<ul>\n<li><h2 id=\"GPL-License\"><a href=\"#GPL-License\" class=\"headerlink\" title=\"GPL License\"></a><a href=\"http://www.gnu.org/licenses/gpl.html\" target=\"_blank\" rel=\"noopener\">GPL License</a></h2></li>\n</ul>\n<blockquote>\n<p>GPL协议的主要内容是只要在一个软件中使用(“使用”指类库引用，修改后的代码或者衍生代码)GPL 协议的产品，则该软件产品必须也采用GPL协议，既必须也是开源和免费。这就是所谓的”传染性”。GPL协议的产品作为一个单独的产品使用没有任何问题，还可以享受免费的优势。</p>\n</blockquote>\n<blockquote>\n<p><strong>由于GPL严格要求使用了GPL类库的软件产品必须使用GPL协议，对于使用GPL协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成/采用作为类库和二次开发的基础。</strong></p>\n</blockquote>\n<ul>\n<li><h2 id=\"BSD-License\"><a href=\"#BSD-License\" class=\"headerlink\" title=\"BSD License\"></a><a href=\"https://en.wikipedia.org/wiki/BSD_licenses\" target=\"_blank\" rel=\"noopener\">BSD License</a></h2></li>\n</ul>\n<blockquote>\n<p>BSD开源协议是一个给于使用者很大自由的协议。基本上使用者可以”为所欲为”,可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。</p>\n</blockquote>\n<blockquote>\n<p>但”为所欲为”的前提当你发布使用了BSD协议的代码，或则以BSD协议代码为基础做二次开发自己的产品时，需要满足三个条件：</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。</li>\n<li>如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。</li>\n<li>不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>BSD 代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选BSD协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。</strong></p>\n</blockquote>\n<ul>\n<li><h2 id=\"MIT-License\"><a href=\"#MIT-License\" class=\"headerlink\" title=\"MIT License\"></a><a href=\"https://en.wikipedia.org/wiki/MIT_License\" target=\"_blank\" rel=\"noopener\">MIT License</a></h2></li>\n</ul>\n<blockquote>\n<p>在所有常用的开源许可证中，MIT许可证最为简短，可能也最为广泛。它的条款非常松散，比起大部分其它许可证来说更加宽松。它的基本前提如下：</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>该许可免费授予任何获得本软件及相关文档（合称为“软件包”）的人，许可其无限制地应用软件，包括不受限地使用、拷贝、修改、合并、出版、分发、再授权、和/或出售软件的拷贝。被许可者获取软件包提供的权利须基于以下条件：</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>以上版权声明和本许可声明必须包含在软件包的全部拷贝或实质性部分中。</strong></p>\n</blockquote>\n<blockquote>\n<ul>\n<li>你可以任意使用、拷贝和修改软件。没人能够限制你将软件用于任何项目、以你喜欢的格式拷贝软件任意多次、或以任何方式收费。</li>\n<li>你可以免费分发软件或者出售软件，你分发软件的方式不受限制。</li>\n<li>唯一的限制是软件必须附带许可协议。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>MIT许可证是限制最少的许可证，它基本上是说，只要附带许可证，任何人都可以利用该许可证授权的软件做任何想做的事。</p>\n</blockquote>\n<ul>\n<li><h2 id=\"Creative-Commons\"><a href=\"#Creative-Commons\" class=\"headerlink\" title=\"Creative Commons\"></a><a href=\"http://creativecommons.org/\" target=\"_blank\" rel=\"noopener\">Creative Commons</a></h2></li>\n</ul>\n<blockquote>\n<p>知识共享（Creative Commons，简称CC）许可证并非完全的开源许可证，但设计类项目也常常使用。有各种不同的CC许可证可供使用，每种授予特定的权利。一个CC许可证包含四个基本部分，每部分即可单独生效，又可联合使用。简述如下：</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>署名</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><em>必须按照作者指定的方式对作品进行署名。除此之外，作品可被复制、分发、拷贝以及以其它方式使用</em></p>\n</blockquote>\n<blockquote>\n<ul>\n<li>相同方式共享</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>只能基于相同的CC许可证对作品进行修改、分发等。*</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>非商业性</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><em>作品可被修改、分发等，但不得以商业为目的进行。关于什么构成商业行为，许可证条款并未提供清晰的定义，因此你可能需要在自己的项目里给予澄清。比如说，有人认为“非商业”只是简单地意味着你不能出售作品，也有人认为你不能把作品放到一个带广告的网站上，还有人认为只有当牟利发生时才能称为“商业”。</em></p>\n</blockquote>\n<blockquote>\n<ul>\n<li>禁止衍生</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><em>你可以拷贝和分发授权作品，但你不得以任何方式修改、或基于原作进行创作。</em></p>\n</blockquote>\n<blockquote>\n<p><strong>如前所述，CC许可证的各个部分可以联合使用。最为严格的许可证为“署名-非商业-禁止衍生”许可证，即你可以自由分享作品，但不得修改或收费，同时你必须按照作者指定的方式为作品署名。这对那些一方面希望发布作品，另一方面又希望多多少少保留对作品使用方式的控制权的作者来说，颇为不错。限制最少的CC许可证是“署名”许可证，即只要按照作者指定的方式为作品署名，就可以用作品做任何事。</strong></p>\n</blockquote>\n<ul>\n<li><h2 id=\"Apache-License\"><a href=\"#Apache-License\" class=\"headerlink\" title=\"Apache License\"></a><a href=\"http://www.apache.org/licenses/LICENSE-2.0\" target=\"_blank\" rel=\"noopener\">Apache License</a></h2></li>\n</ul>\n<blockquote>\n<p>Apache许可证（2.0版）授予用户大量权利，这些权利适用于版权和专利权。由于有的许可证只适用于版权、不适用于专利权，Apache许可证的这一灵活性使其成为专利开发者的首选。</p>\n</blockquote>\n<blockquote>\n<p>Apache许可证特点：</p>\n<ul>\n<li>权利的永久性</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><em>一旦许可证被授予，你就可以无限期使用。</em></p>\n</blockquote>\n<blockquote>\n<ul>\n<li>权利的世界性</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><em>如果许可证在某一国授予，那么它同时也授予给其它所有国家。例如，如果你在美国，而原始许可证在印度颁发，那么，你在许可证授权下使用代码并无限制。</em></p>\n</blockquote>\n<blockquote>\n<ul>\n<li>获取权利的免费性</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><em>你不用预先支付任何使用费，也不用为每次使用或基于其它方式而付费。</em></p>\n</blockquote>\n<blockquote>\n<ul>\n<li>权利的非排他性</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><em>你能使用经授权的软件，任何其他人也能使用。</em></p>\n</blockquote>\n<blockquote>\n<ul>\n<li>权利的不可撤回性</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><em>权利一旦授予，无人能撤回。换句话说，你无需担心将来的某个时候，当你创造出授权代码的优秀衍生产品时，有人会跳出来说：“抱歉，你再也不能使用这些代码了” （许可证有条款指出，如果你就许可证授权下的任何内容起诉他人，你的许可证授权即告终结。但这仅仅适用于有专利的软件，并且只要你不起诉软件相关的任何人，你就不必担心）.</em></p>\n</blockquote>\n<blockquote>\n<p><strong>Apache许可证对分发代码也有特殊要求，主要是有关给予代码作者以适当荣誉，以及保持许可证的一致性。</strong></p>\n</blockquote>\n<ul>\n<li><h2 id=\"LGPL-License\"><a href=\"#LGPL-License\" class=\"headerlink\" title=\"LGPL License\"></a><a href=\"http://www.gnu.org/copyleft/lesser.html\" target=\"_blank\" rel=\"noopener\">LGPL License</a></h2></li>\n</ul>\n<blockquote>\n<p>LGPL允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业软件作为类库引用并发布和销售。</p>\n</blockquote>\n<blockquote>\n<p>但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此LGPL协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。</p>\n</blockquote>\n<blockquote>\n<p><strong>GPL/LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品</strong></p>\n</blockquote>\n<p>不难看出，即便是在这六种许可协议中作出选择，也是比较困难的。</p>\n<p><a href=\"http://paulmillr.com/posts/simple-description-of-popular-software-licenses/\" target=\"_blank\" rel=\"noopener\">乌克兰程序员Paul Bagwell</a>，画了一张分析图，说明应该怎么选择。这是我见过的最简单的讲解，只用两分钟，你就能搞清楚这六种许可证之间的最大区别。</p>\n<p>以下为汉化版本，感谢<a href=\"http://blog.csdn.net/wadefelix/article/details/6384317\" target=\"_blank\" rel=\"noopener\">wadefelix</a>的制作：</p>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/11356503627da387f0o.jpg\" class=\"full-image\"></p>\n","site":{"data":{}},"excerpt":"<p>如何为代码选择开源许可证，这是一个问题。</p>\n<p>世界上的开源许可证，大概有上百种。很少有人搞得清楚它们的区别。千言万语，比不上一张图：</p>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/1135650364a1ffda02o.jpg\" class=\"full-image\"></p>","more":"<p>以下是常见的六种开源协议：</p>\n<ul>\n<li><h2 id=\"GPL-License\"><a href=\"#GPL-License\" class=\"headerlink\" title=\"GPL License\"></a><a href=\"http://www.gnu.org/licenses/gpl.html\" target=\"_blank\" rel=\"noopener\">GPL License</a></h2></li>\n</ul>\n<blockquote>\n<p>GPL协议的主要内容是只要在一个软件中使用(“使用”指类库引用，修改后的代码或者衍生代码)GPL 协议的产品，则该软件产品必须也采用GPL协议，既必须也是开源和免费。这就是所谓的”传染性”。GPL协议的产品作为一个单独的产品使用没有任何问题，还可以享受免费的优势。</p>\n</blockquote>\n<blockquote>\n<p><strong>由于GPL严格要求使用了GPL类库的软件产品必须使用GPL协议，对于使用GPL协议的开源代码，商业软件或者对代码有保密要求的部门就不适合集成/采用作为类库和二次开发的基础。</strong></p>\n</blockquote>\n<ul>\n<li><h2 id=\"BSD-License\"><a href=\"#BSD-License\" class=\"headerlink\" title=\"BSD License\"></a><a href=\"https://en.wikipedia.org/wiki/BSD_licenses\" target=\"_blank\" rel=\"noopener\">BSD License</a></h2></li>\n</ul>\n<blockquote>\n<p>BSD开源协议是一个给于使用者很大自由的协议。基本上使用者可以”为所欲为”,可以自由的使用，修改源代码，也可以将修改后的代码作为开源或者专有软件再发布。</p>\n</blockquote>\n<blockquote>\n<p>但”为所欲为”的前提当你发布使用了BSD协议的代码，或则以BSD协议代码为基础做二次开发自己的产品时，需要满足三个条件：</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>如果再发布的产品中包含源代码，则在源代码中必须带有原来代码中的BSD协议。</li>\n<li>如果再发布的只是二进制类库/软件，则需要在类库/软件的文档和版权声明中包含原来代码中的BSD协议。</li>\n<li>不可以用开源代码的作者/机构名字和原来产品的名字做市场推广。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>BSD 代码鼓励代码共享，但需要尊重代码作者的著作权。BSD由于允许使用者修改和重新发布代码，也允许使用或在BSD代码上开发商业软件发布和销售，因此是对商业集成很友好的协议。而很多的公司企业在选用开源产品的时候都首选BSD协议，因为可以完全控制这些第三方的代码，在必要的时候可以修改或者二次开发。</strong></p>\n</blockquote>\n<ul>\n<li><h2 id=\"MIT-License\"><a href=\"#MIT-License\" class=\"headerlink\" title=\"MIT License\"></a><a href=\"https://en.wikipedia.org/wiki/MIT_License\" target=\"_blank\" rel=\"noopener\">MIT License</a></h2></li>\n</ul>\n<blockquote>\n<p>在所有常用的开源许可证中，MIT许可证最为简短，可能也最为广泛。它的条款非常松散，比起大部分其它许可证来说更加宽松。它的基本前提如下：</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>该许可免费授予任何获得本软件及相关文档（合称为“软件包”）的人，许可其无限制地应用软件，包括不受限地使用、拷贝、修改、合并、出版、分发、再授权、和/或出售软件的拷贝。被许可者获取软件包提供的权利须基于以下条件：</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><strong>以上版权声明和本许可声明必须包含在软件包的全部拷贝或实质性部分中。</strong></p>\n</blockquote>\n<blockquote>\n<ul>\n<li>你可以任意使用、拷贝和修改软件。没人能够限制你将软件用于任何项目、以你喜欢的格式拷贝软件任意多次、或以任何方式收费。</li>\n<li>你可以免费分发软件或者出售软件，你分发软件的方式不受限制。</li>\n<li>唯一的限制是软件必须附带许可协议。</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>MIT许可证是限制最少的许可证，它基本上是说，只要附带许可证，任何人都可以利用该许可证授权的软件做任何想做的事。</p>\n</blockquote>\n<ul>\n<li><h2 id=\"Creative-Commons\"><a href=\"#Creative-Commons\" class=\"headerlink\" title=\"Creative Commons\"></a><a href=\"http://creativecommons.org/\" target=\"_blank\" rel=\"noopener\">Creative Commons</a></h2></li>\n</ul>\n<blockquote>\n<p>知识共享（Creative Commons，简称CC）许可证并非完全的开源许可证，但设计类项目也常常使用。有各种不同的CC许可证可供使用，每种授予特定的权利。一个CC许可证包含四个基本部分，每部分即可单独生效，又可联合使用。简述如下：</p>\n</blockquote>\n<blockquote>\n<ul>\n<li>署名</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><em>必须按照作者指定的方式对作品进行署名。除此之外，作品可被复制、分发、拷贝以及以其它方式使用</em></p>\n</blockquote>\n<blockquote>\n<ul>\n<li>相同方式共享</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>只能基于相同的CC许可证对作品进行修改、分发等。*</li>\n</ul>\n</blockquote>\n<blockquote>\n<ul>\n<li>非商业性</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><em>作品可被修改、分发等，但不得以商业为目的进行。关于什么构成商业行为，许可证条款并未提供清晰的定义，因此你可能需要在自己的项目里给予澄清。比如说，有人认为“非商业”只是简单地意味着你不能出售作品，也有人认为你不能把作品放到一个带广告的网站上，还有人认为只有当牟利发生时才能称为“商业”。</em></p>\n</blockquote>\n<blockquote>\n<ul>\n<li>禁止衍生</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><em>你可以拷贝和分发授权作品，但你不得以任何方式修改、或基于原作进行创作。</em></p>\n</blockquote>\n<blockquote>\n<p><strong>如前所述，CC许可证的各个部分可以联合使用。最为严格的许可证为“署名-非商业-禁止衍生”许可证，即你可以自由分享作品，但不得修改或收费，同时你必须按照作者指定的方式为作品署名。这对那些一方面希望发布作品，另一方面又希望多多少少保留对作品使用方式的控制权的作者来说，颇为不错。限制最少的CC许可证是“署名”许可证，即只要按照作者指定的方式为作品署名，就可以用作品做任何事。</strong></p>\n</blockquote>\n<ul>\n<li><h2 id=\"Apache-License\"><a href=\"#Apache-License\" class=\"headerlink\" title=\"Apache License\"></a><a href=\"http://www.apache.org/licenses/LICENSE-2.0\" target=\"_blank\" rel=\"noopener\">Apache License</a></h2></li>\n</ul>\n<blockquote>\n<p>Apache许可证（2.0版）授予用户大量权利，这些权利适用于版权和专利权。由于有的许可证只适用于版权、不适用于专利权，Apache许可证的这一灵活性使其成为专利开发者的首选。</p>\n</blockquote>\n<blockquote>\n<p>Apache许可证特点：</p>\n<ul>\n<li>权利的永久性</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><em>一旦许可证被授予，你就可以无限期使用。</em></p>\n</blockquote>\n<blockquote>\n<ul>\n<li>权利的世界性</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><em>如果许可证在某一国授予，那么它同时也授予给其它所有国家。例如，如果你在美国，而原始许可证在印度颁发，那么，你在许可证授权下使用代码并无限制。</em></p>\n</blockquote>\n<blockquote>\n<ul>\n<li>获取权利的免费性</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><em>你不用预先支付任何使用费，也不用为每次使用或基于其它方式而付费。</em></p>\n</blockquote>\n<blockquote>\n<ul>\n<li>权利的非排他性</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><em>你能使用经授权的软件，任何其他人也能使用。</em></p>\n</blockquote>\n<blockquote>\n<ul>\n<li>权利的不可撤回性</li>\n</ul>\n</blockquote>\n<blockquote>\n<p><em>权利一旦授予，无人能撤回。换句话说，你无需担心将来的某个时候，当你创造出授权代码的优秀衍生产品时，有人会跳出来说：“抱歉，你再也不能使用这些代码了” （许可证有条款指出，如果你就许可证授权下的任何内容起诉他人，你的许可证授权即告终结。但这仅仅适用于有专利的软件，并且只要你不起诉软件相关的任何人，你就不必担心）.</em></p>\n</blockquote>\n<blockquote>\n<p><strong>Apache许可证对分发代码也有特殊要求，主要是有关给予代码作者以适当荣誉，以及保持许可证的一致性。</strong></p>\n</blockquote>\n<ul>\n<li><h2 id=\"LGPL-License\"><a href=\"#LGPL-License\" class=\"headerlink\" title=\"LGPL License\"></a><a href=\"http://www.gnu.org/copyleft/lesser.html\" target=\"_blank\" rel=\"noopener\">LGPL License</a></h2></li>\n</ul>\n<blockquote>\n<p>LGPL允许商业软件通过类库引用(link)方式使用LGPL类库而不需要开源商业软件的代码。这使得采用LGPL协议的开源代码可以被商业软件作为类库引用并发布和销售。</p>\n</blockquote>\n<blockquote>\n<p>但是如果修改LGPL协议的代码或者衍生，则所有修改的代码，涉及修改部分的额外代码和衍生的代码都必须采用LGPL协议。因此LGPL协议的开源代码很适合作为第三方类库被商业软件引用，但不适合希望以LGPL协议代码为基础，通过修改和衍生的方式做二次开发的商业软件采用。</p>\n</blockquote>\n<blockquote>\n<p><strong>GPL/LGPL都保障原作者的知识产权，避免有人利用开源代码复制并开发类似的产品</strong></p>\n</blockquote>\n<p>不难看出，即便是在这六种许可协议中作出选择，也是比较困难的。</p>\n<p><a href=\"http://paulmillr.com/posts/simple-description-of-popular-software-licenses/\" target=\"_blank\" rel=\"noopener\">乌克兰程序员Paul Bagwell</a>，画了一张分析图，说明应该怎么选择。这是我见过的最简单的讲解，只用两分钟，你就能搞清楚这六种许可证之间的最大区别。</p>\n<p>以下为汉化版本，感谢<a href=\"http://blog.csdn.net/wadefelix/article/details/6384317\" target=\"_blank\" rel=\"noopener\">wadefelix</a>的制作：</p>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/11356503627da387f0o.jpg\" class=\"full-image\"></p>"},{"title":"欢迎","date":"2015-04-29T02:02:10.000Z","isupdate":true,"updatetime":"2015-07-19T16:00:00.000Z","_content":"\n<!--more-->\n\n<center>\n\n\n<input type=\"text\" id=\"intext\" value=\"请输入你的英文名\" onfocus=\"this.value=(this.value=='请输入你的英文名')?'':this.value;\">\n<br>\n<input type=\"submit\" value=\"显示效果\" onclick=\"xiamo(intext.value)\">\n\n</center>\n\n\n\n<script type=\"text/javascript\" src=\"http://s3.amazonaws.com/codecademy-content/courses/hour-of-code/js/alphabet.js\"></script>\n\n<div><canvas id=\"myCanvas\" style=\"width=60%\"></canvas></div>\n<script type=\"text/javascript\" src=\"http://s3.amazonaws.com/codecademy-content/courses/hour-of-code/js/bubbles.js\"></script>\n<script type=\"text/javascript\">\n\nfunction xiamo(text_in){\n\nvar myName = text_in;\n\nvar red = [0, 100, 63];\nvar orange = [40, 100, 60];\nvar green = [75, 100, 40];\nvar blue = [196, 77, 55];\nvar purple = [280, 50, 60];\nvar letterColors = [red, orange, green, blue, purple];\n\ndrawName(myName, letterColors);\n\nif(10 < 3)\n{\n    bubbleShape = 'square';\n}\nelse\n{\n    bubbleShape = 'circle';\n}\n\nbounceBubbles();\n}\nxiamo(\"xiamo's note\");\n</script>","source":"_posts/欢迎光临我的博客.md","raw":"title: \"欢迎\"\ndate: 2015-04-29 10:02:10\nisupdate: true\nupdatetime: 2015-07-20\ncategories: 折腾\ntags: 欢迎\n---\n\n<!--more-->\n\n<center>\n\n\n<input type=\"text\" id=\"intext\" value=\"请输入你的英文名\" onfocus=\"this.value=(this.value=='请输入你的英文名')?'':this.value;\">\n<br>\n<input type=\"submit\" value=\"显示效果\" onclick=\"xiamo(intext.value)\">\n\n</center>\n\n\n\n<script type=\"text/javascript\" src=\"http://s3.amazonaws.com/codecademy-content/courses/hour-of-code/js/alphabet.js\"></script>\n\n<div><canvas id=\"myCanvas\" style=\"width=60%\"></canvas></div>\n<script type=\"text/javascript\" src=\"http://s3.amazonaws.com/codecademy-content/courses/hour-of-code/js/bubbles.js\"></script>\n<script type=\"text/javascript\">\n\nfunction xiamo(text_in){\n\nvar myName = text_in;\n\nvar red = [0, 100, 63];\nvar orange = [40, 100, 60];\nvar green = [75, 100, 40];\nvar blue = [196, 77, 55];\nvar purple = [280, 50, 60];\nvar letterColors = [red, orange, green, blue, purple];\n\ndrawName(myName, letterColors);\n\nif(10 < 3)\n{\n    bubbleShape = 'square';\n}\nelse\n{\n    bubbleShape = 'circle';\n}\n\nbounceBubbles();\n}\nxiamo(\"xiamo's note\");\n</script>","slug":"欢迎光临我的博客","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb9m00212ev2n62kxm0b","content":"<a id=\"more\"></a>\n<center><br><br><br><input type=\"text\" id=\"intext\" value=\"请输入你的英文名\" onfocus=\"this.value=(this.value=='请输入你的英文名')?'':this.value;\"><br><br><br><input type=\"submit\" value=\"显示效果\" onclick=\"xiamo(intext.value)\"><br><br></center>\n\n\n\n<script type=\"text/javascript\" src=\"http://s3.amazonaws.com/codecademy-content/courses/hour-of-code/js/alphabet.js\"></script>\n\n<p><div><canvas id=\"myCanvas\" style=\"width=60%\"></canvas></div></p>\n<script type=\"text/javascript\" src=\"http://s3.amazonaws.com/codecademy-content/courses/hour-of-code/js/bubbles.js\"></script>\n<script type=\"text/javascript\">\n\nfunction xiamo(text_in){\n\nvar myName = text_in;\n\nvar red = [0, 100, 63];\nvar orange = [40, 100, 60];\nvar green = [75, 100, 40];\nvar blue = [196, 77, 55];\nvar purple = [280, 50, 60];\nvar letterColors = [red, orange, green, blue, purple];\n\ndrawName(myName, letterColors);\n\nif(10 < 3)\n{\n    bubbleShape = 'square';\n}\nelse\n{\n    bubbleShape = 'circle';\n}\n\nbounceBubbles();\n}\nxiamo(\"xiamo's note\");\n</script>","site":{"data":{}},"excerpt":"","more":"<center><br><br><br><input type=\"text\" id=\"intext\" value=\"请输入你的英文名\" onfocus=\"this.value=(this.value=='请输入你的英文名')?'':this.value;\"><br><br><br><input type=\"submit\" value=\"显示效果\" onclick=\"xiamo(intext.value)\"><br><br></center>\n\n\n\n<script type=\"text/javascript\" src=\"http://s3.amazonaws.com/codecademy-content/courses/hour-of-code/js/alphabet.js\"></script>\n\n<p><div><canvas id=\"myCanvas\" style=\"width=60%\"></canvas></div></p>\n<script type=\"text/javascript\" src=\"http://s3.amazonaws.com/codecademy-content/courses/hour-of-code/js/bubbles.js\"></script>\n<script type=\"text/javascript\">\n\nfunction xiamo(text_in){\n\nvar myName = text_in;\n\nvar red = [0, 100, 63];\nvar orange = [40, 100, 60];\nvar green = [75, 100, 40];\nvar blue = [196, 77, 55];\nvar purple = [280, 50, 60];\nvar letterColors = [red, orange, green, blue, purple];\n\ndrawName(myName, letterColors);\n\nif(10 < 3)\n{\n    bubbleShape = 'square';\n}\nelse\n{\n    bubbleShape = 'circle';\n}\n\nbounceBubbles();\n}\nxiamo(\"xiamo's note\");\n</script>"},{"title":"开启Git大小写敏感","date":"2016-11-24T13:35:57.000Z","_content":"\n\n\n最近公司开发的项目的时候，自己或者队友都经常会手抖针对某些文件的命名规范大小写写错。（毕竟入冬了。。）尤其是包名小写手抖写成大写了。。又由于我设置Android Studio新建文件自动添加到Git，一来二往，导致推上服务器之后发现自己命名有问题，顺手改成小写，这个时候问题就来了。\n\n\n\n由于Git默认是大小写不敏感的，导致我这边虽然修改了，然而队友那边还是老样子，可能会导致后续的提交出现问题让项目无法编译通过，虽然不是什么大问题，稍微小改一下就行。然而鉴于这种问题出现了几次，每次都手动修改还是挺闹心的。我们还是来动手让Git区分大小写吧。\n\n\n\n如果只是想应用于当前项目，那么在当前项目中使用执行以下`Git命令`：\n\n```shell\ngit config core.ignorecase false\n```\n\n\n\n当然，如果想一劳永逸的话，推荐还是做一个全局配置:\n\n```shell\ngit config --global core.ignorecase false\n```\n\n\n\n这样之后的项目都不用担心大小写都问题闹心了。\n\n\n\n","source":"_posts/开启Git大小写敏感.md","raw":"---\ntitle: 开启Git大小写敏感\ndate: 2016-11-24 21:35:57\ntags: \n - Git\n - Tips\n\n\n---\n\n\n\n最近公司开发的项目的时候，自己或者队友都经常会手抖针对某些文件的命名规范大小写写错。（毕竟入冬了。。）尤其是包名小写手抖写成大写了。。又由于我设置Android Studio新建文件自动添加到Git，一来二往，导致推上服务器之后发现自己命名有问题，顺手改成小写，这个时候问题就来了。\n\n\n\n由于Git默认是大小写不敏感的，导致我这边虽然修改了，然而队友那边还是老样子，可能会导致后续的提交出现问题让项目无法编译通过，虽然不是什么大问题，稍微小改一下就行。然而鉴于这种问题出现了几次，每次都手动修改还是挺闹心的。我们还是来动手让Git区分大小写吧。\n\n\n\n如果只是想应用于当前项目，那么在当前项目中使用执行以下`Git命令`：\n\n```shell\ngit config core.ignorecase false\n```\n\n\n\n当然，如果想一劳永逸的话，推荐还是做一个全局配置:\n\n```shell\ngit config --global core.ignorecase false\n```\n\n\n\n这样之后的项目都不用担心大小写都问题闹心了。\n\n\n\n","slug":"开启Git大小写敏感","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb9n00242ev2em0mbrd1","content":"<p>最近公司开发的项目的时候，自己或者队友都经常会手抖针对某些文件的命名规范大小写写错。（毕竟入冬了。。）尤其是包名小写手抖写成大写了。。又由于我设置Android Studio新建文件自动添加到Git，一来二往，导致推上服务器之后发现自己命名有问题，顺手改成小写，这个时候问题就来了。</p>\n<p>由于Git默认是大小写不敏感的，导致我这边虽然修改了，然而队友那边还是老样子，可能会导致后续的提交出现问题让项目无法编译通过，虽然不是什么大问题，稍微小改一下就行。然而鉴于这种问题出现了几次，每次都手动修改还是挺闹心的。我们还是来动手让Git区分大小写吧。</p>\n<p>如果只是想应用于当前项目，那么在当前项目中使用执行以下<code>Git命令</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config core.ignorecase false</span><br></pre></td></tr></table></figure>\n<p>当然，如果想一劳永逸的话，推荐还是做一个全局配置:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global core.ignorecase false</span><br></pre></td></tr></table></figure>\n<p>这样之后的项目都不用担心大小写都问题闹心了。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近公司开发的项目的时候，自己或者队友都经常会手抖针对某些文件的命名规范大小写写错。（毕竟入冬了。。）尤其是包名小写手抖写成大写了。。又由于我设置Android Studio新建文件自动添加到Git，一来二往，导致推上服务器之后发现自己命名有问题，顺手改成小写，这个时候问题就来了。</p>\n<p>由于Git默认是大小写不敏感的，导致我这边虽然修改了，然而队友那边还是老样子，可能会导致后续的提交出现问题让项目无法编译通过，虽然不是什么大问题，稍微小改一下就行。然而鉴于这种问题出现了几次，每次都手动修改还是挺闹心的。我们还是来动手让Git区分大小写吧。</p>\n<p>如果只是想应用于当前项目，那么在当前项目中使用执行以下<code>Git命令</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config core.ignorecase false</span><br></pre></td></tr></table></figure>\n<p>当然，如果想一劳永逸的话，推荐还是做一个全局配置:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global core.ignorecase false</span><br></pre></td></tr></table></figure>\n<p>这样之后的项目都不用担心大小写都问题闹心了。</p>\n"},{"title":"聊聊Mybatis Update操作返回值","date":"2017-09-06T12:00:03.000Z","_content":"\n\n{%note info%}\n\n后端的数据持久化使用的是 Mybatis ，在做高并发下账户增减余额的时候，打算使用乐观锁来解决这个问题。在获取update操作的返回值时遇到了一个问题，似乎 Mybatis 进行 update 操作得到的 `int` 返回值并不是影响的行数。这下就尴尬了。\n\n{%endnote%}\n\n\n一般而言，我们知道当我们使用 Mybatis 在 `mapper` 接口中定义 `insert` `delete` 等操作，定义一个 `int` 类型的返回值，通过该值是否为 0 来判断数据库中受影响的行数进而判断操作是否成功。\n\n<!--more-->\n\n------------\n\n\n\n到底 `update` 返回值代表什么呢？我们来验证一下便知道了，假设有如下一张表以及两条数据：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fja7y057g3j20x004yjst.jpg \"数据库更新之前记录\")\n\n我们来编写一个简单的单元测试用例来验证下,首先使用 mybatis 简单的写个 mapper 进行更新操作，其中 xml 中的内容为：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fja7tn625wj210q0ekgnn.jpg \"mapper 更新语句\")\n\n数据库连接配置为：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fja7wi2iv9j20se0k076a.jpg \"数据库连接配置\")\n\n接来下，我们来编写一个简单的单元测试来验证下：**update 的返回值是不是受影响的记录的条数**，对应的单元测试代码如下：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fja83t5sf3j20sg0oggoq.jpg \"单元测试代码\")\n\n由单元测试代码可以得知，我们将要把数据库中两条记录的 `phone` 字段的值由 `12345678` 修改为 `66666666` ,正常情况下，`resultCode` 将会返回 2 。因为 `update` 操作影响到数据库中这 2 条记录，这和我们期望 2 是相符合的。那么一切正常的情况下，这次单元测试将会通过，那么我们运行看看结果：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fja8bdifgjj20jq0423yx.jpg \"单元测试通过\")\n\n单元测试通过了，再查看数据库中的记录：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fja8ifpsyyj20x206u3zr.jpg \"更新后的数据库记录\")\n\n这说明 mybatis 的 update 更新操作返回值的确是返回受影响的行数......真的是这样吗？\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fja8m25otsj204305h0sm.jpg)\n\n我们知道，当数据库中的记录被修改之后，再次执行重复的 `update` 操作将不会影响到新的行数，为了验证我说的话，我们试试：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fja8rrcju0j20ne03i74t.jpg)\n\n那么，按照这个逻辑：我们再次执行这个单元测试应该是，`resultCode` 返回的应该是 `0` ，和我们的期望的数字 `2` 不一致，将会导致测试不通过。再次运行单元测试：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fja8xe6fwgj20ju050t9b.jpg \"单元测试依然通过\")\n\n居然还是 `passed` ,看到这里聪明的你已经看出来了，<font color='red'>默认情况下，mybatis 的 `update` 操作返回值是记录的  `matched` 的条数，并不是影响的记录条数。</font>\n\n-------------------\n\n严格意义上来将，这并不是 mybatis 的返回值，mybatis 仅仅只是返回的数据库连接驱动（通常是 `JDBC` ）的返回值，也就是说，如果驱动告知更新 2 条记录受影响，那么我们将得到 mybatis 的返回值就会是 2 和 mybatis 本身是没有关系的。\n\n\n\n道理我都懂，如果我们非得要 mybatis 的 `update` 操作明确的返回受影响的记录条数，有没有什么办法呢？\n\n当然是有的。\n\n通过对 `JDBC` URL 显式的指定 **`useAffectedRows`**选项，我们将可以得到受影响的记录的条数：\n\n```java\njdbc:mysql://${jdbc.host}/${jdbc.db}?useAffectedRows=true\n```\n\n我们对我们的数据库连接配置稍做修改，添加 `useAffectedRows` 字段：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fja9nv1e5xj20u80kcdhz.jpg \"修改之后的数据库连接配置\")\n\n此时，mybatis 的 update 操作返回的应该是受影响的条数了，我们再次运行单元测试试试看：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fja9psbcjpj21hy08eabi.jpg \"单元测试不通过\")\n\n`update` 操作返回的是受影响的记录条数，我们知道为 `0` 和我们预期的 `2` 不一致，自然而然单元测试不通过咯～。\n\n##### 相关阅读\n\n- [\"Return number of changed rows\"](http://mybatis-user.963551.n3.nabble.com/Return-number-of-changed-rows-td3888464.html)\n- [\"mybatis实现乐观锁\"](http://www.peristblog.com/c?id=10164)","source":"_posts/聊聊Mybatis-Update操作返回值.md","raw":"---\ntitle: 聊聊Mybatis Update操作返回值\ntags:\n  - Mybatis\n  - MySQL\n  - JDBC\ndate: 2017-09-06 20:00:03\n---\n\n\n{%note info%}\n\n后端的数据持久化使用的是 Mybatis ，在做高并发下账户增减余额的时候，打算使用乐观锁来解决这个问题。在获取update操作的返回值时遇到了一个问题，似乎 Mybatis 进行 update 操作得到的 `int` 返回值并不是影响的行数。这下就尴尬了。\n\n{%endnote%}\n\n\n一般而言，我们知道当我们使用 Mybatis 在 `mapper` 接口中定义 `insert` `delete` 等操作，定义一个 `int` 类型的返回值，通过该值是否为 0 来判断数据库中受影响的行数进而判断操作是否成功。\n\n<!--more-->\n\n------------\n\n\n\n到底 `update` 返回值代表什么呢？我们来验证一下便知道了，假设有如下一张表以及两条数据：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fja7y057g3j20x004yjst.jpg \"数据库更新之前记录\")\n\n我们来编写一个简单的单元测试用例来验证下,首先使用 mybatis 简单的写个 mapper 进行更新操作，其中 xml 中的内容为：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fja7tn625wj210q0ekgnn.jpg \"mapper 更新语句\")\n\n数据库连接配置为：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fja7wi2iv9j20se0k076a.jpg \"数据库连接配置\")\n\n接来下，我们来编写一个简单的单元测试来验证下：**update 的返回值是不是受影响的记录的条数**，对应的单元测试代码如下：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fja83t5sf3j20sg0oggoq.jpg \"单元测试代码\")\n\n由单元测试代码可以得知，我们将要把数据库中两条记录的 `phone` 字段的值由 `12345678` 修改为 `66666666` ,正常情况下，`resultCode` 将会返回 2 。因为 `update` 操作影响到数据库中这 2 条记录，这和我们期望 2 是相符合的。那么一切正常的情况下，这次单元测试将会通过，那么我们运行看看结果：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fja8bdifgjj20jq0423yx.jpg \"单元测试通过\")\n\n单元测试通过了，再查看数据库中的记录：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fja8ifpsyyj20x206u3zr.jpg \"更新后的数据库记录\")\n\n这说明 mybatis 的 update 更新操作返回值的确是返回受影响的行数......真的是这样吗？\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fja8m25otsj204305h0sm.jpg)\n\n我们知道，当数据库中的记录被修改之后，再次执行重复的 `update` 操作将不会影响到新的行数，为了验证我说的话，我们试试：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fja8rrcju0j20ne03i74t.jpg)\n\n那么，按照这个逻辑：我们再次执行这个单元测试应该是，`resultCode` 返回的应该是 `0` ，和我们的期望的数字 `2` 不一致，将会导致测试不通过。再次运行单元测试：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fja8xe6fwgj20ju050t9b.jpg \"单元测试依然通过\")\n\n居然还是 `passed` ,看到这里聪明的你已经看出来了，<font color='red'>默认情况下，mybatis 的 `update` 操作返回值是记录的  `matched` 的条数，并不是影响的记录条数。</font>\n\n-------------------\n\n严格意义上来将，这并不是 mybatis 的返回值，mybatis 仅仅只是返回的数据库连接驱动（通常是 `JDBC` ）的返回值，也就是说，如果驱动告知更新 2 条记录受影响，那么我们将得到 mybatis 的返回值就会是 2 和 mybatis 本身是没有关系的。\n\n\n\n道理我都懂，如果我们非得要 mybatis 的 `update` 操作明确的返回受影响的记录条数，有没有什么办法呢？\n\n当然是有的。\n\n通过对 `JDBC` URL 显式的指定 **`useAffectedRows`**选项，我们将可以得到受影响的记录的条数：\n\n```java\njdbc:mysql://${jdbc.host}/${jdbc.db}?useAffectedRows=true\n```\n\n我们对我们的数据库连接配置稍做修改，添加 `useAffectedRows` 字段：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fja9nv1e5xj20u80kcdhz.jpg \"修改之后的数据库连接配置\")\n\n此时，mybatis 的 update 操作返回的应该是受影响的条数了，我们再次运行单元测试试试看：\n\n![](https://ws1.sinaimg.cn/large/694830ebgy1fja9psbcjpj21hy08eabi.jpg \"单元测试不通过\")\n\n`update` 操作返回的是受影响的记录条数，我们知道为 `0` 和我们预期的 `2` 不一致，自然而然单元测试不通过咯～。\n\n##### 相关阅读\n\n- [\"Return number of changed rows\"](http://mybatis-user.963551.n3.nabble.com/Return-number-of-changed-rows-td3888464.html)\n- [\"mybatis实现乐观锁\"](http://www.peristblog.com/c?id=10164)","slug":"聊聊Mybatis-Update操作返回值","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb9o00272ev2qrdeup0t","content":"<div class=\"note info\"><p>后端的数据持久化使用的是 Mybatis ，在做高并发下账户增减余额的时候，打算使用乐观锁来解决这个问题。在获取update操作的返回值时遇到了一个问题，似乎 Mybatis 进行 update 操作得到的 <code>int</code> 返回值并不是影响的行数。这下就尴尬了。</p></div>\n<p>一般而言，我们知道当我们使用 Mybatis 在 <code>mapper</code> 接口中定义 <code>insert</code> <code>delete</code> 等操作，定义一个 <code>int</code> 类型的返回值，通过该值是否为 0 来判断数据库中受影响的行数进而判断操作是否成功。</p>\n<a id=\"more\"></a>\n<hr>\n<p>到底 <code>update</code> 返回值代表什么呢？我们来验证一下便知道了，假设有如下一张表以及两条数据：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fja7y057g3j20x004yjst.jpg\" alt title=\"数据库更新之前记录\"></p>\n<p>我们来编写一个简单的单元测试用例来验证下,首先使用 mybatis 简单的写个 mapper 进行更新操作，其中 xml 中的内容为：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fja7tn625wj210q0ekgnn.jpg\" alt title=\"mapper 更新语句\"></p>\n<p>数据库连接配置为：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fja7wi2iv9j20se0k076a.jpg\" alt title=\"数据库连接配置\"></p>\n<p>接来下，我们来编写一个简单的单元测试来验证下：<strong>update 的返回值是不是受影响的记录的条数</strong>，对应的单元测试代码如下：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fja83t5sf3j20sg0oggoq.jpg\" alt title=\"单元测试代码\"></p>\n<p>由单元测试代码可以得知，我们将要把数据库中两条记录的 <code>phone</code> 字段的值由 <code>12345678</code> 修改为 <code>66666666</code> ,正常情况下，<code>resultCode</code> 将会返回 2 。因为 <code>update</code> 操作影响到数据库中这 2 条记录，这和我们期望 2 是相符合的。那么一切正常的情况下，这次单元测试将会通过，那么我们运行看看结果：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fja8bdifgjj20jq0423yx.jpg\" alt title=\"单元测试通过\"></p>\n<p>单元测试通过了，再查看数据库中的记录：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fja8ifpsyyj20x206u3zr.jpg\" alt title=\"更新后的数据库记录\"></p>\n<p>这说明 mybatis 的 update 更新操作返回值的确是返回受影响的行数……真的是这样吗？</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fja8m25otsj204305h0sm.jpg\" alt></p>\n<p>我们知道，当数据库中的记录被修改之后，再次执行重复的 <code>update</code> 操作将不会影响到新的行数，为了验证我说的话，我们试试：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fja8rrcju0j20ne03i74t.jpg\" alt></p>\n<p>那么，按照这个逻辑：我们再次执行这个单元测试应该是，<code>resultCode</code> 返回的应该是 <code>0</code> ，和我们的期望的数字 <code>2</code> 不一致，将会导致测试不通过。再次运行单元测试：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fja8xe6fwgj20ju050t9b.jpg\" alt title=\"单元测试依然通过\"></p>\n<p>居然还是 <code>passed</code> ,看到这里聪明的你已经看出来了，<font color=\"red\">默认情况下，mybatis 的 <code>update</code> 操作返回值是记录的  <code>matched</code> 的条数，并不是影响的记录条数。</font></p>\n<hr>\n<p>严格意义上来将，这并不是 mybatis 的返回值，mybatis 仅仅只是返回的数据库连接驱动（通常是 <code>JDBC</code> ）的返回值，也就是说，如果驱动告知更新 2 条记录受影响，那么我们将得到 mybatis 的返回值就会是 2 和 mybatis 本身是没有关系的。</p>\n<p>道理我都懂，如果我们非得要 mybatis 的 <code>update</code> 操作明确的返回受影响的记录条数，有没有什么办法呢？</p>\n<p>当然是有的。</p>\n<p>通过对 <code>JDBC</code> URL 显式的指定 <strong><code>useAffectedRows</code></strong>选项，我们将可以得到受影响的记录的条数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc:mysql:<span class=\"comment\">//$&#123;jdbc.host&#125;/$&#123;jdbc.db&#125;?useAffectedRows=true</span></span><br></pre></td></tr></table></figure>\n<p>我们对我们的数据库连接配置稍做修改，添加 <code>useAffectedRows</code> 字段：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fja9nv1e5xj20u80kcdhz.jpg\" alt title=\"修改之后的数据库连接配置\"></p>\n<p>此时，mybatis 的 update 操作返回的应该是受影响的条数了，我们再次运行单元测试试试看：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fja9psbcjpj21hy08eabi.jpg\" alt title=\"单元测试不通过\"></p>\n<p><code>update</code> 操作返回的是受影响的记录条数，我们知道为 <code>0</code> 和我们预期的 <code>2</code> 不一致，自然而然单元测试不通过咯～。</p>\n<h5 id=\"相关阅读\"><a href=\"#相关阅读\" class=\"headerlink\" title=\"相关阅读\"></a>相关阅读</h5><ul>\n<li><a href=\"http://mybatis-user.963551.n3.nabble.com/Return-number-of-changed-rows-td3888464.html\" target=\"_blank\" rel=\"noopener\">“Return number of changed rows”</a></li>\n<li><a href=\"http://www.peristblog.com/c?id=10164\" target=\"_blank\" rel=\"noopener\">“mybatis实现乐观锁”</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<div class=\"note info\"><p>后端的数据持久化使用的是 Mybatis ，在做高并发下账户增减余额的时候，打算使用乐观锁来解决这个问题。在获取update操作的返回值时遇到了一个问题，似乎 Mybatis 进行 update 操作得到的 <code>int</code> 返回值并不是影响的行数。这下就尴尬了。</p></div>\n<p>一般而言，我们知道当我们使用 Mybatis 在 <code>mapper</code> 接口中定义 <code>insert</code> <code>delete</code> 等操作，定义一个 <code>int</code> 类型的返回值，通过该值是否为 0 来判断数据库中受影响的行数进而判断操作是否成功。</p>","more":"<hr>\n<p>到底 <code>update</code> 返回值代表什么呢？我们来验证一下便知道了，假设有如下一张表以及两条数据：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fja7y057g3j20x004yjst.jpg\" alt title=\"数据库更新之前记录\"></p>\n<p>我们来编写一个简单的单元测试用例来验证下,首先使用 mybatis 简单的写个 mapper 进行更新操作，其中 xml 中的内容为：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fja7tn625wj210q0ekgnn.jpg\" alt title=\"mapper 更新语句\"></p>\n<p>数据库连接配置为：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fja7wi2iv9j20se0k076a.jpg\" alt title=\"数据库连接配置\"></p>\n<p>接来下，我们来编写一个简单的单元测试来验证下：<strong>update 的返回值是不是受影响的记录的条数</strong>，对应的单元测试代码如下：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fja83t5sf3j20sg0oggoq.jpg\" alt title=\"单元测试代码\"></p>\n<p>由单元测试代码可以得知，我们将要把数据库中两条记录的 <code>phone</code> 字段的值由 <code>12345678</code> 修改为 <code>66666666</code> ,正常情况下，<code>resultCode</code> 将会返回 2 。因为 <code>update</code> 操作影响到数据库中这 2 条记录，这和我们期望 2 是相符合的。那么一切正常的情况下，这次单元测试将会通过，那么我们运行看看结果：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fja8bdifgjj20jq0423yx.jpg\" alt title=\"单元测试通过\"></p>\n<p>单元测试通过了，再查看数据库中的记录：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fja8ifpsyyj20x206u3zr.jpg\" alt title=\"更新后的数据库记录\"></p>\n<p>这说明 mybatis 的 update 更新操作返回值的确是返回受影响的行数……真的是这样吗？</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fja8m25otsj204305h0sm.jpg\" alt></p>\n<p>我们知道，当数据库中的记录被修改之后，再次执行重复的 <code>update</code> 操作将不会影响到新的行数，为了验证我说的话，我们试试：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fja8rrcju0j20ne03i74t.jpg\" alt></p>\n<p>那么，按照这个逻辑：我们再次执行这个单元测试应该是，<code>resultCode</code> 返回的应该是 <code>0</code> ，和我们的期望的数字 <code>2</code> 不一致，将会导致测试不通过。再次运行单元测试：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fja8xe6fwgj20ju050t9b.jpg\" alt title=\"单元测试依然通过\"></p>\n<p>居然还是 <code>passed</code> ,看到这里聪明的你已经看出来了，<font color=\"red\">默认情况下，mybatis 的 <code>update</code> 操作返回值是记录的  <code>matched</code> 的条数，并不是影响的记录条数。</font></p>\n<hr>\n<p>严格意义上来将，这并不是 mybatis 的返回值，mybatis 仅仅只是返回的数据库连接驱动（通常是 <code>JDBC</code> ）的返回值，也就是说，如果驱动告知更新 2 条记录受影响，那么我们将得到 mybatis 的返回值就会是 2 和 mybatis 本身是没有关系的。</p>\n<p>道理我都懂，如果我们非得要 mybatis 的 <code>update</code> 操作明确的返回受影响的记录条数，有没有什么办法呢？</p>\n<p>当然是有的。</p>\n<p>通过对 <code>JDBC</code> URL 显式的指定 <strong><code>useAffectedRows</code></strong>选项，我们将可以得到受影响的记录的条数：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jdbc:mysql:<span class=\"comment\">//$&#123;jdbc.host&#125;/$&#123;jdbc.db&#125;?useAffectedRows=true</span></span><br></pre></td></tr></table></figure>\n<p>我们对我们的数据库连接配置稍做修改，添加 <code>useAffectedRows</code> 字段：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fja9nv1e5xj20u80kcdhz.jpg\" alt title=\"修改之后的数据库连接配置\"></p>\n<p>此时，mybatis 的 update 操作返回的应该是受影响的条数了，我们再次运行单元测试试试看：</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/694830ebgy1fja9psbcjpj21hy08eabi.jpg\" alt title=\"单元测试不通过\"></p>\n<p><code>update</code> 操作返回的是受影响的记录条数，我们知道为 <code>0</code> 和我们预期的 <code>2</code> 不一致，自然而然单元测试不通过咯～。</p>\n<h5 id=\"相关阅读\"><a href=\"#相关阅读\" class=\"headerlink\" title=\"相关阅读\"></a>相关阅读</h5><ul>\n<li><a href=\"http://mybatis-user.963551.n3.nabble.com/Return-number-of-changed-rows-td3888464.html\" target=\"_blank\" rel=\"noopener\">“Return number of changed rows”</a></li>\n<li><a href=\"http://www.peristblog.com/c?id=10164\" target=\"_blank\" rel=\"noopener\">“mybatis实现乐观锁”</a></li>\n</ul>"},{"title":"自动备份Hexo博客源文件","date":"2015-07-06T04:49:01.000Z","_content":"\n&ensp;&ensp;用Hexo写博客是一件比较享受的事情，无奈如果换电脑的话，备份博客就是一件比较闹心的事情。\n\n\n\n### 前言\n\n&ensp;&ensp;我曾经给出过通过Git备份Hexo博客源文件的方式，这种方式虽然能够备份Hexo博客的源文件，但是对于博主这种懒人，每次更新博文都需要输入两三行重复的Git命令真是一件麻烦的事情。况且指不定哪天就搞忘push到github上了。\n\n<!--more-->\n\n### 原理\n\n前两天博主刚刚编写过关于**[Hexo添加文章时自动打开编辑器](https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html)**的相关文章，其原理就是利用`NodeJS`的事件监听机制实现监听Hexo的`new`事件来启动编辑器，完成自动启动编辑器的操作。\n\n那么可不可以通过通过监听Hexo的其它事件来完成自动执行Git命令完成自动备份呢？通过查阅[Hexo文档](https://hexo.io/zh-cn/api/events.html)，找到了Hexo的主要事件，见下表：\n\n\n\n| 事件名 | 事件发生时间 |\n|--------|--------|\n|deployBefore|在部署完成前发布\n|deployAfter|在部署成功后发布\n|exit|在 Hexo 结束前发布\n|generateBefore|在静态文件生成前发布\n|generateAfter|在静态文件生成后发布\n|new|在文章文件建立后发布\n\n于是我们就可以通过监听Hexo的`deployAfter`事件，待上传完成之后自动运行Git备份命令，从而达到自动备份的目的。\n\n### 实现\n\n\n#### 将Hexo目录加入Git仓库\n\n本脚本需要<font color=red>`提前`</font>将Hexo加入Git仓库并与Github或者Gitcafe远程仓库绑定之后，才能正常工作。如果你不知道怎么操作，请参考这篇博文：\n\n- **[备份Hexo博客源文件](https://notes.wanghao.work/2015-04-06-%E5%A4%87%E4%BB%BDHexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E6%96%87%E4%BB%B6.html)**\n\n\n\n\n#### 安装`shelljs`模块\n\n要实现这个自动备份功能，需要依赖NodeJs的一个`shelljs`模块,该模块重新包装了`child_process`,调用系统命令更加的方便。（其实就是因为博主懒( ╯▽╰)）该模块需要安装后使用。\n\n在命令中键入以下命令，完成`shelljs`模块的安装：\n\n```bash\nnpm install --save shelljs\n```\n\n#### 编写自动备份脚本\n\n待到模块安装完成，在`Hexo`根目录的`scripts`文件夹下新建一个js文件，文件名随意取。\n\n**如果没有`scripts`目录，请新建一个。**\n\n然后在脚本中，写入以下内容：\n\n```javascript\nrequire('shelljs/global');\n\ntry {\n\thexo.on('deployAfter', function() {//当deploy完成后执行备份\n\t\trun();\n\t});\n} catch (e) {\n\tconsole.log(\"产生了一个错误<(￣3￣)> !，错误详情为：\" + e.toString());\n}\n\nfunction run() {\n\tif (!which('git')) {\n\t\techo('Sorry, this script requires git');\n\t\texit(1);\n\t} else {\n\t\techo(\"======================Auto Backup Begin===========================\");\n\t\tcd('D:/hexo');    //此处修改为Hexo根目录路径\n\t\tif (exec('git add --all').code !== 0) {\n\t\t\techo('Error: Git add failed');\n\t\t\texit(1);\n\n\t\t}\n\t\tif (exec('git commit -am \"Form auto backup script\\'s commit\"').code !== 0) {\n\t\t\techo('Error: Git commit failed');\n\t\t\texit(1);\n\n\t\t}\n\t\tif (exec('git push origin master').code !== 0) {\n\t\t\techo('Error: Git push failed');\n\t\t\texit(1);\n\n\t\t}\n\t\techo(\"==================Auto Backup Complete============================\")\n\t}\n}\n```\n\n- **其中，需要修改第<font color=red>`17`</font>行的<font color=red>`D:/hexo`</font>路径为Hexo的根目录路径。（脚本中的路径为博主的Hexo路径）**\n\n- **如果你的Git远程仓库名称不为<font color=red>`origin`</font>的话，还需要修改第<font color=red>`28`</font>行执行的push命令，修改成自己的远程仓库名和相应的分支名。**\n\n\n\n保存脚本并退出，然后执行`hexo deploy`命令，将会得到类似以下结果:\n\n```bash\nINFO  Deploying: git>\nINFO  Clearing .deploy folder...\nINFO  Copying files from public folder...\n[master 3020788] Site updated: 2015-07-06 15:08:06\n 5 files changed, 160 insertions(+), 58 deletions(-)\nBranch master set up to track remote branch gh-pages from git@github.com:smilexi\namo/notes.git.\nTo git@github.com:smilexiamo/notes.git\n   02adbe4..3020788  master -> gh-pages\nOn branch master\nnothing to commit, working directory clean\nBranch master set up to track remote branch gitcafe-pages from git@gitcafe.com:s\nmilexiamo/smilexiamo.git.\nTo git@gitcafe.com:smilexiamo/smilexiamo.git\n   02adbe4..3020788  master -> gitcafe-pages\nINFO  Deploy done: git\n======================Auto Backup Begin===========================\n[master f044360] Form auto backup script's commit\n 2 files changed, 35 insertions(+), 2 deletions(-)\n rewrite db.json (100%)\nTo git@github.com:smilexiamo/hexo.git\n   8f2b4b4..f044360  master -> master\n==================Auto Backup Complete============================\n```\n这样子，每次更新博文并`deploy`到服务器上之后，备份就自动启动并完成备份啦~是不是很方便呢？\n\nEnjoy it！\n\n\n\n\n","source":"_posts/自动备份Hexo博客源文件.md","raw":"title: 自动备份Hexo博客源文件\ndate: 2015-07-06 12:49:01\ntags:\n- Hexo\ncategories: Hexo\n---\n\n&ensp;&ensp;用Hexo写博客是一件比较享受的事情，无奈如果换电脑的话，备份博客就是一件比较闹心的事情。\n\n\n\n### 前言\n\n&ensp;&ensp;我曾经给出过通过Git备份Hexo博客源文件的方式，这种方式虽然能够备份Hexo博客的源文件，但是对于博主这种懒人，每次更新博文都需要输入两三行重复的Git命令真是一件麻烦的事情。况且指不定哪天就搞忘push到github上了。\n\n<!--more-->\n\n### 原理\n\n前两天博主刚刚编写过关于**[Hexo添加文章时自动打开编辑器](https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html)**的相关文章，其原理就是利用`NodeJS`的事件监听机制实现监听Hexo的`new`事件来启动编辑器，完成自动启动编辑器的操作。\n\n那么可不可以通过通过监听Hexo的其它事件来完成自动执行Git命令完成自动备份呢？通过查阅[Hexo文档](https://hexo.io/zh-cn/api/events.html)，找到了Hexo的主要事件，见下表：\n\n\n\n| 事件名 | 事件发生时间 |\n|--------|--------|\n|deployBefore|在部署完成前发布\n|deployAfter|在部署成功后发布\n|exit|在 Hexo 结束前发布\n|generateBefore|在静态文件生成前发布\n|generateAfter|在静态文件生成后发布\n|new|在文章文件建立后发布\n\n于是我们就可以通过监听Hexo的`deployAfter`事件，待上传完成之后自动运行Git备份命令，从而达到自动备份的目的。\n\n### 实现\n\n\n#### 将Hexo目录加入Git仓库\n\n本脚本需要<font color=red>`提前`</font>将Hexo加入Git仓库并与Github或者Gitcafe远程仓库绑定之后，才能正常工作。如果你不知道怎么操作，请参考这篇博文：\n\n- **[备份Hexo博客源文件](https://notes.wanghao.work/2015-04-06-%E5%A4%87%E4%BB%BDHexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E6%96%87%E4%BB%B6.html)**\n\n\n\n\n#### 安装`shelljs`模块\n\n要实现这个自动备份功能，需要依赖NodeJs的一个`shelljs`模块,该模块重新包装了`child_process`,调用系统命令更加的方便。（其实就是因为博主懒( ╯▽╰)）该模块需要安装后使用。\n\n在命令中键入以下命令，完成`shelljs`模块的安装：\n\n```bash\nnpm install --save shelljs\n```\n\n#### 编写自动备份脚本\n\n待到模块安装完成，在`Hexo`根目录的`scripts`文件夹下新建一个js文件，文件名随意取。\n\n**如果没有`scripts`目录，请新建一个。**\n\n然后在脚本中，写入以下内容：\n\n```javascript\nrequire('shelljs/global');\n\ntry {\n\thexo.on('deployAfter', function() {//当deploy完成后执行备份\n\t\trun();\n\t});\n} catch (e) {\n\tconsole.log(\"产生了一个错误<(￣3￣)> !，错误详情为：\" + e.toString());\n}\n\nfunction run() {\n\tif (!which('git')) {\n\t\techo('Sorry, this script requires git');\n\t\texit(1);\n\t} else {\n\t\techo(\"======================Auto Backup Begin===========================\");\n\t\tcd('D:/hexo');    //此处修改为Hexo根目录路径\n\t\tif (exec('git add --all').code !== 0) {\n\t\t\techo('Error: Git add failed');\n\t\t\texit(1);\n\n\t\t}\n\t\tif (exec('git commit -am \"Form auto backup script\\'s commit\"').code !== 0) {\n\t\t\techo('Error: Git commit failed');\n\t\t\texit(1);\n\n\t\t}\n\t\tif (exec('git push origin master').code !== 0) {\n\t\t\techo('Error: Git push failed');\n\t\t\texit(1);\n\n\t\t}\n\t\techo(\"==================Auto Backup Complete============================\")\n\t}\n}\n```\n\n- **其中，需要修改第<font color=red>`17`</font>行的<font color=red>`D:/hexo`</font>路径为Hexo的根目录路径。（脚本中的路径为博主的Hexo路径）**\n\n- **如果你的Git远程仓库名称不为<font color=red>`origin`</font>的话，还需要修改第<font color=red>`28`</font>行执行的push命令，修改成自己的远程仓库名和相应的分支名。**\n\n\n\n保存脚本并退出，然后执行`hexo deploy`命令，将会得到类似以下结果:\n\n```bash\nINFO  Deploying: git>\nINFO  Clearing .deploy folder...\nINFO  Copying files from public folder...\n[master 3020788] Site updated: 2015-07-06 15:08:06\n 5 files changed, 160 insertions(+), 58 deletions(-)\nBranch master set up to track remote branch gh-pages from git@github.com:smilexi\namo/notes.git.\nTo git@github.com:smilexiamo/notes.git\n   02adbe4..3020788  master -> gh-pages\nOn branch master\nnothing to commit, working directory clean\nBranch master set up to track remote branch gitcafe-pages from git@gitcafe.com:s\nmilexiamo/smilexiamo.git.\nTo git@gitcafe.com:smilexiamo/smilexiamo.git\n   02adbe4..3020788  master -> gitcafe-pages\nINFO  Deploy done: git\n======================Auto Backup Begin===========================\n[master f044360] Form auto backup script's commit\n 2 files changed, 35 insertions(+), 2 deletions(-)\n rewrite db.json (100%)\nTo git@github.com:smilexiamo/hexo.git\n   8f2b4b4..f044360  master -> master\n==================Auto Backup Complete============================\n```\n这样子，每次更新博文并`deploy`到服务器上之后，备份就自动启动并完成备份啦~是不是很方便呢？\n\nEnjoy it！\n\n\n\n\n","slug":"自动备份Hexo博客源文件","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb9p002a2ev2pzhqe0gt","content":"<p>&ensp;&ensp;用Hexo写博客是一件比较享受的事情，无奈如果换电脑的话，备份博客就是一件比较闹心的事情。</p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>&ensp;&ensp;我曾经给出过通过Git备份Hexo博客源文件的方式，这种方式虽然能够备份Hexo博客的源文件，但是对于博主这种懒人，每次更新博文都需要输入两三行重复的Git命令真是一件麻烦的事情。况且指不定哪天就搞忘push到github上了。</p>\n<a id=\"more\"></a>\n<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>前两天博主刚刚编写过关于<strong><a href=\"https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html\" target=\"_blank\" rel=\"noopener\">Hexo添加文章时自动打开编辑器</a></strong>的相关文章，其原理就是利用<code>NodeJS</code>的事件监听机制实现监听Hexo的<code>new</code>事件来启动编辑器，完成自动启动编辑器的操作。</p>\n<p>那么可不可以通过通过监听Hexo的其它事件来完成自动执行Git命令完成自动备份呢？通过查阅<a href=\"https://hexo.io/zh-cn/api/events.html\" target=\"_blank\" rel=\"noopener\">Hexo文档</a>，找到了Hexo的主要事件，见下表：</p>\n<table>\n<thead>\n<tr>\n<th>事件名</th>\n<th>事件发生时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>deployBefore</td>\n<td>在部署完成前发布</td>\n</tr>\n<tr>\n<td>deployAfter</td>\n<td>在部署成功后发布</td>\n</tr>\n<tr>\n<td>exit</td>\n<td>在 Hexo 结束前发布</td>\n</tr>\n<tr>\n<td>generateBefore</td>\n<td>在静态文件生成前发布</td>\n</tr>\n<tr>\n<td>generateAfter</td>\n<td>在静态文件生成后发布</td>\n</tr>\n<tr>\n<td>new</td>\n<td>在文章文件建立后发布</td>\n</tr>\n</tbody>\n</table>\n<p>于是我们就可以通过监听Hexo的<code>deployAfter</code>事件，待上传完成之后自动运行Git备份命令，从而达到自动备份的目的。</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><h4 id=\"将Hexo目录加入Git仓库\"><a href=\"#将Hexo目录加入Git仓库\" class=\"headerlink\" title=\"将Hexo目录加入Git仓库\"></a>将Hexo目录加入Git仓库</h4><p>本脚本需要<font color=\"red\"><code>提前</code></font>将Hexo加入Git仓库并与Github或者Gitcafe远程仓库绑定之后，才能正常工作。如果你不知道怎么操作，请参考这篇博文：</p>\n<ul>\n<li><strong><a href=\"https://notes.wanghao.work/2015-04-06-%E5%A4%87%E4%BB%BDHexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E6%96%87%E4%BB%B6.html\" target=\"_blank\" rel=\"noopener\">备份Hexo博客源文件</a></strong></li>\n</ul>\n<h4 id=\"安装shelljs模块\"><a href=\"#安装shelljs模块\" class=\"headerlink\" title=\"安装shelljs模块\"></a>安装<code>shelljs</code>模块</h4><p>要实现这个自动备份功能，需要依赖NodeJs的一个<code>shelljs</code>模块,该模块重新包装了<code>child_process</code>,调用系统命令更加的方便。（其实就是因为博主懒( ╯▽╰)）该模块需要安装后使用。</p>\n<p>在命令中键入以下命令，完成<code>shelljs</code>模块的安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save shelljs</span><br></pre></td></tr></table></figure>\n<h4 id=\"编写自动备份脚本\"><a href=\"#编写自动备份脚本\" class=\"headerlink\" title=\"编写自动备份脚本\"></a>编写自动备份脚本</h4><p>待到模块安装完成，在<code>Hexo</code>根目录的<code>scripts</code>文件夹下新建一个js文件，文件名随意取。</p>\n<p><strong>如果没有<code>scripts</code>目录，请新建一个。</strong></p>\n<p>然后在脚本中，写入以下内容：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'shelljs/global'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\thexo.on(<span class=\"string\">'deployAfter'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">//当deploy完成后执行备份</span></span><br><span class=\"line\">\t\trun();</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"产生了一个错误&lt;(￣3￣)&gt; !，错误详情为：\"</span> + e.toString());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!which(<span class=\"string\">'git'</span>)) &#123;</span><br><span class=\"line\">\t\techo(<span class=\"string\">'Sorry, this script requires git'</span>);</span><br><span class=\"line\">\t\texit(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\techo(<span class=\"string\">\"======================Auto Backup Begin===========================\"</span>);</span><br><span class=\"line\">\t\tcd(<span class=\"string\">'D:/hexo'</span>);    <span class=\"comment\">//此处修改为Hexo根目录路径</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (exec(<span class=\"string\">'git add --all'</span>).code !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\techo(<span class=\"string\">'Error: Git add failed'</span>);</span><br><span class=\"line\">\t\t\texit(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (exec(<span class=\"string\">'git commit -am \"Form auto backup script\\'s commit\"'</span>).code !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\techo(<span class=\"string\">'Error: Git commit failed'</span>);</span><br><span class=\"line\">\t\t\texit(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (exec(<span class=\"string\">'git push origin master'</span>).code !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\techo(<span class=\"string\">'Error: Git push failed'</span>);</span><br><span class=\"line\">\t\t\texit(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\techo(<span class=\"string\">\"==================Auto Backup Complete============================\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>其中，需要修改第<font color=\"red\"><code>17</code></font>行的<font color=\"red\"><code>D:/hexo</code></font>路径为Hexo的根目录路径。（脚本中的路径为博主的Hexo路径）</strong></p>\n</li>\n<li><p><strong>如果你的Git远程仓库名称不为<font color=\"red\"><code>origin</code></font>的话，还需要修改第<font color=\"red\"><code>28</code></font>行执行的push命令，修改成自己的远程仓库名和相应的分支名。</strong></p>\n</li>\n</ul>\n<p>保存脚本并退出，然后执行<code>hexo deploy</code>命令，将会得到类似以下结果:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  Deploying: git&gt;</span><br><span class=\"line\">INFO  Clearing .deploy folder...</span><br><span class=\"line\">INFO  Copying files from public folder...</span><br><span class=\"line\">[master 3020788] Site updated: 2015-07-06 15:08:06</span><br><span class=\"line\"> 5 files changed, 160 insertions(+), 58 deletions(-)</span><br><span class=\"line\">Branch master <span class=\"built_in\">set</span> up to track remote branch gh-pages from git@github.com:smilexi</span><br><span class=\"line\">amo/notes.git.</span><br><span class=\"line\">To git@github.com:smilexiamo/notes.git</span><br><span class=\"line\">   02adbe4..3020788  master -&gt; gh-pages</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">nothing to commit, working directory clean</span><br><span class=\"line\">Branch master <span class=\"built_in\">set</span> up to track remote branch gitcafe-pages from git@gitcafe.com:s</span><br><span class=\"line\">milexiamo/smilexiamo.git.</span><br><span class=\"line\">To git@gitcafe.com:smilexiamo/smilexiamo.git</span><br><span class=\"line\">   02adbe4..3020788  master -&gt; gitcafe-pages</span><br><span class=\"line\">INFO  Deploy <span class=\"keyword\">done</span>: git</span><br><span class=\"line\">======================Auto Backup Begin===========================</span><br><span class=\"line\">[master f044360] Form auto backup script<span class=\"string\">'s commit</span></span><br><span class=\"line\"><span class=\"string\"> 2 files changed, 35 insertions(+), 2 deletions(-)</span></span><br><span class=\"line\"><span class=\"string\"> rewrite db.json (100%)</span></span><br><span class=\"line\"><span class=\"string\">To git@github.com:smilexiamo/hexo.git</span></span><br><span class=\"line\"><span class=\"string\">   8f2b4b4..f044360  master -&gt; master</span></span><br><span class=\"line\"><span class=\"string\">==================Auto Backup Complete============================</span></span><br></pre></td></tr></table></figure>\n<p>这样子，每次更新博文并<code>deploy</code>到服务器上之后，备份就自动启动并完成备份啦~是不是很方便呢？</p>\n<p>Enjoy it！</p>\n","site":{"data":{}},"excerpt":"<p>&ensp;&ensp;用Hexo写博客是一件比较享受的事情，无奈如果换电脑的话，备份博客就是一件比较闹心的事情。</p>\n<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><p>&ensp;&ensp;我曾经给出过通过Git备份Hexo博客源文件的方式，这种方式虽然能够备份Hexo博客的源文件，但是对于博主这种懒人，每次更新博文都需要输入两三行重复的Git命令真是一件麻烦的事情。况且指不定哪天就搞忘push到github上了。</p>","more":"<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><p>前两天博主刚刚编写过关于<strong><a href=\"https://notes.wanghao.work/2015-06-29-Hexo%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E6%97%B6%E8%87%AA%E5%8A%A8%E6%89%93%E5%BC%80%E7%BC%96%E8%BE%91%E5%99%A8.html\" target=\"_blank\" rel=\"noopener\">Hexo添加文章时自动打开编辑器</a></strong>的相关文章，其原理就是利用<code>NodeJS</code>的事件监听机制实现监听Hexo的<code>new</code>事件来启动编辑器，完成自动启动编辑器的操作。</p>\n<p>那么可不可以通过通过监听Hexo的其它事件来完成自动执行Git命令完成自动备份呢？通过查阅<a href=\"https://hexo.io/zh-cn/api/events.html\" target=\"_blank\" rel=\"noopener\">Hexo文档</a>，找到了Hexo的主要事件，见下表：</p>\n<table>\n<thead>\n<tr>\n<th>事件名</th>\n<th>事件发生时间</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>deployBefore</td>\n<td>在部署完成前发布</td>\n</tr>\n<tr>\n<td>deployAfter</td>\n<td>在部署成功后发布</td>\n</tr>\n<tr>\n<td>exit</td>\n<td>在 Hexo 结束前发布</td>\n</tr>\n<tr>\n<td>generateBefore</td>\n<td>在静态文件生成前发布</td>\n</tr>\n<tr>\n<td>generateAfter</td>\n<td>在静态文件生成后发布</td>\n</tr>\n<tr>\n<td>new</td>\n<td>在文章文件建立后发布</td>\n</tr>\n</tbody>\n</table>\n<p>于是我们就可以通过监听Hexo的<code>deployAfter</code>事件，待上传完成之后自动运行Git备份命令，从而达到自动备份的目的。</p>\n<h3 id=\"实现\"><a href=\"#实现\" class=\"headerlink\" title=\"实现\"></a>实现</h3><h4 id=\"将Hexo目录加入Git仓库\"><a href=\"#将Hexo目录加入Git仓库\" class=\"headerlink\" title=\"将Hexo目录加入Git仓库\"></a>将Hexo目录加入Git仓库</h4><p>本脚本需要<font color=\"red\"><code>提前</code></font>将Hexo加入Git仓库并与Github或者Gitcafe远程仓库绑定之后，才能正常工作。如果你不知道怎么操作，请参考这篇博文：</p>\n<ul>\n<li><strong><a href=\"https://notes.wanghao.work/2015-04-06-%E5%A4%87%E4%BB%BDHexo%E5%8D%9A%E5%AE%A2%E6%BA%90%E6%96%87%E4%BB%B6.html\" target=\"_blank\" rel=\"noopener\">备份Hexo博客源文件</a></strong></li>\n</ul>\n<h4 id=\"安装shelljs模块\"><a href=\"#安装shelljs模块\" class=\"headerlink\" title=\"安装shelljs模块\"></a>安装<code>shelljs</code>模块</h4><p>要实现这个自动备份功能，需要依赖NodeJs的一个<code>shelljs</code>模块,该模块重新包装了<code>child_process</code>,调用系统命令更加的方便。（其实就是因为博主懒( ╯▽╰)）该模块需要安装后使用。</p>\n<p>在命令中键入以下命令，完成<code>shelljs</code>模块的安装：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save shelljs</span><br></pre></td></tr></table></figure>\n<h4 id=\"编写自动备份脚本\"><a href=\"#编写自动备份脚本\" class=\"headerlink\" title=\"编写自动备份脚本\"></a>编写自动备份脚本</h4><p>待到模块安装完成，在<code>Hexo</code>根目录的<code>scripts</code>文件夹下新建一个js文件，文件名随意取。</p>\n<p><strong>如果没有<code>scripts</code>目录，请新建一个。</strong></p>\n<p>然后在脚本中，写入以下内容：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">require</span>(<span class=\"string\">'shelljs/global'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\thexo.on(<span class=\"string\">'deployAfter'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;<span class=\"comment\">//当deploy完成后执行备份</span></span><br><span class=\"line\">\t\trun();</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (e) &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"产生了一个错误&lt;(￣3￣)&gt; !，错误详情为：\"</span> + e.toString());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">run</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (!which(<span class=\"string\">'git'</span>)) &#123;</span><br><span class=\"line\">\t\techo(<span class=\"string\">'Sorry, this script requires git'</span>);</span><br><span class=\"line\">\t\texit(<span class=\"number\">1</span>);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\techo(<span class=\"string\">\"======================Auto Backup Begin===========================\"</span>);</span><br><span class=\"line\">\t\tcd(<span class=\"string\">'D:/hexo'</span>);    <span class=\"comment\">//此处修改为Hexo根目录路径</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (exec(<span class=\"string\">'git add --all'</span>).code !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\techo(<span class=\"string\">'Error: Git add failed'</span>);</span><br><span class=\"line\">\t\t\texit(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (exec(<span class=\"string\">'git commit -am \"Form auto backup script\\'s commit\"'</span>).code !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\techo(<span class=\"string\">'Error: Git commit failed'</span>);</span><br><span class=\"line\">\t\t\texit(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (exec(<span class=\"string\">'git push origin master'</span>).code !== <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\techo(<span class=\"string\">'Error: Git push failed'</span>);</span><br><span class=\"line\">\t\t\texit(<span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\techo(<span class=\"string\">\"==================Auto Backup Complete============================\"</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><strong>其中，需要修改第<font color=\"red\"><code>17</code></font>行的<font color=\"red\"><code>D:/hexo</code></font>路径为Hexo的根目录路径。（脚本中的路径为博主的Hexo路径）</strong></p>\n</li>\n<li><p><strong>如果你的Git远程仓库名称不为<font color=\"red\"><code>origin</code></font>的话，还需要修改第<font color=\"red\"><code>28</code></font>行执行的push命令，修改成自己的远程仓库名和相应的分支名。</strong></p>\n</li>\n</ul>\n<p>保存脚本并退出，然后执行<code>hexo deploy</code>命令，将会得到类似以下结果:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO  Deploying: git&gt;</span><br><span class=\"line\">INFO  Clearing .deploy folder...</span><br><span class=\"line\">INFO  Copying files from public folder...</span><br><span class=\"line\">[master 3020788] Site updated: 2015-07-06 15:08:06</span><br><span class=\"line\"> 5 files changed, 160 insertions(+), 58 deletions(-)</span><br><span class=\"line\">Branch master <span class=\"built_in\">set</span> up to track remote branch gh-pages from git@github.com:smilexi</span><br><span class=\"line\">amo/notes.git.</span><br><span class=\"line\">To git@github.com:smilexiamo/notes.git</span><br><span class=\"line\">   02adbe4..3020788  master -&gt; gh-pages</span><br><span class=\"line\">On branch master</span><br><span class=\"line\">nothing to commit, working directory clean</span><br><span class=\"line\">Branch master <span class=\"built_in\">set</span> up to track remote branch gitcafe-pages from git@gitcafe.com:s</span><br><span class=\"line\">milexiamo/smilexiamo.git.</span><br><span class=\"line\">To git@gitcafe.com:smilexiamo/smilexiamo.git</span><br><span class=\"line\">   02adbe4..3020788  master -&gt; gitcafe-pages</span><br><span class=\"line\">INFO  Deploy <span class=\"keyword\">done</span>: git</span><br><span class=\"line\">======================Auto Backup Begin===========================</span><br><span class=\"line\">[master f044360] Form auto backup script<span class=\"string\">'s commit</span></span><br><span class=\"line\"><span class=\"string\"> 2 files changed, 35 insertions(+), 2 deletions(-)</span></span><br><span class=\"line\"><span class=\"string\"> rewrite db.json (100%)</span></span><br><span class=\"line\"><span class=\"string\">To git@github.com:smilexiamo/hexo.git</span></span><br><span class=\"line\"><span class=\"string\">   8f2b4b4..f044360  master -&gt; master</span></span><br><span class=\"line\"><span class=\"string\">==================Auto Backup Complete============================</span></span><br></pre></td></tr></table></figure>\n<p>这样子，每次更新博文并<code>deploy</code>到服务器上之后，备份就自动启动并完成备份啦~是不是很方便呢？</p>\n<p>Enjoy it！</p>"},{"title":"解决Git refusing to merge unrelated histories问题","date":"2017-06-28T02:40:36.000Z","_content":"\n最近在使用brew更新了git之后，发现在与Github上的新创建的`repo`建立关联的之后，进行`pull`操作会出现类似于下面的这种错误：\n\n```bash\n * branch            master     -> FETCH_HEAD\n * [new branch]      master     -> origin/master\nfatal: refusing to merge unrelated histories\n```\n\n通过查阅资料显示，GIt从版本`2.9.0`开始，预设行为不允许合并没有共同祖先的分支，需要加上`--allow-unrelated-histories`选项进行pull操作才不会出现此类错误信息：\n\n```bash\ngit pull origin master --allow-unrelated-histories\n```\n\n\n\n相关参考：\n\n- [Git merge (2.9.0)](https://git-scm.com/docs/git-merge/2.9.0)\n- [StackoverFlow: Git refusing to merge unrelated histories](https://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories)\n\n","source":"_posts/解决Git-refusing-to-merge-unrelated-histories问题.md","raw":"---\ntitle: 解决Git refusing to merge unrelated histories问题\ndate: 2017-06-28 10:40:36\ntags: Git\n---\n\n最近在使用brew更新了git之后，发现在与Github上的新创建的`repo`建立关联的之后，进行`pull`操作会出现类似于下面的这种错误：\n\n```bash\n * branch            master     -> FETCH_HEAD\n * [new branch]      master     -> origin/master\nfatal: refusing to merge unrelated histories\n```\n\n通过查阅资料显示，GIt从版本`2.9.0`开始，预设行为不允许合并没有共同祖先的分支，需要加上`--allow-unrelated-histories`选项进行pull操作才不会出现此类错误信息：\n\n```bash\ngit pull origin master --allow-unrelated-histories\n```\n\n\n\n相关参考：\n\n- [Git merge (2.9.0)](https://git-scm.com/docs/git-merge/2.9.0)\n- [StackoverFlow: Git refusing to merge unrelated histories](https://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories)\n\n","slug":"解决Git-refusing-to-merge-unrelated-histories问题","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb9q002d2ev2idfaxs65","content":"<p>最近在使用brew更新了git之后，发现在与Github上的新创建的<code>repo</code>建立关联的之后，进行<code>pull</code>操作会出现类似于下面的这种错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> * branch            master     -&gt; FETCH_HEAD</span><br><span class=\"line\"> * [new branch]      master     -&gt; origin/master</span><br><span class=\"line\">fatal: refusing to merge unrelated histories</span><br></pre></td></tr></table></figure>\n<p>通过查阅资料显示，GIt从版本<code>2.9.0</code>开始，预设行为不允许合并没有共同祖先的分支，需要加上<code>--allow-unrelated-histories</code>选项进行pull操作才不会出现此类错误信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>\n<p>相关参考：</p>\n<ul>\n<li><a href=\"https://git-scm.com/docs/git-merge/2.9.0\" target=\"_blank\" rel=\"noopener\">Git merge (2.9.0)</a></li>\n<li><a href=\"https://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories\" target=\"_blank\" rel=\"noopener\">StackoverFlow: Git refusing to merge unrelated histories</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在使用brew更新了git之后，发现在与Github上的新创建的<code>repo</code>建立关联的之后，进行<code>pull</code>操作会出现类似于下面的这种错误：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> * branch            master     -&gt; FETCH_HEAD</span><br><span class=\"line\"> * [new branch]      master     -&gt; origin/master</span><br><span class=\"line\">fatal: refusing to merge unrelated histories</span><br></pre></td></tr></table></figure>\n<p>通过查阅资料显示，GIt从版本<code>2.9.0</code>开始，预设行为不允许合并没有共同祖先的分支，需要加上<code>--allow-unrelated-histories</code>选项进行pull操作才不会出现此类错误信息：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure>\n<p>相关参考：</p>\n<ul>\n<li><a href=\"https://git-scm.com/docs/git-merge/2.9.0\" target=\"_blank\" rel=\"noopener\">Git merge (2.9.0)</a></li>\n<li><a href=\"https://stackoverflow.com/questions/37937984/git-refusing-to-merge-unrelated-histories\" target=\"_blank\" rel=\"noopener\">StackoverFlow: Git refusing to merge unrelated histories</a></li>\n</ul>\n"},{"title":"MySQL API Drivers安装小记","date":"2017-05-19T18:12:46.000Z","_content":"\n#### 前言\n\n最近需要使用Django写点东西，由于自己的macbook上没有也不打算安装MySQL而是以Docker的MySQL镜像替代，Django文档提供了三种MySQL驱动供选择，官方推荐的是[`mysqlclient`](https://pypi.python.org/pypi/mysqlclient),由于我本地没有安装MySQL，所以是没有Native Driver的以至于在安装MySQL驱动的时候遇到了点小问题，在此记录下。\n\n--------\n\n<!--more-->\n\n#### 过程\n\n安装`mysqlclient`：\n\n```she\npip install mysqlclient\n```\n\n然而得到错误信息如下：\n\n```Shell\nCollecting mysqlclient\n  Using cached mysqlclient-1.3.10.tar.gz\n    Complete output from command python setup.py egg_info:\n    /bin/sh: mysql_config: command not found\n    Traceback (most recent call last):\n      File \"<string>\", line 1, in <module>\n      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-mcd2q8ly/mysqlclient/setup.py\", line 17, in <module>\n        metadata, options = get_config()\n      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-mcd2q8ly/mysqlclient/setup_posix.py\", line 44, in get_config\n        libs = mysql_config(\"libs_r\")\n      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-mcd2q8ly/mysqlclient/setup_posix.py\", line 26, in mysql_config\n        raise EnvironmentError(\"%s not found\" % (mysql_config.path,))\n    OSError: mysql_config not found\n\n    ----------------------------------------\nCommand \"python setup.py egg_info\" failed with error code 1 in /private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-mcd2q8ly/mysqlclient/\n```\n\n因为没有安装MySQL，所以在安装`mysqlclient`之前还需要安装Connector，如下：\n\n```shell\nbrew install mysql-connector-c\n```\n\n之后安装再安装`mysqlclient`：\n\n```Shell\npip install mysqlclient\n```\n\n然后又就报错了，错误信息如下：\n\n```Shell\nCollecting mysqlclient\n  Using cached mysqlclient-1.3.10.tar.gz\n    Complete output from command python setup.py egg_info:\n    Traceback (most recent call last):\n      File \"<string>\", line 1, in <module>\n      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-smwmu1qn/mysqlclient/setup.py\", line 17, in <module>\n        metadata, options = get_config()\n      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-smwmu1qn/mysqlclient/setup_posix.py\", line 54, in get_config\n        libraries = [dequote(i[2:]) for i in libs if i.startswith('-l')]\n      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-smwmu1qn/mysqlclient/setup_posix.py\", line 54, in <listcomp>\n        libraries = [dequote(i[2:]) for i in libs if i.startswith('-l')]\n      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-smwmu1qn/mysqlclient/setup_posix.py\", line 12, in dequote\n        if s[0] in \"\\\"'\" and s[0] == s[-1]:\n    IndexError: string index out of range\n\n    ----------------------------------------\nCommand \"python setup.py egg_info\" failed with error code 1 in /private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-smwmu1qn/mysqlclient/\n```\n\n------\n\n\n\n#### 解决\n\n通过查找资料得出可能的结论是通过brew安装的`mysql-connector-c`配置可能不正确，打开`/usr/local/bin/mysql_config`脚本修改其中的部分内容:\n\n```sh\n# Create options\nlibs=\"-L$pkglibdir\"\nlibs=\"$libs  -l\"\n```\n\n修改为：\n\n```shell\n# Create options\nlibs=\"-L$pkglibdir\"\nlibs=\"$libs  -lmysqlclient -lssl -lcrypto\"\n```\n\n保存，再次安装`mysqlclient`应该就会正常安装了。接着就可以使用Django和运行在Docker中的MySQL愉快的Coding了～\n\n","source":"_posts/解决Mysql的Python驱动安装失败.md","raw":"---\ntitle: MySQL API Drivers安装小记\ndate: 2017-05-20 02:12:46\ntags: \n - Python\n---\n\n#### 前言\n\n最近需要使用Django写点东西，由于自己的macbook上没有也不打算安装MySQL而是以Docker的MySQL镜像替代，Django文档提供了三种MySQL驱动供选择，官方推荐的是[`mysqlclient`](https://pypi.python.org/pypi/mysqlclient),由于我本地没有安装MySQL，所以是没有Native Driver的以至于在安装MySQL驱动的时候遇到了点小问题，在此记录下。\n\n--------\n\n<!--more-->\n\n#### 过程\n\n安装`mysqlclient`：\n\n```she\npip install mysqlclient\n```\n\n然而得到错误信息如下：\n\n```Shell\nCollecting mysqlclient\n  Using cached mysqlclient-1.3.10.tar.gz\n    Complete output from command python setup.py egg_info:\n    /bin/sh: mysql_config: command not found\n    Traceback (most recent call last):\n      File \"<string>\", line 1, in <module>\n      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-mcd2q8ly/mysqlclient/setup.py\", line 17, in <module>\n        metadata, options = get_config()\n      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-mcd2q8ly/mysqlclient/setup_posix.py\", line 44, in get_config\n        libs = mysql_config(\"libs_r\")\n      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-mcd2q8ly/mysqlclient/setup_posix.py\", line 26, in mysql_config\n        raise EnvironmentError(\"%s not found\" % (mysql_config.path,))\n    OSError: mysql_config not found\n\n    ----------------------------------------\nCommand \"python setup.py egg_info\" failed with error code 1 in /private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-mcd2q8ly/mysqlclient/\n```\n\n因为没有安装MySQL，所以在安装`mysqlclient`之前还需要安装Connector，如下：\n\n```shell\nbrew install mysql-connector-c\n```\n\n之后安装再安装`mysqlclient`：\n\n```Shell\npip install mysqlclient\n```\n\n然后又就报错了，错误信息如下：\n\n```Shell\nCollecting mysqlclient\n  Using cached mysqlclient-1.3.10.tar.gz\n    Complete output from command python setup.py egg_info:\n    Traceback (most recent call last):\n      File \"<string>\", line 1, in <module>\n      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-smwmu1qn/mysqlclient/setup.py\", line 17, in <module>\n        metadata, options = get_config()\n      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-smwmu1qn/mysqlclient/setup_posix.py\", line 54, in get_config\n        libraries = [dequote(i[2:]) for i in libs if i.startswith('-l')]\n      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-smwmu1qn/mysqlclient/setup_posix.py\", line 54, in <listcomp>\n        libraries = [dequote(i[2:]) for i in libs if i.startswith('-l')]\n      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-smwmu1qn/mysqlclient/setup_posix.py\", line 12, in dequote\n        if s[0] in \"\\\"'\" and s[0] == s[-1]:\n    IndexError: string index out of range\n\n    ----------------------------------------\nCommand \"python setup.py egg_info\" failed with error code 1 in /private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-smwmu1qn/mysqlclient/\n```\n\n------\n\n\n\n#### 解决\n\n通过查找资料得出可能的结论是通过brew安装的`mysql-connector-c`配置可能不正确，打开`/usr/local/bin/mysql_config`脚本修改其中的部分内容:\n\n```sh\n# Create options\nlibs=\"-L$pkglibdir\"\nlibs=\"$libs  -l\"\n```\n\n修改为：\n\n```shell\n# Create options\nlibs=\"-L$pkglibdir\"\nlibs=\"$libs  -lmysqlclient -lssl -lcrypto\"\n```\n\n保存，再次安装`mysqlclient`应该就会正常安装了。接着就可以使用Django和运行在Docker中的MySQL愉快的Coding了～\n\n","slug":"解决Mysql的Python驱动安装失败","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoyb9s002g2ev2ud1udfcq","content":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>最近需要使用Django写点东西，由于自己的macbook上没有也不打算安装MySQL而是以Docker的MySQL镜像替代，Django文档提供了三种MySQL驱动供选择，官方推荐的是<a href=\"https://pypi.python.org/pypi/mysqlclient\" target=\"_blank\" rel=\"noopener\"><code>mysqlclient</code></a>,由于我本地没有安装MySQL，所以是没有Native Driver的以至于在安装MySQL驱动的时候遇到了点小问题，在此记录下。</p>\n<hr>\n<a id=\"more\"></a>\n<h4 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h4><p>安装<code>mysqlclient</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install mysqlclient</span><br></pre></td></tr></table></figure>\n<p>然而得到错误信息如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Collecting mysqlclient</span><br><span class=\"line\">  Using cached mysqlclient-1.3.10.tar.gz</span><br><span class=\"line\">    Complete output from command python setup.py egg_info:</span><br><span class=\"line\">    /bin/sh: mysql_config: command not found</span><br><span class=\"line\">    Traceback (most recent call last):</span><br><span class=\"line\">      File \"&lt;string&gt;\", line 1, in &lt;module&gt;</span><br><span class=\"line\">      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-mcd2q8ly/mysqlclient/setup.py\", line 17, in &lt;module&gt;</span><br><span class=\"line\">        metadata, options = get_config()</span><br><span class=\"line\">      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-mcd2q8ly/mysqlclient/setup_posix.py\", line 44, in get_config</span><br><span class=\"line\">        libs = mysql_config(\"libs_r\")</span><br><span class=\"line\">      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-mcd2q8ly/mysqlclient/setup_posix.py\", line 26, in mysql_config</span><br><span class=\"line\">        raise EnvironmentError(\"%s not found\" % (mysql_config.path,))</span><br><span class=\"line\">    OSError: mysql_config not found</span><br><span class=\"line\"></span><br><span class=\"line\">    ----------------------------------------</span><br><span class=\"line\">Command \"python setup.py egg_info\" failed with error code 1 in /private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-mcd2q8ly/mysqlclient/</span><br></pre></td></tr></table></figure>\n<p>因为没有安装MySQL，所以在安装<code>mysqlclient</code>之前还需要安装Connector，如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install mysql-connector-c</span><br></pre></td></tr></table></figure>\n<p>之后安装再安装<code>mysqlclient</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install mysqlclient</span><br></pre></td></tr></table></figure>\n<p>然后又就报错了，错误信息如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Collecting mysqlclient</span><br><span class=\"line\">  Using cached mysqlclient-1.3.10.tar.gz</span><br><span class=\"line\">    Complete output from command python setup.py egg_info:</span><br><span class=\"line\">    Traceback (most recent call last):</span><br><span class=\"line\">      File \"&lt;string&gt;\", line 1, in &lt;module&gt;</span><br><span class=\"line\">      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-smwmu1qn/mysqlclient/setup.py\", line 17, in &lt;module&gt;</span><br><span class=\"line\">        metadata, options = get_config()</span><br><span class=\"line\">      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-smwmu1qn/mysqlclient/setup_posix.py\", line 54, in get_config</span><br><span class=\"line\">        libraries = [dequote(i[2:]) for i in libs if i.startswith('-l')]</span><br><span class=\"line\">      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-smwmu1qn/mysqlclient/setup_posix.py\", line 54, in &lt;listcomp&gt;</span><br><span class=\"line\">        libraries = [dequote(i[2:]) for i in libs if i.startswith('-l')]</span><br><span class=\"line\">      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-smwmu1qn/mysqlclient/setup_posix.py\", line 12, in dequote</span><br><span class=\"line\">        if s[0] in \"\\\"'\" and s[0] == s[-1]:</span><br><span class=\"line\">    IndexError: string index out of range</span><br><span class=\"line\"></span><br><span class=\"line\">    ----------------------------------------</span><br><span class=\"line\">Command \"python setup.py egg_info\" failed with error code 1 in /private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-smwmu1qn/mysqlclient/</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h4><p>通过查找资料得出可能的结论是通过brew安装的<code>mysql-connector-c</code>配置可能不正确，打开<code>/usr/local/bin/mysql_config</code>脚本修改其中的部分内容:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Create options</span></span><br><span class=\"line\">libs=<span class=\"string\">\"-L<span class=\"variable\">$pkglibdir</span>\"</span></span><br><span class=\"line\">libs=<span class=\"string\">\"<span class=\"variable\">$libs</span>  -l\"</span></span><br></pre></td></tr></table></figure>\n<p>修改为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Create options</span></span><br><span class=\"line\">libs=\"-L$pkglibdir\"</span><br><span class=\"line\">libs=\"$libs  -lmysqlclient -lssl -lcrypto\"</span><br></pre></td></tr></table></figure>\n<p>保存，再次安装<code>mysqlclient</code>应该就会正常安装了。接着就可以使用Django和运行在Docker中的MySQL愉快的Coding了～</p>\n","site":{"data":{}},"excerpt":"<h4 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h4><p>最近需要使用Django写点东西，由于自己的macbook上没有也不打算安装MySQL而是以Docker的MySQL镜像替代，Django文档提供了三种MySQL驱动供选择，官方推荐的是<a href=\"https://pypi.python.org/pypi/mysqlclient\" target=\"_blank\" rel=\"noopener\"><code>mysqlclient</code></a>,由于我本地没有安装MySQL，所以是没有Native Driver的以至于在安装MySQL驱动的时候遇到了点小问题，在此记录下。</p>\n<hr>","more":"<h4 id=\"过程\"><a href=\"#过程\" class=\"headerlink\" title=\"过程\"></a>过程</h4><p>安装<code>mysqlclient</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install mysqlclient</span><br></pre></td></tr></table></figure>\n<p>然而得到错误信息如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Collecting mysqlclient</span><br><span class=\"line\">  Using cached mysqlclient-1.3.10.tar.gz</span><br><span class=\"line\">    Complete output from command python setup.py egg_info:</span><br><span class=\"line\">    /bin/sh: mysql_config: command not found</span><br><span class=\"line\">    Traceback (most recent call last):</span><br><span class=\"line\">      File \"&lt;string&gt;\", line 1, in &lt;module&gt;</span><br><span class=\"line\">      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-mcd2q8ly/mysqlclient/setup.py\", line 17, in &lt;module&gt;</span><br><span class=\"line\">        metadata, options = get_config()</span><br><span class=\"line\">      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-mcd2q8ly/mysqlclient/setup_posix.py\", line 44, in get_config</span><br><span class=\"line\">        libs = mysql_config(\"libs_r\")</span><br><span class=\"line\">      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-mcd2q8ly/mysqlclient/setup_posix.py\", line 26, in mysql_config</span><br><span class=\"line\">        raise EnvironmentError(\"%s not found\" % (mysql_config.path,))</span><br><span class=\"line\">    OSError: mysql_config not found</span><br><span class=\"line\"></span><br><span class=\"line\">    ----------------------------------------</span><br><span class=\"line\">Command \"python setup.py egg_info\" failed with error code 1 in /private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-mcd2q8ly/mysqlclient/</span><br></pre></td></tr></table></figure>\n<p>因为没有安装MySQL，所以在安装<code>mysqlclient</code>之前还需要安装Connector，如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install mysql-connector-c</span><br></pre></td></tr></table></figure>\n<p>之后安装再安装<code>mysqlclient</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip install mysqlclient</span><br></pre></td></tr></table></figure>\n<p>然后又就报错了，错误信息如下：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Collecting mysqlclient</span><br><span class=\"line\">  Using cached mysqlclient-1.3.10.tar.gz</span><br><span class=\"line\">    Complete output from command python setup.py egg_info:</span><br><span class=\"line\">    Traceback (most recent call last):</span><br><span class=\"line\">      File \"&lt;string&gt;\", line 1, in &lt;module&gt;</span><br><span class=\"line\">      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-smwmu1qn/mysqlclient/setup.py\", line 17, in &lt;module&gt;</span><br><span class=\"line\">        metadata, options = get_config()</span><br><span class=\"line\">      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-smwmu1qn/mysqlclient/setup_posix.py\", line 54, in get_config</span><br><span class=\"line\">        libraries = [dequote(i[2:]) for i in libs if i.startswith('-l')]</span><br><span class=\"line\">      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-smwmu1qn/mysqlclient/setup_posix.py\", line 54, in &lt;listcomp&gt;</span><br><span class=\"line\">        libraries = [dequote(i[2:]) for i in libs if i.startswith('-l')]</span><br><span class=\"line\">      File \"/private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-smwmu1qn/mysqlclient/setup_posix.py\", line 12, in dequote</span><br><span class=\"line\">        if s[0] in \"\\\"'\" and s[0] == s[-1]:</span><br><span class=\"line\">    IndexError: string index out of range</span><br><span class=\"line\"></span><br><span class=\"line\">    ----------------------------------------</span><br><span class=\"line\">Command \"python setup.py egg_info\" failed with error code 1 in /private/var/folders/ll/d2yyxp555ss1gm613y33hfy80000gn/T/pip-build-smwmu1qn/mysqlclient/</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"解决\"><a href=\"#解决\" class=\"headerlink\" title=\"解决\"></a>解决</h4><p>通过查找资料得出可能的结论是通过brew安装的<code>mysql-connector-c</code>配置可能不正确，打开<code>/usr/local/bin/mysql_config</code>脚本修改其中的部分内容:</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Create options</span></span><br><span class=\"line\">libs=<span class=\"string\">\"-L<span class=\"variable\">$pkglibdir</span>\"</span></span><br><span class=\"line\">libs=<span class=\"string\">\"<span class=\"variable\">$libs</span>  -l\"</span></span><br></pre></td></tr></table></figure>\n<p>修改为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Create options</span></span><br><span class=\"line\">libs=\"-L$pkglibdir\"</span><br><span class=\"line\">libs=\"$libs  -lmysqlclient -lssl -lcrypto\"</span><br></pre></td></tr></table></figure>\n<p>保存，再次安装<code>mysqlclient</code>应该就会正常安装了。接着就可以使用Django和运行在Docker中的MySQL愉快的Coding了～</p>"},{"title":"Android之Keystore文件签名","isupdate":false,"date":"2016-07-03T12:58:16.000Z","updatetime":null,"_content":"\nAndroid应用开发的时候会经常使用到第三方SDK，例如地图、推送、支付以及分享等。而这些第三方服务SDK为了应用不被滥用都会有签名验证机制。我们通过上传Android应用的签名来在服务端配置以验证应用的合法性。本文将讲述下在Android Stduio中常用的签名操作。\n\n\n### 默认KeyStore\n\n#### 默认KeyStore存储路径\n\n在Android Stduio中系统默认内置了一个签名文件`debug.keystore`，用于我们在debug下的默认App签名。如果没有在Gradle文件中特殊指定，那么Android Studio将自动使用默认的`debug.keystore`文件为项目App生成Debug版本的签名。\n\n\n<!-- more-->\n\n * 在Mac/Linux系统中，`debug.keystore`文件默认储存在`~/.android/`路径下。\n\n * 在Windows系统中，`debug.keystore`文件将默认存储在`C:\\Users\\{USERNAME}\\.android\\`路径下。\n\n#### 获取默认KeyStore `SHA-1`\n\n知道了Android Stduio 默认的`debug.keystore`之后，下一步我们将是要获取其指纹信息，以便于在第三方服务配置中填入Debug指纹信息。\n\n - 在Linux/Mac系统中，打开终端并输入以下命令:\n\n```bash\nkeytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android\n```\n\n - 在Windows系统中，在CMD中输入以下命令:\n\n```bat\nkeytool -list -v -keystore \"%USERPROFILE%\\.android\\debug.keystore\" -alias androiddebugkey -storepass android -keypass android\n```\n\n回车执行之后，你将会看到类似下面的`debug.keystore`输出提示:\n\n```bash\n别名: androiddebugkey\n创建日期: 2015-11-18\n条目类型: PrivateKeyEntry\n证书链长度: 1\n证书[1]:\n所有者: CN=Android Debug, O=Android, C=US\n发布者: CN=Android Debug, O=Android, C=US\n序列号: b15af1\n有效期开始日期: Wed Nov 18 07:18:45 CST 2015, 截止日期: Fri Nov 10 07:18:45 CST 2045\n证书指纹:\n         MD5: FE:A1:9C:02:71:A2:DA:F9:7F:1C:2B:61:D7:65:89:44\n         SHA1: 01:DF:58:7D:04:3E:76:B5:92:98:37:0E:DD:70:61:01:70:F5:C9:8E\n         SHA256: 84:18:44:C2:BD:AD:5D:A8:88:A1:96:EF:A6:27:86:0A:36:44:31:38:F2:5F:B6:4E:F1:10:EE:93:D6:22:CD:59\n         签名算法名称: SHA256withRSA\n         版本: 3\n\n扩展:\n\n```\n\n我们将其中的证书指纹填入到第三方服务DEBUG配置中即可。当然了，有的时候出于这样或者那样的原因考虑，我们并不想使用系统默认的KeyStore或者就想自己生成一个新的KeyStore，Debug环境与Release环境都使用同一个来减少配置的麻烦。这个时候我们就需要创建一个新的KeyStore文件了。\n\n### 创建新的KeyStore\n\n我们使用JDK自带的Keytool命令行工具即可完成KeyStore密钥库文件的创建，此处需要说明的是，Android Stduio中自带的图形化界面`KeyStore`生成工具生成的`.jks`文件与Keytool生成的`.keystore`文件在使用上没有任何区别。\n\n#### 生成KeyStore\n\n在终端中键入以下命令:\n\n```bash\nkeytool -genkey -v -keystore {FILENAME.keystore} -alias {ALIAS} -keyalg RSA -validity {DURATION}\n```\n\n - `{FILENAME.keystore}` 为生成的KeyStore的文件名\n - `{ALIAS}` 为生成的KeyStore文件的别名\n - `{DURATION}` 为该KeyStore文件的过期时间\n\n下面将以生成一个test.keystore文件为示例:\n\n```bash\nkeytool -genkey -v -keystore test.keystore -alias test -keyalg RSA -validity 365\n```\n\n键入以上命令将生成一个以RSA算法加密的有效期365天的名为`test.keystore`的文件，该KeyStore文件的alias为 test。回车确认执行该命令之后，将会要求输入密钥库口令以及一些基本的信息，根据提示输入无误之后将会在当前终端所在目录生成指定的KeyStore文件。完整的示例如下所示:\n\n```bash\n\n$ keytool -genkey -v -keystore test.keystore -alias test -keyalg RSA -validity 365\n输入密钥库口令:  android\n再次输入新口令: android\n您的名字与姓氏是什么?\n  [Unknown]:  Doublemine\n您的组织单位名称是什么?\n  [Unknown]:  Test\n您的组织名称是什么?\n  [Unknown]:  Test\n您所在的城市或区域名称是什么?\n  [Unknown]:  Test\n您所在的省/市/自治区名称是什么?\n  [Unknown]:  Test\n该单位的双字母国家/地区代码是什么?\n  [Unknown]:  Test\nCN=Doublemine, OU=Test, O=Test, L=Test, ST=Test, C=Test是否正确?\n  [否]:  y\n\n正在为以下对象生成 2,048 位RSA密钥对和自签名证书 (SHA256withRSA) (有效期为 365 天):\n         CN=Doublemine, OU=Test, O=Test, L=Test, ST=Test, C=Test\n输入 <test> 的密钥口令\n        (如果和密钥库口令相同, 按回车):\n[正在存储test.keystore]\n\n```\n\n这样我们就有了一个全新的KeyStore文件可以用于Android的App签名，有了KeyStore文件下一步当然就是获取我们生成的KeyStore文件的指纹信息咯~\n\n#### 获取KeyStore指纹信息\n\n与获取默认的`debug.keystore`文件指纹信息类似，我们在终端中键入以下命令:\n\n```bash\n keytool -v -list -keystore test.keystore -alias test -keypass android -storepass android\n```\n\n即可获取到我们生成的KeyStore指纹信息，有的同学已经看出来了，只要将上述命令中的几个参数替换下，即可查看任意KeyStore的指纹信息:\n\n```bash\n keytool -v -list -keystore {FILENAME.keystore} -alias {ALIAS} -keypass {KEYPASSWD} -storepass {STOREPASSWD}\n```\n\n - `{FILENAME.keystore}`为keystore文件名\n - `{ALIAS}`为KeyStore的别名\n - `{KEYPASSWD}`为KeyStore的密钥口令\n - `{STOREPASSWD}`为KeyStore的密钥库口令\n\n### 应用KeyStore\n\n前面我们忙活了大半天生成了KeyStore文件，并查看其指纹信息。但是如果我们不使用到我们的项目中，毕竟还是不会对我们的项目生效的~我们还需要在Gradle脚本中对其进行配置，我们的项目才会应用其KeyStore文件。\n\n其中我们有两种较为普遍的方式在项目中配置我们的KeyStore文件，第一种比较简单粗暴，直接在gradle构建脚本中写入KeyStore信息,第二种则将KeyStore信息配置在一个单独的配置文件中，在gradle构建时动态读取。\n\n#### 签名信息写入Gradle脚本\n\n在Android Stduio中打开主moudle的`build.gradle`文件,在其中的`android`闭包中键入如下内容:\n\n```gradle\nsigningConfigs {\n    release {\n      keyAlias 'test'\n      keyPassword 'android'\n      storeFile file('./keystore/test.keystore')\n      storePassword 'android'\n    }\n  }\n```\n其中声明的release闭包中包含了`keyAlias`、`keyPassword`、`storeFile`、`storePassword`四个Property。其中含义分别为:\n\n - `keyAlias` keystore的`alias`\n - `keyPassword` KeyStore的密钥口令\n - `storeFile`为KeyStore的文件存放路径，可以为相对或者绝对路径，此处使用的为相对路径\n - `storePassword`为KeyStore的密钥库口令\n\n以上的Gradle DSL将会作用于我们的项目的Release版本，当我们在终端中个输入:\n\n```bash\ngradlew assembleRelease\n```\n\n项目将会使用我们上面定义的`test.keystore`密钥库文件签名打包项目为Release发布版。\n\n同样，如果我们不想使用默认的`debug.keystore`签名项目的Debug版本，我们亦可以重新生成一个KeyStore文件或者使用Release版本的签名该文件，放入debug闭包中即可:\n\n```gradle\nsigningConfigs {\n    release {\n      keyAlias 'test'\n      keyPassword 'android'\n      storeFile file('./keystore/test.keystore')\n      storePassword 'android'\n    }\n    debug {\n     keyAlias 'test'\n      keyPassword 'android'\n      storeFile file('./keystore/test.keystore')\n      storePassword 'android'\n    }\n  }\n```\n\n#### 签名信息写入配置文件\n\n细心的同学可能发现了，虽然上面的把签名信息写入gradle脚本中比较方便省事，但是却在密钥文件的密钥密码泄露问题，任何能够看到此Moudle的build.gradle脚本的人都可以拿到KeyStore文件及其对应的密钥口令，可能会导致一些安全风险。因此在一些开源项目或者比较敏感的项目中，可能会存在类似的gradle配置:\n\n在主moudle的build.gradle脚本的android闭包中:\n\n```gradle\napplicationVariants.all {  \n    if (project.hasProperty('keyAlias') && project.hasProperty('storeFile') &&\n    project.hasProperty('storePassword') &&\n    project.hasProperty('keyPassword')) {\n  android.signingConfigs.release.keyAlias = keyAlias\n  android.signingConfigs.release.storeFile = file(storeFile)\n  android.signingConfigs.release.storePassword = storePassword\n  android.signingConfigs.release.keyPassword = keyPassword\n} else {\n  android.buildTypes.release.signingConfig = null\n}\n}\n```\n\n其中`Variants`翻译中文为`变种`,`applicationVariants.all`属性含义为`app plugin`下所有的`Variant`的配置信息，可以将其看作为一个总览，可以方便的访问所有对象。\n[相关延伸阅读Gradle Plugin User Guide](http://tools.android.com/tech-docs/new-build-system/user-guide)，我们在其中通过`project.hasProperty`读取项目中的配置，并将其动态的赋值给`signingConfigs.release`下的相关属性。\n\n然后我们通过在`gradle.properties`或者其它项目中能够被gradle的文件中定义以上属性并赋值即可：\n\n```gradle\nstoreFile=./keystore/test.keystore\nstorePassword=android\nkeyAlias=test\nkeyPassword=android\n```\n\n这样我们在项目团队协作时，将`gradle.properties`文件忽略即可。\n\nEnjoy IT!","source":"_posts/Android之Keystore文件签名.md","raw":"title: Android之Keystore文件签名\nisupdate: false\ndate: 2016-07-03 20:58:16\nupdatetime:\ntags:\n - Android\n - Android Studio\n - KeyStore\ncategories: Android\n---\n\nAndroid应用开发的时候会经常使用到第三方SDK，例如地图、推送、支付以及分享等。而这些第三方服务SDK为了应用不被滥用都会有签名验证机制。我们通过上传Android应用的签名来在服务端配置以验证应用的合法性。本文将讲述下在Android Stduio中常用的签名操作。\n\n\n### 默认KeyStore\n\n#### 默认KeyStore存储路径\n\n在Android Stduio中系统默认内置了一个签名文件`debug.keystore`，用于我们在debug下的默认App签名。如果没有在Gradle文件中特殊指定，那么Android Studio将自动使用默认的`debug.keystore`文件为项目App生成Debug版本的签名。\n\n\n<!-- more-->\n\n * 在Mac/Linux系统中，`debug.keystore`文件默认储存在`~/.android/`路径下。\n\n * 在Windows系统中，`debug.keystore`文件将默认存储在`C:\\Users\\{USERNAME}\\.android\\`路径下。\n\n#### 获取默认KeyStore `SHA-1`\n\n知道了Android Stduio 默认的`debug.keystore`之后，下一步我们将是要获取其指纹信息，以便于在第三方服务配置中填入Debug指纹信息。\n\n - 在Linux/Mac系统中，打开终端并输入以下命令:\n\n```bash\nkeytool -list -v -keystore ~/.android/debug.keystore -alias androiddebugkey -storepass android -keypass android\n```\n\n - 在Windows系统中，在CMD中输入以下命令:\n\n```bat\nkeytool -list -v -keystore \"%USERPROFILE%\\.android\\debug.keystore\" -alias androiddebugkey -storepass android -keypass android\n```\n\n回车执行之后，你将会看到类似下面的`debug.keystore`输出提示:\n\n```bash\n别名: androiddebugkey\n创建日期: 2015-11-18\n条目类型: PrivateKeyEntry\n证书链长度: 1\n证书[1]:\n所有者: CN=Android Debug, O=Android, C=US\n发布者: CN=Android Debug, O=Android, C=US\n序列号: b15af1\n有效期开始日期: Wed Nov 18 07:18:45 CST 2015, 截止日期: Fri Nov 10 07:18:45 CST 2045\n证书指纹:\n         MD5: FE:A1:9C:02:71:A2:DA:F9:7F:1C:2B:61:D7:65:89:44\n         SHA1: 01:DF:58:7D:04:3E:76:B5:92:98:37:0E:DD:70:61:01:70:F5:C9:8E\n         SHA256: 84:18:44:C2:BD:AD:5D:A8:88:A1:96:EF:A6:27:86:0A:36:44:31:38:F2:5F:B6:4E:F1:10:EE:93:D6:22:CD:59\n         签名算法名称: SHA256withRSA\n         版本: 3\n\n扩展:\n\n```\n\n我们将其中的证书指纹填入到第三方服务DEBUG配置中即可。当然了，有的时候出于这样或者那样的原因考虑，我们并不想使用系统默认的KeyStore或者就想自己生成一个新的KeyStore，Debug环境与Release环境都使用同一个来减少配置的麻烦。这个时候我们就需要创建一个新的KeyStore文件了。\n\n### 创建新的KeyStore\n\n我们使用JDK自带的Keytool命令行工具即可完成KeyStore密钥库文件的创建，此处需要说明的是，Android Stduio中自带的图形化界面`KeyStore`生成工具生成的`.jks`文件与Keytool生成的`.keystore`文件在使用上没有任何区别。\n\n#### 生成KeyStore\n\n在终端中键入以下命令:\n\n```bash\nkeytool -genkey -v -keystore {FILENAME.keystore} -alias {ALIAS} -keyalg RSA -validity {DURATION}\n```\n\n - `{FILENAME.keystore}` 为生成的KeyStore的文件名\n - `{ALIAS}` 为生成的KeyStore文件的别名\n - `{DURATION}` 为该KeyStore文件的过期时间\n\n下面将以生成一个test.keystore文件为示例:\n\n```bash\nkeytool -genkey -v -keystore test.keystore -alias test -keyalg RSA -validity 365\n```\n\n键入以上命令将生成一个以RSA算法加密的有效期365天的名为`test.keystore`的文件，该KeyStore文件的alias为 test。回车确认执行该命令之后，将会要求输入密钥库口令以及一些基本的信息，根据提示输入无误之后将会在当前终端所在目录生成指定的KeyStore文件。完整的示例如下所示:\n\n```bash\n\n$ keytool -genkey -v -keystore test.keystore -alias test -keyalg RSA -validity 365\n输入密钥库口令:  android\n再次输入新口令: android\n您的名字与姓氏是什么?\n  [Unknown]:  Doublemine\n您的组织单位名称是什么?\n  [Unknown]:  Test\n您的组织名称是什么?\n  [Unknown]:  Test\n您所在的城市或区域名称是什么?\n  [Unknown]:  Test\n您所在的省/市/自治区名称是什么?\n  [Unknown]:  Test\n该单位的双字母国家/地区代码是什么?\n  [Unknown]:  Test\nCN=Doublemine, OU=Test, O=Test, L=Test, ST=Test, C=Test是否正确?\n  [否]:  y\n\n正在为以下对象生成 2,048 位RSA密钥对和自签名证书 (SHA256withRSA) (有效期为 365 天):\n         CN=Doublemine, OU=Test, O=Test, L=Test, ST=Test, C=Test\n输入 <test> 的密钥口令\n        (如果和密钥库口令相同, 按回车):\n[正在存储test.keystore]\n\n```\n\n这样我们就有了一个全新的KeyStore文件可以用于Android的App签名，有了KeyStore文件下一步当然就是获取我们生成的KeyStore文件的指纹信息咯~\n\n#### 获取KeyStore指纹信息\n\n与获取默认的`debug.keystore`文件指纹信息类似，我们在终端中键入以下命令:\n\n```bash\n keytool -v -list -keystore test.keystore -alias test -keypass android -storepass android\n```\n\n即可获取到我们生成的KeyStore指纹信息，有的同学已经看出来了，只要将上述命令中的几个参数替换下，即可查看任意KeyStore的指纹信息:\n\n```bash\n keytool -v -list -keystore {FILENAME.keystore} -alias {ALIAS} -keypass {KEYPASSWD} -storepass {STOREPASSWD}\n```\n\n - `{FILENAME.keystore}`为keystore文件名\n - `{ALIAS}`为KeyStore的别名\n - `{KEYPASSWD}`为KeyStore的密钥口令\n - `{STOREPASSWD}`为KeyStore的密钥库口令\n\n### 应用KeyStore\n\n前面我们忙活了大半天生成了KeyStore文件，并查看其指纹信息。但是如果我们不使用到我们的项目中，毕竟还是不会对我们的项目生效的~我们还需要在Gradle脚本中对其进行配置，我们的项目才会应用其KeyStore文件。\n\n其中我们有两种较为普遍的方式在项目中配置我们的KeyStore文件，第一种比较简单粗暴，直接在gradle构建脚本中写入KeyStore信息,第二种则将KeyStore信息配置在一个单独的配置文件中，在gradle构建时动态读取。\n\n#### 签名信息写入Gradle脚本\n\n在Android Stduio中打开主moudle的`build.gradle`文件,在其中的`android`闭包中键入如下内容:\n\n```gradle\nsigningConfigs {\n    release {\n      keyAlias 'test'\n      keyPassword 'android'\n      storeFile file('./keystore/test.keystore')\n      storePassword 'android'\n    }\n  }\n```\n其中声明的release闭包中包含了`keyAlias`、`keyPassword`、`storeFile`、`storePassword`四个Property。其中含义分别为:\n\n - `keyAlias` keystore的`alias`\n - `keyPassword` KeyStore的密钥口令\n - `storeFile`为KeyStore的文件存放路径，可以为相对或者绝对路径，此处使用的为相对路径\n - `storePassword`为KeyStore的密钥库口令\n\n以上的Gradle DSL将会作用于我们的项目的Release版本，当我们在终端中个输入:\n\n```bash\ngradlew assembleRelease\n```\n\n项目将会使用我们上面定义的`test.keystore`密钥库文件签名打包项目为Release发布版。\n\n同样，如果我们不想使用默认的`debug.keystore`签名项目的Debug版本，我们亦可以重新生成一个KeyStore文件或者使用Release版本的签名该文件，放入debug闭包中即可:\n\n```gradle\nsigningConfigs {\n    release {\n      keyAlias 'test'\n      keyPassword 'android'\n      storeFile file('./keystore/test.keystore')\n      storePassword 'android'\n    }\n    debug {\n     keyAlias 'test'\n      keyPassword 'android'\n      storeFile file('./keystore/test.keystore')\n      storePassword 'android'\n    }\n  }\n```\n\n#### 签名信息写入配置文件\n\n细心的同学可能发现了，虽然上面的把签名信息写入gradle脚本中比较方便省事，但是却在密钥文件的密钥密码泄露问题，任何能够看到此Moudle的build.gradle脚本的人都可以拿到KeyStore文件及其对应的密钥口令，可能会导致一些安全风险。因此在一些开源项目或者比较敏感的项目中，可能会存在类似的gradle配置:\n\n在主moudle的build.gradle脚本的android闭包中:\n\n```gradle\napplicationVariants.all {  \n    if (project.hasProperty('keyAlias') && project.hasProperty('storeFile') &&\n    project.hasProperty('storePassword') &&\n    project.hasProperty('keyPassword')) {\n  android.signingConfigs.release.keyAlias = keyAlias\n  android.signingConfigs.release.storeFile = file(storeFile)\n  android.signingConfigs.release.storePassword = storePassword\n  android.signingConfigs.release.keyPassword = keyPassword\n} else {\n  android.buildTypes.release.signingConfig = null\n}\n}\n```\n\n其中`Variants`翻译中文为`变种`,`applicationVariants.all`属性含义为`app plugin`下所有的`Variant`的配置信息，可以将其看作为一个总览，可以方便的访问所有对象。\n[相关延伸阅读Gradle Plugin User Guide](http://tools.android.com/tech-docs/new-build-system/user-guide)，我们在其中通过`project.hasProperty`读取项目中的配置，并将其动态的赋值给`signingConfigs.release`下的相关属性。\n\n然后我们通过在`gradle.properties`或者其它项目中能够被gradle的文件中定义以上属性并赋值即可：\n\n```gradle\nstoreFile=./keystore/test.keystore\nstorePassword=android\nkeyAlias=test\nkeyPassword=android\n```\n\n这样我们在项目团队协作时，将`gradle.properties`文件忽略即可。\n\nEnjoy IT!","slug":"Android之Keystore文件签名","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoybg1004w2ev234sk04ea","content":"<p>Android应用开发的时候会经常使用到第三方SDK，例如地图、推送、支付以及分享等。而这些第三方服务SDK为了应用不被滥用都会有签名验证机制。我们通过上传Android应用的签名来在服务端配置以验证应用的合法性。本文将讲述下在Android Stduio中常用的签名操作。</p>\n<h3 id=\"默认KeyStore\"><a href=\"#默认KeyStore\" class=\"headerlink\" title=\"默认KeyStore\"></a>默认KeyStore</h3><h4 id=\"默认KeyStore存储路径\"><a href=\"#默认KeyStore存储路径\" class=\"headerlink\" title=\"默认KeyStore存储路径\"></a>默认KeyStore存储路径</h4><p>在Android Stduio中系统默认内置了一个签名文件<code>debug.keystore</code>，用于我们在debug下的默认App签名。如果没有在Gradle文件中特殊指定，那么Android Studio将自动使用默认的<code>debug.keystore</code>文件为项目App生成Debug版本的签名。</p>\n<a id=\"more\"></a>\n<ul>\n<li><p>在Mac/Linux系统中，<code>debug.keystore</code>文件默认储存在<code>~/.android/</code>路径下。</p>\n</li>\n<li><p>在Windows系统中，<code>debug.keystore</code>文件将默认存储在<code>C:\\Users\\{USERNAME}\\.android\\</code>路径下。</p>\n</li>\n</ul>\n<h4 id=\"获取默认KeyStore-SHA-1\"><a href=\"#获取默认KeyStore-SHA-1\" class=\"headerlink\" title=\"获取默认KeyStore SHA-1\"></a>获取默认KeyStore <code>SHA-1</code></h4><p>知道了Android Stduio 默认的<code>debug.keystore</code>之后，下一步我们将是要获取其指纹信息，以便于在第三方服务配置中填入Debug指纹信息。</p>\n<ul>\n<li>在Linux/Mac系统中，打开终端并输入以下命令:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -list -v -keystore ~/.android/debug.keystore -<span class=\"built_in\">alias</span> androiddebugkey -storepass android -keypass android</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在Windows系统中，在CMD中输入以下命令:</li>\n</ul>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -list -v -keystore \"<span class=\"variable\">%USERPROFILE%</span>\\.android\\debug.keystore\" -alias androiddebugkey -storepass android -keypass android</span><br></pre></td></tr></table></figure>\n<p>回车执行之后，你将会看到类似下面的<code>debug.keystore</code>输出提示:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">别名: androiddebugkey</span><br><span class=\"line\">创建日期: 2015-11-18</span><br><span class=\"line\">条目类型: PrivateKeyEntry</span><br><span class=\"line\">证书链长度: 1</span><br><span class=\"line\">证书[1]:</span><br><span class=\"line\">所有者: CN=Android Debug, O=Android, C=US</span><br><span class=\"line\">发布者: CN=Android Debug, O=Android, C=US</span><br><span class=\"line\">序列号: b15af1</span><br><span class=\"line\">有效期开始日期: Wed Nov 18 07:18:45 CST 2015, 截止日期: Fri Nov 10 07:18:45 CST 2045</span><br><span class=\"line\">证书指纹:</span><br><span class=\"line\">         MD5: FE:A1:9C:02:71:A2:DA:F9:7F:1C:2B:61:D7:65:89:44</span><br><span class=\"line\">         SHA1: 01:DF:58:7D:04:3E:76:B5:92:98:37:0E:DD:70:61:01:70:F5:C9:8E</span><br><span class=\"line\">         SHA256: 84:18:44:C2:BD:AD:5D:A8:88:A1:96:EF:A6:27:86:0A:36:44:31:38:F2:5F:B6:4E:F1:10:EE:93:D6:22:CD:59</span><br><span class=\"line\">         签名算法名称: SHA256withRSA</span><br><span class=\"line\">         版本: 3</span><br><span class=\"line\"></span><br><span class=\"line\">扩展:</span><br></pre></td></tr></table></figure>\n<p>我们将其中的证书指纹填入到第三方服务DEBUG配置中即可。当然了，有的时候出于这样或者那样的原因考虑，我们并不想使用系统默认的KeyStore或者就想自己生成一个新的KeyStore，Debug环境与Release环境都使用同一个来减少配置的麻烦。这个时候我们就需要创建一个新的KeyStore文件了。</p>\n<h3 id=\"创建新的KeyStore\"><a href=\"#创建新的KeyStore\" class=\"headerlink\" title=\"创建新的KeyStore\"></a>创建新的KeyStore</h3><p>我们使用JDK自带的Keytool命令行工具即可完成KeyStore密钥库文件的创建，此处需要说明的是，Android Stduio中自带的图形化界面<code>KeyStore</code>生成工具生成的<code>.jks</code>文件与Keytool生成的<code>.keystore</code>文件在使用上没有任何区别。</p>\n<h4 id=\"生成KeyStore\"><a href=\"#生成KeyStore\" class=\"headerlink\" title=\"生成KeyStore\"></a>生成KeyStore</h4><p>在终端中键入以下命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkey -v -keystore &#123;FILENAME.keystore&#125; -<span class=\"built_in\">alias</span> &#123;ALIAS&#125; -keyalg RSA -validity &#123;DURATION&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>{FILENAME.keystore}</code> 为生成的KeyStore的文件名</li>\n<li><code>{ALIAS}</code> 为生成的KeyStore文件的别名</li>\n<li><code>{DURATION}</code> 为该KeyStore文件的过期时间</li>\n</ul>\n<p>下面将以生成一个test.keystore文件为示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkey -v -keystore test.keystore -<span class=\"built_in\">alias</span> <span class=\"built_in\">test</span> -keyalg RSA -validity 365</span><br></pre></td></tr></table></figure>\n<p>键入以上命令将生成一个以RSA算法加密的有效期365天的名为<code>test.keystore</code>的文件，该KeyStore文件的alias为 test。回车确认执行该命令之后，将会要求输入密钥库口令以及一些基本的信息，根据提示输入无误之后将会在当前终端所在目录生成指定的KeyStore文件。完整的示例如下所示:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ keytool -genkey -v -keystore test.keystore -<span class=\"built_in\">alias</span> <span class=\"built_in\">test</span> -keyalg RSA -validity 365</span><br><span class=\"line\">输入密钥库口令:  android</span><br><span class=\"line\">再次输入新口令: android</span><br><span class=\"line\">您的名字与姓氏是什么?</span><br><span class=\"line\">  [Unknown]:  Doublemine</span><br><span class=\"line\">您的组织单位名称是什么?</span><br><span class=\"line\">  [Unknown]:  Test</span><br><span class=\"line\">您的组织名称是什么?</span><br><span class=\"line\">  [Unknown]:  Test</span><br><span class=\"line\">您所在的城市或区域名称是什么?</span><br><span class=\"line\">  [Unknown]:  Test</span><br><span class=\"line\">您所在的省/市/自治区名称是什么?</span><br><span class=\"line\">  [Unknown]:  Test</span><br><span class=\"line\">该单位的双字母国家/地区代码是什么?</span><br><span class=\"line\">  [Unknown]:  Test</span><br><span class=\"line\">CN=Doublemine, OU=Test, O=Test, L=Test, ST=Test, C=Test是否正确?</span><br><span class=\"line\">  [否]:  y</span><br><span class=\"line\"></span><br><span class=\"line\">正在为以下对象生成 2,048 位RSA密钥对和自签名证书 (SHA256withRSA) (有效期为 365 天):</span><br><span class=\"line\">         CN=Doublemine, OU=Test, O=Test, L=Test, ST=Test, C=Test</span><br><span class=\"line\">输入 &lt;<span class=\"built_in\">test</span>&gt; 的密钥口令</span><br><span class=\"line\">        (如果和密钥库口令相同, 按回车):</span><br><span class=\"line\">[正在存储test.keystore]</span><br></pre></td></tr></table></figure>\n<p>这样我们就有了一个全新的KeyStore文件可以用于Android的App签名，有了KeyStore文件下一步当然就是获取我们生成的KeyStore文件的指纹信息咯~</p>\n<h4 id=\"获取KeyStore指纹信息\"><a href=\"#获取KeyStore指纹信息\" class=\"headerlink\" title=\"获取KeyStore指纹信息\"></a>获取KeyStore指纹信息</h4><p>与获取默认的<code>debug.keystore</code>文件指纹信息类似，我们在终端中键入以下命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -v -list -keystore test.keystore -<span class=\"built_in\">alias</span> <span class=\"built_in\">test</span> -keypass android -storepass android</span><br></pre></td></tr></table></figure>\n<p>即可获取到我们生成的KeyStore指纹信息，有的同学已经看出来了，只要将上述命令中的几个参数替换下，即可查看任意KeyStore的指纹信息:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -v -list -keystore &#123;FILENAME.keystore&#125; -<span class=\"built_in\">alias</span> &#123;ALIAS&#125; -keypass &#123;KEYPASSWD&#125; -storepass &#123;STOREPASSWD&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>{FILENAME.keystore}</code>为keystore文件名</li>\n<li><code>{ALIAS}</code>为KeyStore的别名</li>\n<li><code>{KEYPASSWD}</code>为KeyStore的密钥口令</li>\n<li><code>{STOREPASSWD}</code>为KeyStore的密钥库口令</li>\n</ul>\n<h3 id=\"应用KeyStore\"><a href=\"#应用KeyStore\" class=\"headerlink\" title=\"应用KeyStore\"></a>应用KeyStore</h3><p>前面我们忙活了大半天生成了KeyStore文件，并查看其指纹信息。但是如果我们不使用到我们的项目中，毕竟还是不会对我们的项目生效的~我们还需要在Gradle脚本中对其进行配置，我们的项目才会应用其KeyStore文件。</p>\n<p>其中我们有两种较为普遍的方式在项目中配置我们的KeyStore文件，第一种比较简单粗暴，直接在gradle构建脚本中写入KeyStore信息,第二种则将KeyStore信息配置在一个单独的配置文件中，在gradle构建时动态读取。</p>\n<h4 id=\"签名信息写入Gradle脚本\"><a href=\"#签名信息写入Gradle脚本\" class=\"headerlink\" title=\"签名信息写入Gradle脚本\"></a>签名信息写入Gradle脚本</h4><p>在Android Stduio中打开主moudle的<code>build.gradle</code>文件,在其中的<code>android</code>闭包中键入如下内容:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signingConfigs &#123;</span><br><span class=\"line\">    release &#123;</span><br><span class=\"line\">      keyAlias <span class=\"string\">'test'</span></span><br><span class=\"line\">      keyPassword <span class=\"string\">'android'</span></span><br><span class=\"line\">      storeFile <span class=\"keyword\">file</span>(<span class=\"string\">'./keystore/test.keystore'</span>)</span><br><span class=\"line\">      storePassword <span class=\"string\">'android'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>其中声明的release闭包中包含了<code>keyAlias</code>、<code>keyPassword</code>、<code>storeFile</code>、<code>storePassword</code>四个Property。其中含义分别为:</p>\n<ul>\n<li><code>keyAlias</code> keystore的<code>alias</code></li>\n<li><code>keyPassword</code> KeyStore的密钥口令</li>\n<li><code>storeFile</code>为KeyStore的文件存放路径，可以为相对或者绝对路径，此处使用的为相对路径</li>\n<li><code>storePassword</code>为KeyStore的密钥库口令</li>\n</ul>\n<p>以上的Gradle DSL将会作用于我们的项目的Release版本，当我们在终端中个输入:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradlew assembleRelease</span><br></pre></td></tr></table></figure>\n<p>项目将会使用我们上面定义的<code>test.keystore</code>密钥库文件签名打包项目为Release发布版。</p>\n<p>同样，如果我们不想使用默认的<code>debug.keystore</code>签名项目的Debug版本，我们亦可以重新生成一个KeyStore文件或者使用Release版本的签名该文件，放入debug闭包中即可:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signingConfigs &#123;</span><br><span class=\"line\">    release &#123;</span><br><span class=\"line\">      keyAlias <span class=\"string\">'test'</span></span><br><span class=\"line\">      keyPassword <span class=\"string\">'android'</span></span><br><span class=\"line\">      storeFile <span class=\"keyword\">file</span>(<span class=\"string\">'./keystore/test.keystore'</span>)</span><br><span class=\"line\">      storePassword <span class=\"string\">'android'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    debug &#123;</span><br><span class=\"line\">     keyAlias <span class=\"string\">'test'</span></span><br><span class=\"line\">      keyPassword <span class=\"string\">'android'</span></span><br><span class=\"line\">      storeFile <span class=\"keyword\">file</span>(<span class=\"string\">'./keystore/test.keystore'</span>)</span><br><span class=\"line\">      storePassword <span class=\"string\">'android'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"签名信息写入配置文件\"><a href=\"#签名信息写入配置文件\" class=\"headerlink\" title=\"签名信息写入配置文件\"></a>签名信息写入配置文件</h4><p>细心的同学可能发现了，虽然上面的把签名信息写入gradle脚本中比较方便省事，但是却在密钥文件的密钥密码泄露问题，任何能够看到此Moudle的build.gradle脚本的人都可以拿到KeyStore文件及其对应的密钥口令，可能会导致一些安全风险。因此在一些开源项目或者比较敏感的项目中，可能会存在类似的gradle配置:</p>\n<p>在主moudle的build.gradle脚本的android闭包中:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">applicationVariants.all &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">project</span>.hasProperty(<span class=\"string\">'keyAlias'</span>) &amp;&amp; <span class=\"keyword\">project</span>.hasProperty(<span class=\"string\">'storeFile'</span>) &amp;&amp;</span><br><span class=\"line\">    <span class=\"keyword\">project</span>.hasProperty(<span class=\"string\">'storePassword'</span>) &amp;&amp;</span><br><span class=\"line\">    <span class=\"keyword\">project</span>.hasProperty(<span class=\"string\">'keyPassword'</span>)) &#123;</span><br><span class=\"line\">  android.signingConfigs.release.keyAlias = keyAlias</span><br><span class=\"line\">  android.signingConfigs.release.storeFile = <span class=\"keyword\">file</span>(storeFile)</span><br><span class=\"line\">  android.signingConfigs.release.storePassword = storePassword</span><br><span class=\"line\">  android.signingConfigs.release.keyPassword = keyPassword</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  android.buildTypes.release.signingConfig = <span class=\"keyword\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中<code>Variants</code>翻译中文为<code>变种</code>,<code>applicationVariants.all</code>属性含义为<code>app plugin</code>下所有的<code>Variant</code>的配置信息，可以将其看作为一个总览，可以方便的访问所有对象。<br><a href=\"http://tools.android.com/tech-docs/new-build-system/user-guide\" target=\"_blank\" rel=\"noopener\">相关延伸阅读Gradle Plugin User Guide</a>，我们在其中通过<code>project.hasProperty</code>读取项目中的配置，并将其动态的赋值给<code>signingConfigs.release</code>下的相关属性。</p>\n<p>然后我们通过在<code>gradle.properties</code>或者其它项目中能够被gradle的文件中定义以上属性并赋值即可：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">storeFile=.<span class=\"regexp\">/keystore/</span>test.keystore</span><br><span class=\"line\">storePassword=android</span><br><span class=\"line\">keyAlias=test</span><br><span class=\"line\">keyPassword=android</span><br></pre></td></tr></table></figure>\n<p>这样我们在项目团队协作时，将<code>gradle.properties</code>文件忽略即可。</p>\n<p>Enjoy IT!</p>\n","site":{"data":{}},"excerpt":"<p>Android应用开发的时候会经常使用到第三方SDK，例如地图、推送、支付以及分享等。而这些第三方服务SDK为了应用不被滥用都会有签名验证机制。我们通过上传Android应用的签名来在服务端配置以验证应用的合法性。本文将讲述下在Android Stduio中常用的签名操作。</p>\n<h3 id=\"默认KeyStore\"><a href=\"#默认KeyStore\" class=\"headerlink\" title=\"默认KeyStore\"></a>默认KeyStore</h3><h4 id=\"默认KeyStore存储路径\"><a href=\"#默认KeyStore存储路径\" class=\"headerlink\" title=\"默认KeyStore存储路径\"></a>默认KeyStore存储路径</h4><p>在Android Stduio中系统默认内置了一个签名文件<code>debug.keystore</code>，用于我们在debug下的默认App签名。如果没有在Gradle文件中特殊指定，那么Android Studio将自动使用默认的<code>debug.keystore</code>文件为项目App生成Debug版本的签名。</p>","more":"<ul>\n<li><p>在Mac/Linux系统中，<code>debug.keystore</code>文件默认储存在<code>~/.android/</code>路径下。</p>\n</li>\n<li><p>在Windows系统中，<code>debug.keystore</code>文件将默认存储在<code>C:\\Users\\{USERNAME}\\.android\\</code>路径下。</p>\n</li>\n</ul>\n<h4 id=\"获取默认KeyStore-SHA-1\"><a href=\"#获取默认KeyStore-SHA-1\" class=\"headerlink\" title=\"获取默认KeyStore SHA-1\"></a>获取默认KeyStore <code>SHA-1</code></h4><p>知道了Android Stduio 默认的<code>debug.keystore</code>之后，下一步我们将是要获取其指纹信息，以便于在第三方服务配置中填入Debug指纹信息。</p>\n<ul>\n<li>在Linux/Mac系统中，打开终端并输入以下命令:</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -list -v -keystore ~/.android/debug.keystore -<span class=\"built_in\">alias</span> androiddebugkey -storepass android -keypass android</span><br></pre></td></tr></table></figure>\n<ul>\n<li>在Windows系统中，在CMD中输入以下命令:</li>\n</ul>\n<figure class=\"highlight bat\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -list -v -keystore \"<span class=\"variable\">%USERPROFILE%</span>\\.android\\debug.keystore\" -alias androiddebugkey -storepass android -keypass android</span><br></pre></td></tr></table></figure>\n<p>回车执行之后，你将会看到类似下面的<code>debug.keystore</code>输出提示:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">别名: androiddebugkey</span><br><span class=\"line\">创建日期: 2015-11-18</span><br><span class=\"line\">条目类型: PrivateKeyEntry</span><br><span class=\"line\">证书链长度: 1</span><br><span class=\"line\">证书[1]:</span><br><span class=\"line\">所有者: CN=Android Debug, O=Android, C=US</span><br><span class=\"line\">发布者: CN=Android Debug, O=Android, C=US</span><br><span class=\"line\">序列号: b15af1</span><br><span class=\"line\">有效期开始日期: Wed Nov 18 07:18:45 CST 2015, 截止日期: Fri Nov 10 07:18:45 CST 2045</span><br><span class=\"line\">证书指纹:</span><br><span class=\"line\">         MD5: FE:A1:9C:02:71:A2:DA:F9:7F:1C:2B:61:D7:65:89:44</span><br><span class=\"line\">         SHA1: 01:DF:58:7D:04:3E:76:B5:92:98:37:0E:DD:70:61:01:70:F5:C9:8E</span><br><span class=\"line\">         SHA256: 84:18:44:C2:BD:AD:5D:A8:88:A1:96:EF:A6:27:86:0A:36:44:31:38:F2:5F:B6:4E:F1:10:EE:93:D6:22:CD:59</span><br><span class=\"line\">         签名算法名称: SHA256withRSA</span><br><span class=\"line\">         版本: 3</span><br><span class=\"line\"></span><br><span class=\"line\">扩展:</span><br></pre></td></tr></table></figure>\n<p>我们将其中的证书指纹填入到第三方服务DEBUG配置中即可。当然了，有的时候出于这样或者那样的原因考虑，我们并不想使用系统默认的KeyStore或者就想自己生成一个新的KeyStore，Debug环境与Release环境都使用同一个来减少配置的麻烦。这个时候我们就需要创建一个新的KeyStore文件了。</p>\n<h3 id=\"创建新的KeyStore\"><a href=\"#创建新的KeyStore\" class=\"headerlink\" title=\"创建新的KeyStore\"></a>创建新的KeyStore</h3><p>我们使用JDK自带的Keytool命令行工具即可完成KeyStore密钥库文件的创建，此处需要说明的是，Android Stduio中自带的图形化界面<code>KeyStore</code>生成工具生成的<code>.jks</code>文件与Keytool生成的<code>.keystore</code>文件在使用上没有任何区别。</p>\n<h4 id=\"生成KeyStore\"><a href=\"#生成KeyStore\" class=\"headerlink\" title=\"生成KeyStore\"></a>生成KeyStore</h4><p>在终端中键入以下命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkey -v -keystore &#123;FILENAME.keystore&#125; -<span class=\"built_in\">alias</span> &#123;ALIAS&#125; -keyalg RSA -validity &#123;DURATION&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>{FILENAME.keystore}</code> 为生成的KeyStore的文件名</li>\n<li><code>{ALIAS}</code> 为生成的KeyStore文件的别名</li>\n<li><code>{DURATION}</code> 为该KeyStore文件的过期时间</li>\n</ul>\n<p>下面将以生成一个test.keystore文件为示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -genkey -v -keystore test.keystore -<span class=\"built_in\">alias</span> <span class=\"built_in\">test</span> -keyalg RSA -validity 365</span><br></pre></td></tr></table></figure>\n<p>键入以上命令将生成一个以RSA算法加密的有效期365天的名为<code>test.keystore</code>的文件，该KeyStore文件的alias为 test。回车确认执行该命令之后，将会要求输入密钥库口令以及一些基本的信息，根据提示输入无误之后将会在当前终端所在目录生成指定的KeyStore文件。完整的示例如下所示:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">$ keytool -genkey -v -keystore test.keystore -<span class=\"built_in\">alias</span> <span class=\"built_in\">test</span> -keyalg RSA -validity 365</span><br><span class=\"line\">输入密钥库口令:  android</span><br><span class=\"line\">再次输入新口令: android</span><br><span class=\"line\">您的名字与姓氏是什么?</span><br><span class=\"line\">  [Unknown]:  Doublemine</span><br><span class=\"line\">您的组织单位名称是什么?</span><br><span class=\"line\">  [Unknown]:  Test</span><br><span class=\"line\">您的组织名称是什么?</span><br><span class=\"line\">  [Unknown]:  Test</span><br><span class=\"line\">您所在的城市或区域名称是什么?</span><br><span class=\"line\">  [Unknown]:  Test</span><br><span class=\"line\">您所在的省/市/自治区名称是什么?</span><br><span class=\"line\">  [Unknown]:  Test</span><br><span class=\"line\">该单位的双字母国家/地区代码是什么?</span><br><span class=\"line\">  [Unknown]:  Test</span><br><span class=\"line\">CN=Doublemine, OU=Test, O=Test, L=Test, ST=Test, C=Test是否正确?</span><br><span class=\"line\">  [否]:  y</span><br><span class=\"line\"></span><br><span class=\"line\">正在为以下对象生成 2,048 位RSA密钥对和自签名证书 (SHA256withRSA) (有效期为 365 天):</span><br><span class=\"line\">         CN=Doublemine, OU=Test, O=Test, L=Test, ST=Test, C=Test</span><br><span class=\"line\">输入 &lt;<span class=\"built_in\">test</span>&gt; 的密钥口令</span><br><span class=\"line\">        (如果和密钥库口令相同, 按回车):</span><br><span class=\"line\">[正在存储test.keystore]</span><br></pre></td></tr></table></figure>\n<p>这样我们就有了一个全新的KeyStore文件可以用于Android的App签名，有了KeyStore文件下一步当然就是获取我们生成的KeyStore文件的指纹信息咯~</p>\n<h4 id=\"获取KeyStore指纹信息\"><a href=\"#获取KeyStore指纹信息\" class=\"headerlink\" title=\"获取KeyStore指纹信息\"></a>获取KeyStore指纹信息</h4><p>与获取默认的<code>debug.keystore</code>文件指纹信息类似，我们在终端中键入以下命令:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -v -list -keystore test.keystore -<span class=\"built_in\">alias</span> <span class=\"built_in\">test</span> -keypass android -storepass android</span><br></pre></td></tr></table></figure>\n<p>即可获取到我们生成的KeyStore指纹信息，有的同学已经看出来了，只要将上述命令中的几个参数替换下，即可查看任意KeyStore的指纹信息:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keytool -v -list -keystore &#123;FILENAME.keystore&#125; -<span class=\"built_in\">alias</span> &#123;ALIAS&#125; -keypass &#123;KEYPASSWD&#125; -storepass &#123;STOREPASSWD&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>{FILENAME.keystore}</code>为keystore文件名</li>\n<li><code>{ALIAS}</code>为KeyStore的别名</li>\n<li><code>{KEYPASSWD}</code>为KeyStore的密钥口令</li>\n<li><code>{STOREPASSWD}</code>为KeyStore的密钥库口令</li>\n</ul>\n<h3 id=\"应用KeyStore\"><a href=\"#应用KeyStore\" class=\"headerlink\" title=\"应用KeyStore\"></a>应用KeyStore</h3><p>前面我们忙活了大半天生成了KeyStore文件，并查看其指纹信息。但是如果我们不使用到我们的项目中，毕竟还是不会对我们的项目生效的~我们还需要在Gradle脚本中对其进行配置，我们的项目才会应用其KeyStore文件。</p>\n<p>其中我们有两种较为普遍的方式在项目中配置我们的KeyStore文件，第一种比较简单粗暴，直接在gradle构建脚本中写入KeyStore信息,第二种则将KeyStore信息配置在一个单独的配置文件中，在gradle构建时动态读取。</p>\n<h4 id=\"签名信息写入Gradle脚本\"><a href=\"#签名信息写入Gradle脚本\" class=\"headerlink\" title=\"签名信息写入Gradle脚本\"></a>签名信息写入Gradle脚本</h4><p>在Android Stduio中打开主moudle的<code>build.gradle</code>文件,在其中的<code>android</code>闭包中键入如下内容:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signingConfigs &#123;</span><br><span class=\"line\">    release &#123;</span><br><span class=\"line\">      keyAlias <span class=\"string\">'test'</span></span><br><span class=\"line\">      keyPassword <span class=\"string\">'android'</span></span><br><span class=\"line\">      storeFile <span class=\"keyword\">file</span>(<span class=\"string\">'./keystore/test.keystore'</span>)</span><br><span class=\"line\">      storePassword <span class=\"string\">'android'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>其中声明的release闭包中包含了<code>keyAlias</code>、<code>keyPassword</code>、<code>storeFile</code>、<code>storePassword</code>四个Property。其中含义分别为:</p>\n<ul>\n<li><code>keyAlias</code> keystore的<code>alias</code></li>\n<li><code>keyPassword</code> KeyStore的密钥口令</li>\n<li><code>storeFile</code>为KeyStore的文件存放路径，可以为相对或者绝对路径，此处使用的为相对路径</li>\n<li><code>storePassword</code>为KeyStore的密钥库口令</li>\n</ul>\n<p>以上的Gradle DSL将会作用于我们的项目的Release版本，当我们在终端中个输入:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gradlew assembleRelease</span><br></pre></td></tr></table></figure>\n<p>项目将会使用我们上面定义的<code>test.keystore</code>密钥库文件签名打包项目为Release发布版。</p>\n<p>同样，如果我们不想使用默认的<code>debug.keystore</code>签名项目的Debug版本，我们亦可以重新生成一个KeyStore文件或者使用Release版本的签名该文件，放入debug闭包中即可:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">signingConfigs &#123;</span><br><span class=\"line\">    release &#123;</span><br><span class=\"line\">      keyAlias <span class=\"string\">'test'</span></span><br><span class=\"line\">      keyPassword <span class=\"string\">'android'</span></span><br><span class=\"line\">      storeFile <span class=\"keyword\">file</span>(<span class=\"string\">'./keystore/test.keystore'</span>)</span><br><span class=\"line\">      storePassword <span class=\"string\">'android'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    debug &#123;</span><br><span class=\"line\">     keyAlias <span class=\"string\">'test'</span></span><br><span class=\"line\">      keyPassword <span class=\"string\">'android'</span></span><br><span class=\"line\">      storeFile <span class=\"keyword\">file</span>(<span class=\"string\">'./keystore/test.keystore'</span>)</span><br><span class=\"line\">      storePassword <span class=\"string\">'android'</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"签名信息写入配置文件\"><a href=\"#签名信息写入配置文件\" class=\"headerlink\" title=\"签名信息写入配置文件\"></a>签名信息写入配置文件</h4><p>细心的同学可能发现了，虽然上面的把签名信息写入gradle脚本中比较方便省事，但是却在密钥文件的密钥密码泄露问题，任何能够看到此Moudle的build.gradle脚本的人都可以拿到KeyStore文件及其对应的密钥口令，可能会导致一些安全风险。因此在一些开源项目或者比较敏感的项目中，可能会存在类似的gradle配置:</p>\n<p>在主moudle的build.gradle脚本的android闭包中:</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">applicationVariants.all &#123;  </span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">project</span>.hasProperty(<span class=\"string\">'keyAlias'</span>) &amp;&amp; <span class=\"keyword\">project</span>.hasProperty(<span class=\"string\">'storeFile'</span>) &amp;&amp;</span><br><span class=\"line\">    <span class=\"keyword\">project</span>.hasProperty(<span class=\"string\">'storePassword'</span>) &amp;&amp;</span><br><span class=\"line\">    <span class=\"keyword\">project</span>.hasProperty(<span class=\"string\">'keyPassword'</span>)) &#123;</span><br><span class=\"line\">  android.signingConfigs.release.keyAlias = keyAlias</span><br><span class=\"line\">  android.signingConfigs.release.storeFile = <span class=\"keyword\">file</span>(storeFile)</span><br><span class=\"line\">  android.signingConfigs.release.storePassword = storePassword</span><br><span class=\"line\">  android.signingConfigs.release.keyPassword = keyPassword</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">  android.buildTypes.release.signingConfig = <span class=\"keyword\">null</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>其中<code>Variants</code>翻译中文为<code>变种</code>,<code>applicationVariants.all</code>属性含义为<code>app plugin</code>下所有的<code>Variant</code>的配置信息，可以将其看作为一个总览，可以方便的访问所有对象。<br><a href=\"http://tools.android.com/tech-docs/new-build-system/user-guide\" target=\"_blank\" rel=\"noopener\">相关延伸阅读Gradle Plugin User Guide</a>，我们在其中通过<code>project.hasProperty</code>读取项目中的配置，并将其动态的赋值给<code>signingConfigs.release</code>下的相关属性。</p>\n<p>然后我们通过在<code>gradle.properties</code>或者其它项目中能够被gradle的文件中定义以上属性并赋值即可：</p>\n<figure class=\"highlight gradle\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">storeFile=.<span class=\"regexp\">/keystore/</span>test.keystore</span><br><span class=\"line\">storePassword=android</span><br><span class=\"line\">keyAlias=test</span><br><span class=\"line\">keyPassword=android</span><br></pre></td></tr></table></figure>\n<p>这样我们在项目团队协作时，将<code>gradle.properties</code>文件忽略即可。</p>\n<p>Enjoy IT!</p>"},{"title":"Git常用命令","date":"2015-06-29T12:36:13.000Z","_content":"\n[![](http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/git_logo.jpg )](https://notes.wanghao.work/2015-06-29-Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html)\n<!--more-->\n\n## 基本配置命令\n\n### Git常用命令速查表\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/11355916837b25b3cfo.jpg \"速查表\")\n\n### 使用Git生成ssh密钥:\n\n```bash\nssh-keygen -t rsa -C \"email@example.com\"\n```\n\n### 设置全局用户名和邮箱:\n\n```bash\ngit config --global user.name \"YourName\"\ngit config --global user.email \"email@example.com\" \n```\n\n### 初始化仓库\n\n```bash\ngit init\n```\n\n### 添加文件到暂存区\n\n```bash\ngit add <filename>\t#添加指定文件到暂存区\ngit add .\t#添加工作区所有文件到暂存区\ngit add -i\t#交互方式添加文件到暂存区\ngit add -u\t#将工作区中已经变动的文件添加到暂存区，当新增加的文件不会被添加\n```\n\n### 提交文件到仓库\n\n```bash\ngit commit -m \"描述信息\"\t\t#提交更新\ngit commit -am \"描述信息\"\t#如果工作目录中仅是已跟踪的文件被修改或被删除，使用此提交命令\n```\n### 分支的创建、删除、和平、切换、查看\n\n```bash\ngit branch\t#查看Git仓库中已有的分支\ngit branch 新分支名 [分支起点]\t#创建分支，如果没有分支起点的话，则默认在当前分支的最新提交上创建分支\ngit checkout 分支名\t#切换分支\ngit checkout -b 新分支名\t\t#创建同时切换到新分支\ngit merge 要被合并的分支名\t#合并分支\ngit branch -d 要删除的分支名\t#删除指定分支（如果分支没有被合并过，该命令会执行失败）\ngit branch -D 要删除的分支名\t#删除指定分支，不管有没有被合并过\ngitk\t\t\t\t#用图形界面查看分支提交历史\n```\n\n>合并分支过程中如果发生冲突则需要自己手动解决冲突，然后再提交。有冲突时，Git会显示哪个文件有冲突，并在冲突的文件中加上特殊的标识符号，解决完冲突后，要手动去掉这些被添加的标识符号。如果冲突比较复杂的话，最好使用其他工具来协助，通过git mergetool来启动。冲突一般是在不同的分支上对同一文件的同一位置内容进行了改动，并已提交到仓库中，这样在合并的时候就会发生冲突。\n\n### 标签的添加、删除、查看\n\n```bash\ngit tag\t\t#查看标签\ngit tag 标签名\t#创建简单的标签\ngit tag -a 标签名 -m '附加信息'\t#创建附加信息的标签\ngit show 标签名\t#通过标签查看信息\ngit tag -d 标签名\t#删除标签\n```\n\n>标签可以在需要的地方，为某个提交对象创建别名，这样以后我们就可以通过标签来查看一些信息，创建分支等。\n\n\n### 查看工作目录状态\n\n```bash\ngit status\n```\n\n>在git命令执行后，要养成通过git status查看git状态的习惯，以便及时了解文件变化的情况。通过git status可以知道文件的状态（已修改未暂存、已删除、已修改并已暂存等待提交、未跟踪）。\n\n\n### 查看提交历史 \n\n```bash\ngit log\ngit log -p\t#显示每次提交文件变化\n```\n\n>通过git log可以查看当前分支的所有提交历史，知道每次提交的commit对象的ID以及提交时附加的描述信息等。要显示更多的信息，需要使用其支持的选项，如git log -p可以将每次提交的文件变化也显示出来。\n\n\n### 查看指定的提交对象\n\n```bash\ngit show commit_id\t#查看指定的某次提交内容\ngit show --all\t\t#显示所有的提交历史内容\ngit shortlog -s -n\t#显示总的提交次数\n```\n\n>通过`git log`可以显示整个提交历史，而通过`git show commit-id`则可以查看指定的某次提交内容，当然`git show -all`也可以显示出提交历史，另外还可以格式化显示内容。\n\n**Note : commit-id可以是commit对象对应的ID，也可以是HEAD，分支名，tag等。**\n\n### 查看工作区、暂存区、仓库之间的差异\n\n```bash\ngit diff\t\t#比较工作区与暂存区的差异\ngit diff HEAD\t\t#比较工作区与仓库中最近一次的提交间的差异\ngit diff --cached\t#比较暂存区与仓库中最近一次提交的差异\ngit blame filename\t#可以列出该文件每次被修改的时间和内容。\n```\n\n### 版本回退、撤销操作\n\n```bash\ngit reflog\t#显示提交历史的简介\ngit checkout -- filename\t#丢弃工作区的修改\ngit reset --hard HEAD^\t\t#回退到上一个版本\ngit reset --hard commit_id\t#回退到指定版本\ngit checkout -- filename\t#恢复工作区被删除的指定文件（文件之前被提交到仓库中）\ngit checkout -f \t\t#恢复工作区中所有被删除的文件(文件之前被提交到仓库中)\ngit ls-files -d\t\t\t#列出工作区被删除的文件（文件之前被提交到仓库中）\n```\n\n>有时候，由于我们的误操作，产生了一些错误，我们发现后希望能够及时纠正这些因为误操作而产生的结果，将工作目录恢复到某个正常状态。\n\n- 撤销修改，但还没有添加到暂存区： `git checkout -- filename` 修改的文件会被恢复到上次提交时的状态，修改的内容会丢失。\n- 版本回退：先通过`git reflog`找到某个版本的`commit_id`，然后用`git reset --hard commit_id`将工作目录的文件恢复到指定的版本。\n- 恢复工作区中被删除的文件（文件之前被提交到仓库中）：`git checkout -- filename` 或 `git checkout -f`\n\n### 备份工作区\n\n```bash\ngit stash\t\t\t#将工作区文件保存在Git内部栈中\ngit stash list\t\t\t#列出Git内部栈中保存的工作区文件列表\ngit stash apply stash_id\t#恢复工作区到指定的内部栈状态\ngit stash pop\t\t\t#恢复工作区到上一个内部栈状态\ngit stash clear\t\t\t#清空Git内部栈\n```\n>如果正在一个develop分支上正在开发新功能，但这时master分支(稳定版本)突然发现了bug，并需要及时修复，而develop分支此时的工作还没有完成，且不希望将之前的工作就这样提交到仓库中时，这时就可以用`git stash`来暂时保存这些状态到Git内部栈中，并用当前分支上一次的提交内容来恢复工作目录，然后切换到master分支进行bug修复工作，等修复完毕并提交到仓库上后，再使用`git stash apply [stash@{0}]`或者`git stash pop`将工作目录恢复到之前的状态，继续之前的工作。\n\n>同时也可以多次使用git stash将未提交的代码压入到Git栈中，但当多次使用`git stash`命令后，Git栈里将充满了未提交的代码，这时候到底要用哪个版本来恢复工作目录呢？`git stash list`命令可以将当前的Git栈信息打印出来，我们只需要将找到对应的版本号，例如使用`git stash apply stash@{1}`就可以用版本号为stash@{1}的内容来恢复工作目录。\n\n>当Git栈中所有的内容都被恢复后，可以使用`git stash clear`来将栈清空。\n\n### 将当前工作区目录文件压缩归档\n\n```bash\ngit archive --format=zip -o arch.zip HEAD\ngit arch --format zip head>arch.zip\n```\n\n## 远程操作\n\n>Git相比其他版本控制软件的一个优点就是大多数的操作都可以在本地进行，而不用管远程的仓库，因为操作是在本地，且操作的数据也是在本地，加上指针等原因，所以执行的速度就会比较快。 在多人协作的项目中，就需要涉及与远程仓库交互的问题，主要是如何从远程仓库抓取最新数据合并到自己的本地分支上，将自己的最新成果分享给其他人或让别人审查等 。\n\n### 远程仓库的克隆、添加、查看\n\n```bash\ngit remote\t#显示已添加的远程仓库名\ngit remote -v \t#显示已添加的远程仓库名和地址\ngit remote add 远程仓库名 远程仓库地址\t#在本地添加远程仓库\ngit remote rm 远程仓库名\t\t\t#删除本地添加的远程仓库名\ngit remote rename 原名 新名\t\t#重命名远程仓库名\ngit clone 远程仓库地址 [克隆到指定的文件夹]\t#克隆远程仓库到本地\ngit fetch 远程仓库名\t\t#从远程仓库抓取最新数据到本地但不与本地分支进行合并 \ngit pull 远程仓库名\t本地要合并的分支名\t#从远程仓库抓取最新数据并自动与本地分支进行合并\ngit push 远程仓库名 本地分支名\t#将本地仓库推送到远程仓库中\ngit remote show 远程仓库名\t#查看远程仓库信息\ngit remote show\t\t\t#查看所有远程仓库\ngit push 远程仓库名 标签名\t#将标签推送到远程仓库（Git默认不推送标签）\n```\n\n### 协同流程\n\n- Fork远程项目\n- 把Fork的项目clone到本地\n- 执行以下命令，将别人的库添加为远端库\n\n```bash\ngit remote add 远端仓库名 远端的分支\n```\n\n- 运行以下命令，拉去合并到本地\n\n```bash\ngit pull 远端仓库名 远端分支名\n```\n- 编辑内容\n- commit之后push到自己的库\n- 登录Github，在你的首页可以看到一个`pull request`按钮，点击它，填写一些说明信息，提交即可。\n\n>在本地编辑内容前必须执行pull操作同步别人的远端库（这样避免冲突）\n\n\n### 实用技巧\n\n>当手头工作没有完成时，先把工作现场`git stash`一下，然后去修复bug，修复后，再使用`git stash pop`，回到工作现场.\n\n### 多人协作技巧\n\n>查看远程库信息，使用git remote -v；\n>本地新建的分支如果不推送到远程，对其他人就是不可见的；\n>从本地推送分支，使用`git push 远程仓库名 分支名`，如果推送失败，先用`git pull`抓取远程的新提交；\n>在本地创建和远程分支对应的分支，使用`git checkout -b branch-name origin/branch-name`，本地和远程分支的名称最好一致；\n>建立本地分支和远程分支的关联，使用`git branch --set-upstream branch-name origin/branch-name`；\n>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。\n\n### Git常用命令思维导图\n\n<img class=\"full-image\" src=\"http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/11355916521d2e8f8fo.jpg\"  />","source":"_posts/Git常用命令.md","raw":"title: Git常用命令\ndate: 2015-06-29 20:36:13\ntags: Git \ncategories: Notes\n\n---\n\n[![](http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/git_logo.jpg )](https://notes.wanghao.work/2015-06-29-Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html)\n<!--more-->\n\n## 基本配置命令\n\n### Git常用命令速查表\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/11355916837b25b3cfo.jpg \"速查表\")\n\n### 使用Git生成ssh密钥:\n\n```bash\nssh-keygen -t rsa -C \"email@example.com\"\n```\n\n### 设置全局用户名和邮箱:\n\n```bash\ngit config --global user.name \"YourName\"\ngit config --global user.email \"email@example.com\" \n```\n\n### 初始化仓库\n\n```bash\ngit init\n```\n\n### 添加文件到暂存区\n\n```bash\ngit add <filename>\t#添加指定文件到暂存区\ngit add .\t#添加工作区所有文件到暂存区\ngit add -i\t#交互方式添加文件到暂存区\ngit add -u\t#将工作区中已经变动的文件添加到暂存区，当新增加的文件不会被添加\n```\n\n### 提交文件到仓库\n\n```bash\ngit commit -m \"描述信息\"\t\t#提交更新\ngit commit -am \"描述信息\"\t#如果工作目录中仅是已跟踪的文件被修改或被删除，使用此提交命令\n```\n### 分支的创建、删除、和平、切换、查看\n\n```bash\ngit branch\t#查看Git仓库中已有的分支\ngit branch 新分支名 [分支起点]\t#创建分支，如果没有分支起点的话，则默认在当前分支的最新提交上创建分支\ngit checkout 分支名\t#切换分支\ngit checkout -b 新分支名\t\t#创建同时切换到新分支\ngit merge 要被合并的分支名\t#合并分支\ngit branch -d 要删除的分支名\t#删除指定分支（如果分支没有被合并过，该命令会执行失败）\ngit branch -D 要删除的分支名\t#删除指定分支，不管有没有被合并过\ngitk\t\t\t\t#用图形界面查看分支提交历史\n```\n\n>合并分支过程中如果发生冲突则需要自己手动解决冲突，然后再提交。有冲突时，Git会显示哪个文件有冲突，并在冲突的文件中加上特殊的标识符号，解决完冲突后，要手动去掉这些被添加的标识符号。如果冲突比较复杂的话，最好使用其他工具来协助，通过git mergetool来启动。冲突一般是在不同的分支上对同一文件的同一位置内容进行了改动，并已提交到仓库中，这样在合并的时候就会发生冲突。\n\n### 标签的添加、删除、查看\n\n```bash\ngit tag\t\t#查看标签\ngit tag 标签名\t#创建简单的标签\ngit tag -a 标签名 -m '附加信息'\t#创建附加信息的标签\ngit show 标签名\t#通过标签查看信息\ngit tag -d 标签名\t#删除标签\n```\n\n>标签可以在需要的地方，为某个提交对象创建别名，这样以后我们就可以通过标签来查看一些信息，创建分支等。\n\n\n### 查看工作目录状态\n\n```bash\ngit status\n```\n\n>在git命令执行后，要养成通过git status查看git状态的习惯，以便及时了解文件变化的情况。通过git status可以知道文件的状态（已修改未暂存、已删除、已修改并已暂存等待提交、未跟踪）。\n\n\n### 查看提交历史 \n\n```bash\ngit log\ngit log -p\t#显示每次提交文件变化\n```\n\n>通过git log可以查看当前分支的所有提交历史，知道每次提交的commit对象的ID以及提交时附加的描述信息等。要显示更多的信息，需要使用其支持的选项，如git log -p可以将每次提交的文件变化也显示出来。\n\n\n### 查看指定的提交对象\n\n```bash\ngit show commit_id\t#查看指定的某次提交内容\ngit show --all\t\t#显示所有的提交历史内容\ngit shortlog -s -n\t#显示总的提交次数\n```\n\n>通过`git log`可以显示整个提交历史，而通过`git show commit-id`则可以查看指定的某次提交内容，当然`git show -all`也可以显示出提交历史，另外还可以格式化显示内容。\n\n**Note : commit-id可以是commit对象对应的ID，也可以是HEAD，分支名，tag等。**\n\n### 查看工作区、暂存区、仓库之间的差异\n\n```bash\ngit diff\t\t#比较工作区与暂存区的差异\ngit diff HEAD\t\t#比较工作区与仓库中最近一次的提交间的差异\ngit diff --cached\t#比较暂存区与仓库中最近一次提交的差异\ngit blame filename\t#可以列出该文件每次被修改的时间和内容。\n```\n\n### 版本回退、撤销操作\n\n```bash\ngit reflog\t#显示提交历史的简介\ngit checkout -- filename\t#丢弃工作区的修改\ngit reset --hard HEAD^\t\t#回退到上一个版本\ngit reset --hard commit_id\t#回退到指定版本\ngit checkout -- filename\t#恢复工作区被删除的指定文件（文件之前被提交到仓库中）\ngit checkout -f \t\t#恢复工作区中所有被删除的文件(文件之前被提交到仓库中)\ngit ls-files -d\t\t\t#列出工作区被删除的文件（文件之前被提交到仓库中）\n```\n\n>有时候，由于我们的误操作，产生了一些错误，我们发现后希望能够及时纠正这些因为误操作而产生的结果，将工作目录恢复到某个正常状态。\n\n- 撤销修改，但还没有添加到暂存区： `git checkout -- filename` 修改的文件会被恢复到上次提交时的状态，修改的内容会丢失。\n- 版本回退：先通过`git reflog`找到某个版本的`commit_id`，然后用`git reset --hard commit_id`将工作目录的文件恢复到指定的版本。\n- 恢复工作区中被删除的文件（文件之前被提交到仓库中）：`git checkout -- filename` 或 `git checkout -f`\n\n### 备份工作区\n\n```bash\ngit stash\t\t\t#将工作区文件保存在Git内部栈中\ngit stash list\t\t\t#列出Git内部栈中保存的工作区文件列表\ngit stash apply stash_id\t#恢复工作区到指定的内部栈状态\ngit stash pop\t\t\t#恢复工作区到上一个内部栈状态\ngit stash clear\t\t\t#清空Git内部栈\n```\n>如果正在一个develop分支上正在开发新功能，但这时master分支(稳定版本)突然发现了bug，并需要及时修复，而develop分支此时的工作还没有完成，且不希望将之前的工作就这样提交到仓库中时，这时就可以用`git stash`来暂时保存这些状态到Git内部栈中，并用当前分支上一次的提交内容来恢复工作目录，然后切换到master分支进行bug修复工作，等修复完毕并提交到仓库上后，再使用`git stash apply [stash@{0}]`或者`git stash pop`将工作目录恢复到之前的状态，继续之前的工作。\n\n>同时也可以多次使用git stash将未提交的代码压入到Git栈中，但当多次使用`git stash`命令后，Git栈里将充满了未提交的代码，这时候到底要用哪个版本来恢复工作目录呢？`git stash list`命令可以将当前的Git栈信息打印出来，我们只需要将找到对应的版本号，例如使用`git stash apply stash@{1}`就可以用版本号为stash@{1}的内容来恢复工作目录。\n\n>当Git栈中所有的内容都被恢复后，可以使用`git stash clear`来将栈清空。\n\n### 将当前工作区目录文件压缩归档\n\n```bash\ngit archive --format=zip -o arch.zip HEAD\ngit arch --format zip head>arch.zip\n```\n\n## 远程操作\n\n>Git相比其他版本控制软件的一个优点就是大多数的操作都可以在本地进行，而不用管远程的仓库，因为操作是在本地，且操作的数据也是在本地，加上指针等原因，所以执行的速度就会比较快。 在多人协作的项目中，就需要涉及与远程仓库交互的问题，主要是如何从远程仓库抓取最新数据合并到自己的本地分支上，将自己的最新成果分享给其他人或让别人审查等 。\n\n### 远程仓库的克隆、添加、查看\n\n```bash\ngit remote\t#显示已添加的远程仓库名\ngit remote -v \t#显示已添加的远程仓库名和地址\ngit remote add 远程仓库名 远程仓库地址\t#在本地添加远程仓库\ngit remote rm 远程仓库名\t\t\t#删除本地添加的远程仓库名\ngit remote rename 原名 新名\t\t#重命名远程仓库名\ngit clone 远程仓库地址 [克隆到指定的文件夹]\t#克隆远程仓库到本地\ngit fetch 远程仓库名\t\t#从远程仓库抓取最新数据到本地但不与本地分支进行合并 \ngit pull 远程仓库名\t本地要合并的分支名\t#从远程仓库抓取最新数据并自动与本地分支进行合并\ngit push 远程仓库名 本地分支名\t#将本地仓库推送到远程仓库中\ngit remote show 远程仓库名\t#查看远程仓库信息\ngit remote show\t\t\t#查看所有远程仓库\ngit push 远程仓库名 标签名\t#将标签推送到远程仓库（Git默认不推送标签）\n```\n\n### 协同流程\n\n- Fork远程项目\n- 把Fork的项目clone到本地\n- 执行以下命令，将别人的库添加为远端库\n\n```bash\ngit remote add 远端仓库名 远端的分支\n```\n\n- 运行以下命令，拉去合并到本地\n\n```bash\ngit pull 远端仓库名 远端分支名\n```\n- 编辑内容\n- commit之后push到自己的库\n- 登录Github，在你的首页可以看到一个`pull request`按钮，点击它，填写一些说明信息，提交即可。\n\n>在本地编辑内容前必须执行pull操作同步别人的远端库（这样避免冲突）\n\n\n### 实用技巧\n\n>当手头工作没有完成时，先把工作现场`git stash`一下，然后去修复bug，修复后，再使用`git stash pop`，回到工作现场.\n\n### 多人协作技巧\n\n>查看远程库信息，使用git remote -v；\n>本地新建的分支如果不推送到远程，对其他人就是不可见的；\n>从本地推送分支，使用`git push 远程仓库名 分支名`，如果推送失败，先用`git pull`抓取远程的新提交；\n>在本地创建和远程分支对应的分支，使用`git checkout -b branch-name origin/branch-name`，本地和远程分支的名称最好一致；\n>建立本地分支和远程分支的关联，使用`git branch --set-upstream branch-name origin/branch-name`；\n>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。\n\n### Git常用命令思维导图\n\n<img class=\"full-image\" src=\"http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/11355916521d2e8f8fo.jpg\"  />","slug":"Git常用命令","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoybg2004x2ev2nj0dqy0u","content":"<p><a href=\"https://notes.wanghao.work/2015-06-29-Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html\" target=\"_blank\" rel=\"noopener\"><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/git_logo.jpg\" alt></a><br><a id=\"more\"></a></p>\n<h2 id=\"基本配置命令\"><a href=\"#基本配置命令\" class=\"headerlink\" title=\"基本配置命令\"></a>基本配置命令</h2><h3 id=\"Git常用命令速查表\"><a href=\"#Git常用命令速查表\" class=\"headerlink\" title=\"Git常用命令速查表\"></a>Git常用命令速查表</h3><p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/11355916837b25b3cfo.jpg\" alt title=\"速查表\"></p>\n<h3 id=\"使用Git生成ssh密钥\"><a href=\"#使用Git生成ssh密钥\" class=\"headerlink\" title=\"使用Git生成ssh密钥:\"></a>使用Git生成ssh密钥:</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"email@example.com\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"设置全局用户名和邮箱\"><a href=\"#设置全局用户名和邮箱\" class=\"headerlink\" title=\"设置全局用户名和邮箱:\"></a>设置全局用户名和邮箱:</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">\"YourName\"</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"email@example.com\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化仓库\"><a href=\"#初始化仓库\" class=\"headerlink\" title=\"初始化仓库\"></a>初始化仓库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加文件到暂存区\"><a href=\"#添加文件到暂存区\" class=\"headerlink\" title=\"添加文件到暂存区\"></a>添加文件到暂存区</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &lt;filename&gt;\t<span class=\"comment\">#添加指定文件到暂存区</span></span><br><span class=\"line\">git add .\t<span class=\"comment\">#添加工作区所有文件到暂存区</span></span><br><span class=\"line\">git add -i\t<span class=\"comment\">#交互方式添加文件到暂存区</span></span><br><span class=\"line\">git add -u\t<span class=\"comment\">#将工作区中已经变动的文件添加到暂存区，当新增加的文件不会被添加</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"提交文件到仓库\"><a href=\"#提交文件到仓库\" class=\"headerlink\" title=\"提交文件到仓库\"></a>提交文件到仓库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">\"描述信息\"</span>\t\t<span class=\"comment\">#提交更新</span></span><br><span class=\"line\">git commit -am <span class=\"string\">\"描述信息\"</span>\t<span class=\"comment\">#如果工作目录中仅是已跟踪的文件被修改或被删除，使用此提交命令</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"分支的创建、删除、和平、切换、查看\"><a href=\"#分支的创建、删除、和平、切换、查看\" class=\"headerlink\" title=\"分支的创建、删除、和平、切换、查看\"></a>分支的创建、删除、和平、切换、查看</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch\t<span class=\"comment\">#查看Git仓库中已有的分支</span></span><br><span class=\"line\">git branch 新分支名 [分支起点]\t<span class=\"comment\">#创建分支，如果没有分支起点的话，则默认在当前分支的最新提交上创建分支</span></span><br><span class=\"line\">git checkout 分支名\t<span class=\"comment\">#切换分支</span></span><br><span class=\"line\">git checkout -b 新分支名\t\t<span class=\"comment\">#创建同时切换到新分支</span></span><br><span class=\"line\">git merge 要被合并的分支名\t<span class=\"comment\">#合并分支</span></span><br><span class=\"line\">git branch -d 要删除的分支名\t<span class=\"comment\">#删除指定分支（如果分支没有被合并过，该命令会执行失败）</span></span><br><span class=\"line\">git branch -D 要删除的分支名\t<span class=\"comment\">#删除指定分支，不管有没有被合并过</span></span><br><span class=\"line\">gitk\t\t\t\t<span class=\"comment\">#用图形界面查看分支提交历史</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>合并分支过程中如果发生冲突则需要自己手动解决冲突，然后再提交。有冲突时，Git会显示哪个文件有冲突，并在冲突的文件中加上特殊的标识符号，解决完冲突后，要手动去掉这些被添加的标识符号。如果冲突比较复杂的话，最好使用其他工具来协助，通过git mergetool来启动。冲突一般是在不同的分支上对同一文件的同一位置内容进行了改动，并已提交到仓库中，这样在合并的时候就会发生冲突。</p>\n</blockquote>\n<h3 id=\"标签的添加、删除、查看\"><a href=\"#标签的添加、删除、查看\" class=\"headerlink\" title=\"标签的添加、删除、查看\"></a>标签的添加、删除、查看</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag\t\t<span class=\"comment\">#查看标签</span></span><br><span class=\"line\">git tag 标签名\t<span class=\"comment\">#创建简单的标签</span></span><br><span class=\"line\">git tag -a 标签名 -m <span class=\"string\">'附加信息'</span>\t<span class=\"comment\">#创建附加信息的标签</span></span><br><span class=\"line\">git show 标签名\t<span class=\"comment\">#通过标签查看信息</span></span><br><span class=\"line\">git tag -d 标签名\t<span class=\"comment\">#删除标签</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>标签可以在需要的地方，为某个提交对象创建别名，这样以后我们就可以通过标签来查看一些信息，创建分支等。</p>\n</blockquote>\n<h3 id=\"查看工作目录状态\"><a href=\"#查看工作目录状态\" class=\"headerlink\" title=\"查看工作目录状态\"></a>查看工作目录状态</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在git命令执行后，要养成通过git status查看git状态的习惯，以便及时了解文件变化的情况。通过git status可以知道文件的状态（已修改未暂存、已删除、已修改并已暂存等待提交、未跟踪）。</p>\n</blockquote>\n<h3 id=\"查看提交历史\"><a href=\"#查看提交历史\" class=\"headerlink\" title=\"查看提交历史\"></a>查看提交历史</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -p\t<span class=\"comment\">#显示每次提交文件变化</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>通过git log可以查看当前分支的所有提交历史，知道每次提交的commit对象的ID以及提交时附加的描述信息等。要显示更多的信息，需要使用其支持的选项，如git log -p可以将每次提交的文件变化也显示出来。</p>\n</blockquote>\n<h3 id=\"查看指定的提交对象\"><a href=\"#查看指定的提交对象\" class=\"headerlink\" title=\"查看指定的提交对象\"></a>查看指定的提交对象</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git show commit_id\t<span class=\"comment\">#查看指定的某次提交内容</span></span><br><span class=\"line\">git show --all\t\t<span class=\"comment\">#显示所有的提交历史内容</span></span><br><span class=\"line\">git shortlog -s -n\t<span class=\"comment\">#显示总的提交次数</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>通过<code>git log</code>可以显示整个提交历史，而通过<code>git show commit-id</code>则可以查看指定的某次提交内容，当然<code>git show -all</code>也可以显示出提交历史，另外还可以格式化显示内容。</p>\n</blockquote>\n<p><strong>Note : commit-id可以是commit对象对应的ID，也可以是HEAD，分支名，tag等。</strong></p>\n<h3 id=\"查看工作区、暂存区、仓库之间的差异\"><a href=\"#查看工作区、暂存区、仓库之间的差异\" class=\"headerlink\" title=\"查看工作区、暂存区、仓库之间的差异\"></a>查看工作区、暂存区、仓库之间的差异</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff\t\t<span class=\"comment\">#比较工作区与暂存区的差异</span></span><br><span class=\"line\">git diff HEAD\t\t<span class=\"comment\">#比较工作区与仓库中最近一次的提交间的差异</span></span><br><span class=\"line\">git diff --cached\t<span class=\"comment\">#比较暂存区与仓库中最近一次提交的差异</span></span><br><span class=\"line\">git blame filename\t<span class=\"comment\">#可以列出该文件每次被修改的时间和内容。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"版本回退、撤销操作\"><a href=\"#版本回退、撤销操作\" class=\"headerlink\" title=\"版本回退、撤销操作\"></a>版本回退、撤销操作</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog\t<span class=\"comment\">#显示提交历史的简介</span></span><br><span class=\"line\">git checkout -- filename\t<span class=\"comment\">#丢弃工作区的修改</span></span><br><span class=\"line\">git reset --hard HEAD^\t\t<span class=\"comment\">#回退到上一个版本</span></span><br><span class=\"line\">git reset --hard commit_id\t<span class=\"comment\">#回退到指定版本</span></span><br><span class=\"line\">git checkout -- filename\t<span class=\"comment\">#恢复工作区被删除的指定文件（文件之前被提交到仓库中）</span></span><br><span class=\"line\">git checkout -f \t\t<span class=\"comment\">#恢复工作区中所有被删除的文件(文件之前被提交到仓库中)</span></span><br><span class=\"line\">git ls-files -d\t\t\t<span class=\"comment\">#列出工作区被删除的文件（文件之前被提交到仓库中）</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>有时候，由于我们的误操作，产生了一些错误，我们发现后希望能够及时纠正这些因为误操作而产生的结果，将工作目录恢复到某个正常状态。</p>\n</blockquote>\n<ul>\n<li>撤销修改，但还没有添加到暂存区： <code>git checkout -- filename</code> 修改的文件会被恢复到上次提交时的状态，修改的内容会丢失。</li>\n<li>版本回退：先通过<code>git reflog</code>找到某个版本的<code>commit_id</code>，然后用<code>git reset --hard commit_id</code>将工作目录的文件恢复到指定的版本。</li>\n<li>恢复工作区中被删除的文件（文件之前被提交到仓库中）：<code>git checkout -- filename</code> 或 <code>git checkout -f</code></li>\n</ul>\n<h3 id=\"备份工作区\"><a href=\"#备份工作区\" class=\"headerlink\" title=\"备份工作区\"></a>备份工作区</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash\t\t\t<span class=\"comment\">#将工作区文件保存在Git内部栈中</span></span><br><span class=\"line\">git stash list\t\t\t<span class=\"comment\">#列出Git内部栈中保存的工作区文件列表</span></span><br><span class=\"line\">git stash apply stash_id\t<span class=\"comment\">#恢复工作区到指定的内部栈状态</span></span><br><span class=\"line\">git stash pop\t\t\t<span class=\"comment\">#恢复工作区到上一个内部栈状态</span></span><br><span class=\"line\">git stash clear\t\t\t<span class=\"comment\">#清空Git内部栈</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果正在一个develop分支上正在开发新功能，但这时master分支(稳定版本)突然发现了bug，并需要及时修复，而develop分支此时的工作还没有完成，且不希望将之前的工作就这样提交到仓库中时，这时就可以用<code>git stash</code>来暂时保存这些状态到Git内部栈中，并用当前分支上一次的提交内容来恢复工作目录，然后切换到master分支进行bug修复工作，等修复完毕并提交到仓库上后，再使用<code>git stash apply [stash@{0}]</code>或者<code>git stash pop</code>将工作目录恢复到之前的状态，继续之前的工作。</p>\n</blockquote>\n<blockquote>\n<p>同时也可以多次使用git stash将未提交的代码压入到Git栈中，但当多次使用<code>git stash</code>命令后，Git栈里将充满了未提交的代码，这时候到底要用哪个版本来恢复工作目录呢？<code>git stash list</code>命令可以将当前的Git栈信息打印出来，我们只需要将找到对应的版本号，例如使用<code>git stash apply stash@{1}</code>就可以用版本号为stash@{1}的内容来恢复工作目录。</p>\n</blockquote>\n<blockquote>\n<p>当Git栈中所有的内容都被恢复后，可以使用<code>git stash clear</code>来将栈清空。</p>\n</blockquote>\n<h3 id=\"将当前工作区目录文件压缩归档\"><a href=\"#将当前工作区目录文件压缩归档\" class=\"headerlink\" title=\"将当前工作区目录文件压缩归档\"></a>将当前工作区目录文件压缩归档</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git archive --format=zip -o arch.zip HEAD</span><br><span class=\"line\">git arch --format zip head&gt;arch.zip</span><br></pre></td></tr></table></figure>\n<h2 id=\"远程操作\"><a href=\"#远程操作\" class=\"headerlink\" title=\"远程操作\"></a>远程操作</h2><blockquote>\n<p>Git相比其他版本控制软件的一个优点就是大多数的操作都可以在本地进行，而不用管远程的仓库，因为操作是在本地，且操作的数据也是在本地，加上指针等原因，所以执行的速度就会比较快。 在多人协作的项目中，就需要涉及与远程仓库交互的问题，主要是如何从远程仓库抓取最新数据合并到自己的本地分支上，将自己的最新成果分享给其他人或让别人审查等 。</p>\n</blockquote>\n<h3 id=\"远程仓库的克隆、添加、查看\"><a href=\"#远程仓库的克隆、添加、查看\" class=\"headerlink\" title=\"远程仓库的克隆、添加、查看\"></a>远程仓库的克隆、添加、查看</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote\t<span class=\"comment\">#显示已添加的远程仓库名</span></span><br><span class=\"line\">git remote -v \t<span class=\"comment\">#显示已添加的远程仓库名和地址</span></span><br><span class=\"line\">git remote add 远程仓库名 远程仓库地址\t<span class=\"comment\">#在本地添加远程仓库</span></span><br><span class=\"line\">git remote rm 远程仓库名\t\t\t<span class=\"comment\">#删除本地添加的远程仓库名</span></span><br><span class=\"line\">git remote rename 原名 新名\t\t<span class=\"comment\">#重命名远程仓库名</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> 远程仓库地址 [克隆到指定的文件夹]\t<span class=\"comment\">#克隆远程仓库到本地</span></span><br><span class=\"line\">git fetch 远程仓库名\t\t<span class=\"comment\">#从远程仓库抓取最新数据到本地但不与本地分支进行合并 </span></span><br><span class=\"line\">git pull 远程仓库名\t本地要合并的分支名\t<span class=\"comment\">#从远程仓库抓取最新数据并自动与本地分支进行合并</span></span><br><span class=\"line\">git push 远程仓库名 本地分支名\t<span class=\"comment\">#将本地仓库推送到远程仓库中</span></span><br><span class=\"line\">git remote show 远程仓库名\t<span class=\"comment\">#查看远程仓库信息</span></span><br><span class=\"line\">git remote show\t\t\t<span class=\"comment\">#查看所有远程仓库</span></span><br><span class=\"line\">git push 远程仓库名 标签名\t<span class=\"comment\">#将标签推送到远程仓库（Git默认不推送标签）</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"协同流程\"><a href=\"#协同流程\" class=\"headerlink\" title=\"协同流程\"></a>协同流程</h3><ul>\n<li>Fork远程项目</li>\n<li>把Fork的项目clone到本地</li>\n<li>执行以下命令，将别人的库添加为远端库</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add 远端仓库名 远端的分支</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行以下命令，拉去合并到本地</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull 远端仓库名 远端分支名</span><br></pre></td></tr></table></figure>\n<ul>\n<li>编辑内容</li>\n<li>commit之后push到自己的库</li>\n<li>登录Github，在你的首页可以看到一个<code>pull request</code>按钮，点击它，填写一些说明信息，提交即可。</li>\n</ul>\n<blockquote>\n<p>在本地编辑内容前必须执行pull操作同步别人的远端库（这样避免冲突）</p>\n</blockquote>\n<h3 id=\"实用技巧\"><a href=\"#实用技巧\" class=\"headerlink\" title=\"实用技巧\"></a>实用技巧</h3><blockquote>\n<p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再使用<code>git stash pop</code>，回到工作现场.</p>\n</blockquote>\n<h3 id=\"多人协作技巧\"><a href=\"#多人协作技巧\" class=\"headerlink\" title=\"多人协作技巧\"></a>多人协作技巧</h3><blockquote>\n<p>查看远程库信息，使用git remote -v；<br>本地新建的分支如果不推送到远程，对其他人就是不可见的；<br>从本地推送分支，使用<code>git push 远程仓库名 分支名</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；<br>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；<br>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；<br>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</p>\n</blockquote>\n<h3 id=\"Git常用命令思维导图\"><a href=\"#Git常用命令思维导图\" class=\"headerlink\" title=\"Git常用命令思维导图\"></a>Git常用命令思维导图</h3><p><img class=\"full-image\" src=\"http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/11355916521d2e8f8fo.jpg\"></p>\n","site":{"data":{}},"excerpt":"<p><a href=\"https://notes.wanghao.work/2015-06-29-Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html\" target=\"_blank\" rel=\"noopener\"><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/git_logo.jpg\" alt></a><br>","more":"</p>\n<h2 id=\"基本配置命令\"><a href=\"#基本配置命令\" class=\"headerlink\" title=\"基本配置命令\"></a>基本配置命令</h2><h3 id=\"Git常用命令速查表\"><a href=\"#Git常用命令速查表\" class=\"headerlink\" title=\"Git常用命令速查表\"></a>Git常用命令速查表</h3><p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/11355916837b25b3cfo.jpg\" alt title=\"速查表\"></p>\n<h3 id=\"使用Git生成ssh密钥\"><a href=\"#使用Git生成ssh密钥\" class=\"headerlink\" title=\"使用Git生成ssh密钥:\"></a>使用Git生成ssh密钥:</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C <span class=\"string\">\"email@example.com\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"设置全局用户名和邮箱\"><a href=\"#设置全局用户名和邮箱\" class=\"headerlink\" title=\"设置全局用户名和邮箱:\"></a>设置全局用户名和邮箱:</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name <span class=\"string\">\"YourName\"</span></span><br><span class=\"line\">git config --global user.email <span class=\"string\">\"email@example.com\"</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"初始化仓库\"><a href=\"#初始化仓库\" class=\"headerlink\" title=\"初始化仓库\"></a>初始化仓库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git init</span><br></pre></td></tr></table></figure>\n<h3 id=\"添加文件到暂存区\"><a href=\"#添加文件到暂存区\" class=\"headerlink\" title=\"添加文件到暂存区\"></a>添加文件到暂存区</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git add &lt;filename&gt;\t<span class=\"comment\">#添加指定文件到暂存区</span></span><br><span class=\"line\">git add .\t<span class=\"comment\">#添加工作区所有文件到暂存区</span></span><br><span class=\"line\">git add -i\t<span class=\"comment\">#交互方式添加文件到暂存区</span></span><br><span class=\"line\">git add -u\t<span class=\"comment\">#将工作区中已经变动的文件添加到暂存区，当新增加的文件不会被添加</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"提交文件到仓库\"><a href=\"#提交文件到仓库\" class=\"headerlink\" title=\"提交文件到仓库\"></a>提交文件到仓库</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git commit -m <span class=\"string\">\"描述信息\"</span>\t\t<span class=\"comment\">#提交更新</span></span><br><span class=\"line\">git commit -am <span class=\"string\">\"描述信息\"</span>\t<span class=\"comment\">#如果工作目录中仅是已跟踪的文件被修改或被删除，使用此提交命令</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"分支的创建、删除、和平、切换、查看\"><a href=\"#分支的创建、删除、和平、切换、查看\" class=\"headerlink\" title=\"分支的创建、删除、和平、切换、查看\"></a>分支的创建、删除、和平、切换、查看</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git branch\t<span class=\"comment\">#查看Git仓库中已有的分支</span></span><br><span class=\"line\">git branch 新分支名 [分支起点]\t<span class=\"comment\">#创建分支，如果没有分支起点的话，则默认在当前分支的最新提交上创建分支</span></span><br><span class=\"line\">git checkout 分支名\t<span class=\"comment\">#切换分支</span></span><br><span class=\"line\">git checkout -b 新分支名\t\t<span class=\"comment\">#创建同时切换到新分支</span></span><br><span class=\"line\">git merge 要被合并的分支名\t<span class=\"comment\">#合并分支</span></span><br><span class=\"line\">git branch -d 要删除的分支名\t<span class=\"comment\">#删除指定分支（如果分支没有被合并过，该命令会执行失败）</span></span><br><span class=\"line\">git branch -D 要删除的分支名\t<span class=\"comment\">#删除指定分支，不管有没有被合并过</span></span><br><span class=\"line\">gitk\t\t\t\t<span class=\"comment\">#用图形界面查看分支提交历史</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>合并分支过程中如果发生冲突则需要自己手动解决冲突，然后再提交。有冲突时，Git会显示哪个文件有冲突，并在冲突的文件中加上特殊的标识符号，解决完冲突后，要手动去掉这些被添加的标识符号。如果冲突比较复杂的话，最好使用其他工具来协助，通过git mergetool来启动。冲突一般是在不同的分支上对同一文件的同一位置内容进行了改动，并已提交到仓库中，这样在合并的时候就会发生冲突。</p>\n</blockquote>\n<h3 id=\"标签的添加、删除、查看\"><a href=\"#标签的添加、删除、查看\" class=\"headerlink\" title=\"标签的添加、删除、查看\"></a>标签的添加、删除、查看</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git tag\t\t<span class=\"comment\">#查看标签</span></span><br><span class=\"line\">git tag 标签名\t<span class=\"comment\">#创建简单的标签</span></span><br><span class=\"line\">git tag -a 标签名 -m <span class=\"string\">'附加信息'</span>\t<span class=\"comment\">#创建附加信息的标签</span></span><br><span class=\"line\">git show 标签名\t<span class=\"comment\">#通过标签查看信息</span></span><br><span class=\"line\">git tag -d 标签名\t<span class=\"comment\">#删除标签</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>标签可以在需要的地方，为某个提交对象创建别名，这样以后我们就可以通过标签来查看一些信息，创建分支等。</p>\n</blockquote>\n<h3 id=\"查看工作目录状态\"><a href=\"#查看工作目录状态\" class=\"headerlink\" title=\"查看工作目录状态\"></a>查看工作目录状态</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在git命令执行后，要养成通过git status查看git状态的习惯，以便及时了解文件变化的情况。通过git status可以知道文件的状态（已修改未暂存、已删除、已修改并已暂存等待提交、未跟踪）。</p>\n</blockquote>\n<h3 id=\"查看提交历史\"><a href=\"#查看提交历史\" class=\"headerlink\" title=\"查看提交历史\"></a>查看提交历史</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">log</span></span><br><span class=\"line\">git <span class=\"built_in\">log</span> -p\t<span class=\"comment\">#显示每次提交文件变化</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>通过git log可以查看当前分支的所有提交历史，知道每次提交的commit对象的ID以及提交时附加的描述信息等。要显示更多的信息，需要使用其支持的选项，如git log -p可以将每次提交的文件变化也显示出来。</p>\n</blockquote>\n<h3 id=\"查看指定的提交对象\"><a href=\"#查看指定的提交对象\" class=\"headerlink\" title=\"查看指定的提交对象\"></a>查看指定的提交对象</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git show commit_id\t<span class=\"comment\">#查看指定的某次提交内容</span></span><br><span class=\"line\">git show --all\t\t<span class=\"comment\">#显示所有的提交历史内容</span></span><br><span class=\"line\">git shortlog -s -n\t<span class=\"comment\">#显示总的提交次数</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>通过<code>git log</code>可以显示整个提交历史，而通过<code>git show commit-id</code>则可以查看指定的某次提交内容，当然<code>git show -all</code>也可以显示出提交历史，另外还可以格式化显示内容。</p>\n</blockquote>\n<p><strong>Note : commit-id可以是commit对象对应的ID，也可以是HEAD，分支名，tag等。</strong></p>\n<h3 id=\"查看工作区、暂存区、仓库之间的差异\"><a href=\"#查看工作区、暂存区、仓库之间的差异\" class=\"headerlink\" title=\"查看工作区、暂存区、仓库之间的差异\"></a>查看工作区、暂存区、仓库之间的差异</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git diff\t\t<span class=\"comment\">#比较工作区与暂存区的差异</span></span><br><span class=\"line\">git diff HEAD\t\t<span class=\"comment\">#比较工作区与仓库中最近一次的提交间的差异</span></span><br><span class=\"line\">git diff --cached\t<span class=\"comment\">#比较暂存区与仓库中最近一次提交的差异</span></span><br><span class=\"line\">git blame filename\t<span class=\"comment\">#可以列出该文件每次被修改的时间和内容。</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"版本回退、撤销操作\"><a href=\"#版本回退、撤销操作\" class=\"headerlink\" title=\"版本回退、撤销操作\"></a>版本回退、撤销操作</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reflog\t<span class=\"comment\">#显示提交历史的简介</span></span><br><span class=\"line\">git checkout -- filename\t<span class=\"comment\">#丢弃工作区的修改</span></span><br><span class=\"line\">git reset --hard HEAD^\t\t<span class=\"comment\">#回退到上一个版本</span></span><br><span class=\"line\">git reset --hard commit_id\t<span class=\"comment\">#回退到指定版本</span></span><br><span class=\"line\">git checkout -- filename\t<span class=\"comment\">#恢复工作区被删除的指定文件（文件之前被提交到仓库中）</span></span><br><span class=\"line\">git checkout -f \t\t<span class=\"comment\">#恢复工作区中所有被删除的文件(文件之前被提交到仓库中)</span></span><br><span class=\"line\">git ls-files -d\t\t\t<span class=\"comment\">#列出工作区被删除的文件（文件之前被提交到仓库中）</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>有时候，由于我们的误操作，产生了一些错误，我们发现后希望能够及时纠正这些因为误操作而产生的结果，将工作目录恢复到某个正常状态。</p>\n</blockquote>\n<ul>\n<li>撤销修改，但还没有添加到暂存区： <code>git checkout -- filename</code> 修改的文件会被恢复到上次提交时的状态，修改的内容会丢失。</li>\n<li>版本回退：先通过<code>git reflog</code>找到某个版本的<code>commit_id</code>，然后用<code>git reset --hard commit_id</code>将工作目录的文件恢复到指定的版本。</li>\n<li>恢复工作区中被删除的文件（文件之前被提交到仓库中）：<code>git checkout -- filename</code> 或 <code>git checkout -f</code></li>\n</ul>\n<h3 id=\"备份工作区\"><a href=\"#备份工作区\" class=\"headerlink\" title=\"备份工作区\"></a>备份工作区</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git stash\t\t\t<span class=\"comment\">#将工作区文件保存在Git内部栈中</span></span><br><span class=\"line\">git stash list\t\t\t<span class=\"comment\">#列出Git内部栈中保存的工作区文件列表</span></span><br><span class=\"line\">git stash apply stash_id\t<span class=\"comment\">#恢复工作区到指定的内部栈状态</span></span><br><span class=\"line\">git stash pop\t\t\t<span class=\"comment\">#恢复工作区到上一个内部栈状态</span></span><br><span class=\"line\">git stash clear\t\t\t<span class=\"comment\">#清空Git内部栈</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>如果正在一个develop分支上正在开发新功能，但这时master分支(稳定版本)突然发现了bug，并需要及时修复，而develop分支此时的工作还没有完成，且不希望将之前的工作就这样提交到仓库中时，这时就可以用<code>git stash</code>来暂时保存这些状态到Git内部栈中，并用当前分支上一次的提交内容来恢复工作目录，然后切换到master分支进行bug修复工作，等修复完毕并提交到仓库上后，再使用<code>git stash apply [stash@{0}]</code>或者<code>git stash pop</code>将工作目录恢复到之前的状态，继续之前的工作。</p>\n</blockquote>\n<blockquote>\n<p>同时也可以多次使用git stash将未提交的代码压入到Git栈中，但当多次使用<code>git stash</code>命令后，Git栈里将充满了未提交的代码，这时候到底要用哪个版本来恢复工作目录呢？<code>git stash list</code>命令可以将当前的Git栈信息打印出来，我们只需要将找到对应的版本号，例如使用<code>git stash apply stash@{1}</code>就可以用版本号为stash@{1}的内容来恢复工作目录。</p>\n</blockquote>\n<blockquote>\n<p>当Git栈中所有的内容都被恢复后，可以使用<code>git stash clear</code>来将栈清空。</p>\n</blockquote>\n<h3 id=\"将当前工作区目录文件压缩归档\"><a href=\"#将当前工作区目录文件压缩归档\" class=\"headerlink\" title=\"将当前工作区目录文件压缩归档\"></a>将当前工作区目录文件压缩归档</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git archive --format=zip -o arch.zip HEAD</span><br><span class=\"line\">git arch --format zip head&gt;arch.zip</span><br></pre></td></tr></table></figure>\n<h2 id=\"远程操作\"><a href=\"#远程操作\" class=\"headerlink\" title=\"远程操作\"></a>远程操作</h2><blockquote>\n<p>Git相比其他版本控制软件的一个优点就是大多数的操作都可以在本地进行，而不用管远程的仓库，因为操作是在本地，且操作的数据也是在本地，加上指针等原因，所以执行的速度就会比较快。 在多人协作的项目中，就需要涉及与远程仓库交互的问题，主要是如何从远程仓库抓取最新数据合并到自己的本地分支上，将自己的最新成果分享给其他人或让别人审查等 。</p>\n</blockquote>\n<h3 id=\"远程仓库的克隆、添加、查看\"><a href=\"#远程仓库的克隆、添加、查看\" class=\"headerlink\" title=\"远程仓库的克隆、添加、查看\"></a>远程仓库的克隆、添加、查看</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote\t<span class=\"comment\">#显示已添加的远程仓库名</span></span><br><span class=\"line\">git remote -v \t<span class=\"comment\">#显示已添加的远程仓库名和地址</span></span><br><span class=\"line\">git remote add 远程仓库名 远程仓库地址\t<span class=\"comment\">#在本地添加远程仓库</span></span><br><span class=\"line\">git remote rm 远程仓库名\t\t\t<span class=\"comment\">#删除本地添加的远程仓库名</span></span><br><span class=\"line\">git remote rename 原名 新名\t\t<span class=\"comment\">#重命名远程仓库名</span></span><br><span class=\"line\">git <span class=\"built_in\">clone</span> 远程仓库地址 [克隆到指定的文件夹]\t<span class=\"comment\">#克隆远程仓库到本地</span></span><br><span class=\"line\">git fetch 远程仓库名\t\t<span class=\"comment\">#从远程仓库抓取最新数据到本地但不与本地分支进行合并 </span></span><br><span class=\"line\">git pull 远程仓库名\t本地要合并的分支名\t<span class=\"comment\">#从远程仓库抓取最新数据并自动与本地分支进行合并</span></span><br><span class=\"line\">git push 远程仓库名 本地分支名\t<span class=\"comment\">#将本地仓库推送到远程仓库中</span></span><br><span class=\"line\">git remote show 远程仓库名\t<span class=\"comment\">#查看远程仓库信息</span></span><br><span class=\"line\">git remote show\t\t\t<span class=\"comment\">#查看所有远程仓库</span></span><br><span class=\"line\">git push 远程仓库名 标签名\t<span class=\"comment\">#将标签推送到远程仓库（Git默认不推送标签）</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"协同流程\"><a href=\"#协同流程\" class=\"headerlink\" title=\"协同流程\"></a>协同流程</h3><ul>\n<li>Fork远程项目</li>\n<li>把Fork的项目clone到本地</li>\n<li>执行以下命令，将别人的库添加为远端库</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add 远端仓库名 远端的分支</span><br></pre></td></tr></table></figure>\n<ul>\n<li>运行以下命令，拉去合并到本地</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git pull 远端仓库名 远端分支名</span><br></pre></td></tr></table></figure>\n<ul>\n<li>编辑内容</li>\n<li>commit之后push到自己的库</li>\n<li>登录Github，在你的首页可以看到一个<code>pull request</code>按钮，点击它，填写一些说明信息，提交即可。</li>\n</ul>\n<blockquote>\n<p>在本地编辑内容前必须执行pull操作同步别人的远端库（这样避免冲突）</p>\n</blockquote>\n<h3 id=\"实用技巧\"><a href=\"#实用技巧\" class=\"headerlink\" title=\"实用技巧\"></a>实用技巧</h3><blockquote>\n<p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再使用<code>git stash pop</code>，回到工作现场.</p>\n</blockquote>\n<h3 id=\"多人协作技巧\"><a href=\"#多人协作技巧\" class=\"headerlink\" title=\"多人协作技巧\"></a>多人协作技巧</h3><blockquote>\n<p>查看远程库信息，使用git remote -v；<br>本地新建的分支如果不推送到远程，对其他人就是不可见的；<br>从本地推送分支，使用<code>git push 远程仓库名 分支名</code>，如果推送失败，先用<code>git pull</code>抓取远程的新提交；<br>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；<br>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；<br>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</p>\n</blockquote>\n<h3 id=\"Git常用命令思维导图\"><a href=\"#Git常用命令思维导图\" class=\"headerlink\" title=\"Git常用命令思维导图\"></a>Git常用命令思维导图</h3><p><img class=\"full-image\" src=\"http://7xkj6q.com1.z0.glb.clouddn.com/blog/image/jpg/11355916521d2e8f8fo.jpg\"></p>"},{"title":"Kubernetes集群之路（一）TLS证书配置","date":"2018-03-26T04:40:08.000Z","_content":"\n![](https://upload.wikimedia.org/wikipedia/commons/6/67/Kubernetes_logo.svg)\n\n{%note default%}\n\nKubernetes是Google开源的容器化集群管理系统，其提供的应用部署、扩展、服务发现等机制对于微服务化架构应用有着十分重要的作用。\n\n本系列文章基于以下版本来讲述如何使用二进制方式安装Kubernetes集群顺便讲述下踩坑的心路历程：\n - Kubernetes version: `v1.10`\n - System: `CentOS Linux 7`\n - Kernel: `Linux 3.10.0`\n\n{%endnote%}\nKubernetes系统的各个组件需要使用TLS证书对其通信加密以及授权认证，所以在部署之前我们需要先生成相关的TLS证书以便后续操作能够顺利进行。\n\n<!--more-->\n\n-----------------\n\n> 在后续安装部署中，将不使用kube-apiserver的HTTP非安全端口，所有组件都启用TLS双向认证通信。因此TLS证书配置是在安装配置Kubernetes系统中最容易出错和难于排查问题的一步，所以请务必耐心仔细。\n\n在开始前，为了模拟集群节点，我们假定需要在以下三台Linux主机上部署Kubernetes:\n\n - `10.138.148.161 `：作为`master`节点\n - `10.138.196.180`：作为`Node`节点\n - `10.138.212.68`：作为`Node`节点\n\n{%note danger%}\n\n同一台主机上可以同时部署master和Node节点相关组件，即同时作为控制节点和工作节点，不过这么做可能导致master节点负载过高而失去响应进而导致整个集群出现无法预知的问题。\n\n{%endnote%}\n\n\n\n------------------\n\n### 安装`CFSSL`证书生成工具\n\n{%note info%}\n我们将使用`Cloudflare`的PKI工具集[cloudflare/cfssl](https://github.com/cloudflare/cfssl)来生成集群所需要的各种`TLS`证书。\n{%endnote%}\n\n执行以下命令直接下载二进制文件进行安装:\n\n```bash\nwget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 -O cfssl \nchmod +x cfssl \nsudo mv cfssl /usr/local/bin\n\nwget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 -O cfssljson \nchmod +x cfssljson \nsudo mv cfssljson /usr/local/bin\n\nwget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64 -O cfssl-certinfo \nchmod +x cfssl-certinfo \nsudo mv cfssl-certinfo /usr/local/bin\n\nexport PATH=/usr/local/bin:$PATH\n```\n\n### 创建CA根证书（Certificate Authority）\n\nCA（Certificate Authority）是自签名的根证书，用来签名后续创建的其它 TLS 证书；\n确认`CFSSL`工具安装成功之后，我们先通过`CFSSL`工具来创建模版配置json文件:\n\n```bash\ncfssl print-defaults config > config.json\ncfssl print-defaults csr > csr.json\n```\n#### 创建CA配置文件\n\n这将生成两个模版json文件，后续`CFSSL`将读取json文件内容并生成对应的`pem`文件。我们先复制`config.json`为`ca-config.json`文件并做如下修改:\n\n```json\n{\n    \"signing\": {\n        \"default\": {\n            \"expiry\": \"99999h\"\n        },\n        \"profiles\": {\n            \"kubernetes\": {\n                \"expiry\": \"99999h\",\n                \"usages\": [\n                    \"signing\",\n                    \"key encipherment\",\n                    \"server auth\",\n                    \"client auth\"\n                ]\n            }\n        }\n    }\n}\n```\n\n{%note warning%}\n`profiles`：可以定义多个profiles，分别指定不同的过期时间、使用场景等参数；后续在签名证书时使用某个特定的profile。\n\n`signing`：表示该证书可用于签名(签发)其它证书，生成的 ca.pem 证书中 CA=TRUE。\n\n`server auth`：表示`client可以用该 CA（生成的ca.pem） 对server提供的证书进行验证。\n\n`client auth`：表示server可以用该CA(生成的ca.pem）对client提供的证书进行验证。\n{%endnote%}\n\n\n\n#### 创建CA证书签名请求\n\n我们复制`csr.json`为`ca-csr.json`并做以下修改:\n\n```json\n{\n  \"CN\": \"kubernetes\",\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"C\": \"CN\",\n      \"ST\": \"Shanghai\",\n      \"L\": \"Shanghai\",\n      \"O\": \"k8s\",\n      \"OU\": \"System\"\n    }\n  ]\n}\n```\n\n\n\n{%note warning%}\n\n`CN`(`Common Name`):后续`kube-apiserver`组件将从证书中提取该字段作为请求的用户名；\n\n`O`(`Organtzation`):后续`kube-apiserver`组件将从证书中提取该字段作为请求的用户所属的用户组；\n\n{%endnote%}\n\n#### 生成CA证书和私钥\n\n执行以下命令来生成CA证书和私钥：\n\n```bash\ncfssl gencert -initca ca-csr.json | cfssljson -bare ca\nls ca*\nca.csr  ca-csr.json  ca-key.pem  ca.pem\n```\n\n这样，我们就生成了CA证书和私钥了，因为我们需要双向`TLS`认证，所以需要拷贝`ca-key.pem`和`ca.pem`到所有要部署的机器的`/etc/kubernetes/ssl`目录下备用。\n\n\n\n### 创建kubernetes组件认证授权证书\n\n因为我们准备部署的kubernetes组件是使用`TLS`双向认证的，包括`kube-apiserver`不打算使用HTTP端口，因此，我们需要生成以下的证书以供后续组件部署的时候备用：\n\n\n\n{%note info%}\n\n- `etcd`证书：etcd集群之间通信加密使用的`TLS`证书。\n- `kube-apiserver`证书：配置`kube-apiserver`组件的证书。\n- `kube-controller-manager`证书：用于和`kube-apiserver`通信认证的证书。\n- `kube-scheduler`证书：用于和`kube-apiserver`通信认证的证书。\n- `kubelet`证书【可选,非必需】：用于和`kube-apiserver`通信认证的证书，如果使用`TLS Bootstarp`认证方式，将没有必要配置。\n- `kube-proxy`证书【可选,非必需】：用于和`kube-apiserver`通信认证的证书，如果使用`TLS Bootstarp`认证方式，将没有必要配置。\n\n{%endnote%}\n\n下面我们将逐个创建对应的`TLS`证书，并做相应的简短说明：\n\n#### 创建`etcd`证书：\n\n首选我们创建`etcd`证书签名请求(CSR)，拷贝`csr.json`为`etcd-csr.json`并做以下修改:\n\n```json\n{\n  \"CN\": \"etcd\",\n    \"hosts\": [\n      \"127.0.0.1\",\n      \"10.138.212.68\",\n      \"10.138.196.180\",\n      \"10.138.148.161\",\n        \"master\",\n        \"node1\",\n        \"node2\"\n    ],\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"C\": \"CN\",\n      \"ST\": \"Shanghai\",\n      \"L\": \"Shanghai\",\n      \"O\": \"k8s\",\n      \"OU\": \"System\"\n    }\n  ]\n}\n```\n\n{%note danger%}\n\n此处需要指定`host`字段的值，该值为所有需要部署etcd节点的`ip 域名 或者 hostname`，etcd需要使用`Subject Alternative Name（SAN）`来校验集群以及防止滥用。如果你不清楚应该使用哪个ip，默认情况下使用`ip a`查看`eth0`即可。此处指定的`ip`与后续指定的`etcd的systemd`配置`initial-cluster`相关。\n\n相关阅读: [Option to accept TLS client certificates even if they lack correct Subject Alternative Names](https://github.com/coreos/etcd/issues/2056)\n\n{%endnote%}\n\n生成`etcd`证书和私钥：\n\n```bash\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes etcd-csr.json | cfssljson -bare etcd\nls etcd*\netcd.csr  etcd-csr.json  etcd-key.pem etcd.pem\n```\n\n将生成的`etch-key.pem`和`etcd.pem`拷贝到所有需要部署`etcd`集群的服务器`/etc/etcd/ssl`目录下备用。\n\n#### 创建`kube-apiserver`证书\n\n创建`kube-apiserver`证书签名请求配置文件，拷贝`csr.json`为`kubernetes-csr.json`并做以下修改：\n\n```json\n{\n    \"CN\": \"kubernetes\",\n    \"hosts\": [\n      \"127.0.0.1\",\n      \"10.138.212.68\",\n      \"10.138.196.180\",\n      \"10.138.148.161\",\n      \"10.254.0.1\",\n      \"kubernetes\",\n      \"kubernetes.default\",\n      \"kubernetes.default.svc\",\n      \"kubernetes.default.svc.cluster\",\n      \"kubernetes.default.svc.cluster.local\"\n    ],\n    \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n    },\n    \"names\": [\n        {\n            \"C\": \"CN\",\n            \"ST\": \"Shanghai\",\n            \"L\": \"Shanghai\",\n            \"O\": \"k8s\",\n            \"OU\": \"System\"\n        }\n    ]\n}\n```\n\n\n\n{%note warning%}\n\n此处指定了`host`字段来表示授权使用该证书的`ip或域名`列表，因此上述配置文件指定了要部署的kubernetes三台服务器ip（实际上只需要指定打算部署master节点的ip即可）以及`kube-apiserver`注册的名为`kubernetes`服务的服务ip（一般默认为后续配置`kube-apiserve`组件的时候指定的`—service-cluster-ip-range`网段的第一个ip。）如果你不清楚怎么操作，可以留空`host`字段。\n\n如果你指定了`host`字段，这里如果有 `VIP` 的，也是需要填写的。\n\n{%endnote%}\n\n生成`kube-apiserver`证书和私钥：\n\n```bash\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kubernetes-csr.json | cfssljson -bare apiserver\nls apiserver*\napiserver.csr  apiserver-key.pem  apiserver.pem\n```\n\n我们将该证书拷贝到需要部署到`master`节点上的`/etc/kubernetes/ssl`上备用。\n\n{%note info%}\n\n因为我们master节点的组件之间的通信使用`非HTTP`的安全端口，所以同样也需要`TLS`认证授权，因此我们也需要配置`kube-controller-manager`和`kube-scheduler`的证书来供这两个组件访问`kube-apiserver`.如果你的集群master节点组件使用HTTP非安全端口通信，那么可以不需要配置这两个证书。\n\n{%endnote%}\n\n#### 创建`kube-controller-manager`证书\n\n复制`car.json`为`kube-controller-manager-csr.json`并做以下修改：\n\n\n\n```json\n{\n  \"CN\": \"system:kube-controller-manager\",\n  \"hosts\": [],\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"C\": \"CN\",\n      \"ST\": \"Shanghai\",\n      \"L\": \"Shanghai\",\n      \"O\": \"k8s\",\n      \"OU\": \"System\"\n    }\n  ]\n}\n```\n\n\n\n上述的配置中，`kube-apiserver`将提取`CN`作为客户端组件(kube-controller-manager)的用户名(system:kube-controller-manager)，`kube-apiserver`预定义的RBAC使用ClusterRoleBinding `system:kube-controller-manager`将`用户system:kube-controller-manager`与`ClusterRole system:kube-controller-manager`绑定。\n\n生成`kube-controller-manager`证书和私钥：\n\n```bash\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare controller-manager\nls controller-manager*\ncontroller-manager.csr  controller-manager-key.pem  controller-manager.pem\n```\n\n将证书拷贝到需要部署`kube-controller-manager`的master节点`/etc/kubernetes/ssl`上备用。\n\n#### 创建kube-scheduler`证书\n\n与`kube-controller-manager`一样，`kube-scheduler`同样也需要`TLS`证书来访问`kube-apiserver`。此处不再赘述。直接上`kube-scheduler-csr.json`文件内容：\n\n```json\n{\n  \"CN\": \"system:kube-scheduler\",\n  \"hosts\": [],\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"C\": \"CN\",\n      \"ST\": \"Shanghai\",\n      \"L\": \"Shanghai\",\n      \"O\": \"k8s\",\n      \"OU\": \"System\"\n    }\n  ]\n}\n```\n\n``kube-scheduler `将提取 `CN作为客户端的用户名`,这里是 `system:kube-scheduler`。 kube-apiserver 预定义的 RBAC 使用的 ClusterRoleBindings `system:kube-scheduler `将`用户system:kube-scheduler `与 `ClusterRole system:kube-scheduler `绑定。\n\n生成`kube-scheduler`证书以及私钥：\n\n```bash\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare scheduler\nls scheduler*\nscheduler.csr  scheduler-key.pem  scheduler.pem\n```\n\n将证书拷贝到需要部署`kube-scheduler`的master节点`/etc/kubernetes/ssl`上备用。\n\n至此，`master`节点上的证书生成就全部完成了，接下来是生成`worker`节点的证书，需要注意的是：生成`worker`证书是可选的，如果你使用`TLS Bootstarpping`那么你可以跳过以下步骤`worker`证书生成工作。直接转到部署的实际操作环节。关于`TLS`证书和`TLS Bootstarpping`认证方式的区别，后续考虑单独写一遍文章展开来讲。\n\n-------\n\n#### 创建`kubelet`证书\n\n拷贝`car.json`为`kubelet-csr.json`并做以下修改:\n\n```json\n{\n  \"CN\": \"system:node:node\",\n  \"hosts\": [],\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"C\": \"CN\",\n      \"ST\": \"Shanghai\",\n      \"L\": \"Shanghai\",\n      \"O\": \"system:nodes\",\n      \"OU\": \"System\"\n    }\n  ]\n}\n```\n\n{%note warning%}\n\n`O`为用户组，kubernetes RBAC定义了ClusterRoleBinding将Group system:nodes和CLusterRole system:node关联起来。\n\n注意:在`kubernetes v1.8+`以上版本，将不会自动创建`binding`,因此我们后续需要手动创建绑定关系。\n\n{%endnote%}\n\n生成`kubelet`证书和私钥：\n\n```bash\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kubelet-csr.json | cfssljson -bare kubelet\nls kubelet*\nkubelet.csr  kubelet-csr.json  kubelet-key.pem  kubelet.pem\n```\n\n将生成的证书和秘钥拷贝到所有需要部署的worker节点上的`/etc/kubernetes/ssl`下备用。\n\n#### 创建`kube-proxy`证书\n\n拷贝`car.json`为`kube-proxy-csr.json`并做以下修改:\n\n```json\n{\n  \"CN\": \"system:kube-proxy\",\n  \"hosts\": [],\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"C\": \"CN\",\n      \"ST\": \"Shanghai\",\n      \"L\": \"Shanghai\",\n      \"O\": \"k8s\",\n      \"OU\": \"System\"\n    }\n  ]\n}\n```\n\n{%note warning%}\n\n`CN` 指定该证书的 User为 system:kube-proxy。Kubernetes RBAC定义了ClusterRoleBinding将`system:kube-proxy用户`与`system:node-proxier 角色`绑定。system:node-proxier具有kube-proxy组件访问ApiServer的相关权限。\n\n{%endnote%}\n\n生成`kube-proxy`证书和私钥：\n\n```bash\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy\nls kube-proxy*\nkube-proxy.csr  kube-proxy-csr.json  kube-proxy-key.pem  kube-proxy.pem\n```\n\n将生成的证书和私钥拷贝到所有需要部署`worker`节点的`/etc/kubernetes/ssl`下备用。\n\n在完成证书分发之后，这样我们的证书相关的生成工作就完成了。接下来开始配置各个组件。\n\n\n\n参考资料：\n\n- [Using RBAC Authorization](https://kubernetes.io/docs/admin/authorization/rbac/)\n- [Kubernetes HA Cluster Build](https://wiki.shileizcc.com/display/KUB/Kubernetes+HA+Cluster+Build)\n- [在CentOS上部署kubernetes集群](https://jimmysong.io/kubernetes-handbook/practice/install-kubernetes-on-centos.html)\n\n\n\n\n","source":"_posts/Kubernetes集群之路之TLS证书配置.md","raw":"title: Kubernetes集群之路（一）TLS证书配置\ndate: 2018-3-26 12:40:08\ntags:\n\n- docker\n- kubernetes\n\n---\n\n![](https://upload.wikimedia.org/wikipedia/commons/6/67/Kubernetes_logo.svg)\n\n{%note default%}\n\nKubernetes是Google开源的容器化集群管理系统，其提供的应用部署、扩展、服务发现等机制对于微服务化架构应用有着十分重要的作用。\n\n本系列文章基于以下版本来讲述如何使用二进制方式安装Kubernetes集群顺便讲述下踩坑的心路历程：\n - Kubernetes version: `v1.10`\n - System: `CentOS Linux 7`\n - Kernel: `Linux 3.10.0`\n\n{%endnote%}\nKubernetes系统的各个组件需要使用TLS证书对其通信加密以及授权认证，所以在部署之前我们需要先生成相关的TLS证书以便后续操作能够顺利进行。\n\n<!--more-->\n\n-----------------\n\n> 在后续安装部署中，将不使用kube-apiserver的HTTP非安全端口，所有组件都启用TLS双向认证通信。因此TLS证书配置是在安装配置Kubernetes系统中最容易出错和难于排查问题的一步，所以请务必耐心仔细。\n\n在开始前，为了模拟集群节点，我们假定需要在以下三台Linux主机上部署Kubernetes:\n\n - `10.138.148.161 `：作为`master`节点\n - `10.138.196.180`：作为`Node`节点\n - `10.138.212.68`：作为`Node`节点\n\n{%note danger%}\n\n同一台主机上可以同时部署master和Node节点相关组件，即同时作为控制节点和工作节点，不过这么做可能导致master节点负载过高而失去响应进而导致整个集群出现无法预知的问题。\n\n{%endnote%}\n\n\n\n------------------\n\n### 安装`CFSSL`证书生成工具\n\n{%note info%}\n我们将使用`Cloudflare`的PKI工具集[cloudflare/cfssl](https://github.com/cloudflare/cfssl)来生成集群所需要的各种`TLS`证书。\n{%endnote%}\n\n执行以下命令直接下载二进制文件进行安装:\n\n```bash\nwget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 -O cfssl \nchmod +x cfssl \nsudo mv cfssl /usr/local/bin\n\nwget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 -O cfssljson \nchmod +x cfssljson \nsudo mv cfssljson /usr/local/bin\n\nwget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64 -O cfssl-certinfo \nchmod +x cfssl-certinfo \nsudo mv cfssl-certinfo /usr/local/bin\n\nexport PATH=/usr/local/bin:$PATH\n```\n\n### 创建CA根证书（Certificate Authority）\n\nCA（Certificate Authority）是自签名的根证书，用来签名后续创建的其它 TLS 证书；\n确认`CFSSL`工具安装成功之后，我们先通过`CFSSL`工具来创建模版配置json文件:\n\n```bash\ncfssl print-defaults config > config.json\ncfssl print-defaults csr > csr.json\n```\n#### 创建CA配置文件\n\n这将生成两个模版json文件，后续`CFSSL`将读取json文件内容并生成对应的`pem`文件。我们先复制`config.json`为`ca-config.json`文件并做如下修改:\n\n```json\n{\n    \"signing\": {\n        \"default\": {\n            \"expiry\": \"99999h\"\n        },\n        \"profiles\": {\n            \"kubernetes\": {\n                \"expiry\": \"99999h\",\n                \"usages\": [\n                    \"signing\",\n                    \"key encipherment\",\n                    \"server auth\",\n                    \"client auth\"\n                ]\n            }\n        }\n    }\n}\n```\n\n{%note warning%}\n`profiles`：可以定义多个profiles，分别指定不同的过期时间、使用场景等参数；后续在签名证书时使用某个特定的profile。\n\n`signing`：表示该证书可用于签名(签发)其它证书，生成的 ca.pem 证书中 CA=TRUE。\n\n`server auth`：表示`client可以用该 CA（生成的ca.pem） 对server提供的证书进行验证。\n\n`client auth`：表示server可以用该CA(生成的ca.pem）对client提供的证书进行验证。\n{%endnote%}\n\n\n\n#### 创建CA证书签名请求\n\n我们复制`csr.json`为`ca-csr.json`并做以下修改:\n\n```json\n{\n  \"CN\": \"kubernetes\",\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"C\": \"CN\",\n      \"ST\": \"Shanghai\",\n      \"L\": \"Shanghai\",\n      \"O\": \"k8s\",\n      \"OU\": \"System\"\n    }\n  ]\n}\n```\n\n\n\n{%note warning%}\n\n`CN`(`Common Name`):后续`kube-apiserver`组件将从证书中提取该字段作为请求的用户名；\n\n`O`(`Organtzation`):后续`kube-apiserver`组件将从证书中提取该字段作为请求的用户所属的用户组；\n\n{%endnote%}\n\n#### 生成CA证书和私钥\n\n执行以下命令来生成CA证书和私钥：\n\n```bash\ncfssl gencert -initca ca-csr.json | cfssljson -bare ca\nls ca*\nca.csr  ca-csr.json  ca-key.pem  ca.pem\n```\n\n这样，我们就生成了CA证书和私钥了，因为我们需要双向`TLS`认证，所以需要拷贝`ca-key.pem`和`ca.pem`到所有要部署的机器的`/etc/kubernetes/ssl`目录下备用。\n\n\n\n### 创建kubernetes组件认证授权证书\n\n因为我们准备部署的kubernetes组件是使用`TLS`双向认证的，包括`kube-apiserver`不打算使用HTTP端口，因此，我们需要生成以下的证书以供后续组件部署的时候备用：\n\n\n\n{%note info%}\n\n- `etcd`证书：etcd集群之间通信加密使用的`TLS`证书。\n- `kube-apiserver`证书：配置`kube-apiserver`组件的证书。\n- `kube-controller-manager`证书：用于和`kube-apiserver`通信认证的证书。\n- `kube-scheduler`证书：用于和`kube-apiserver`通信认证的证书。\n- `kubelet`证书【可选,非必需】：用于和`kube-apiserver`通信认证的证书，如果使用`TLS Bootstarp`认证方式，将没有必要配置。\n- `kube-proxy`证书【可选,非必需】：用于和`kube-apiserver`通信认证的证书，如果使用`TLS Bootstarp`认证方式，将没有必要配置。\n\n{%endnote%}\n\n下面我们将逐个创建对应的`TLS`证书，并做相应的简短说明：\n\n#### 创建`etcd`证书：\n\n首选我们创建`etcd`证书签名请求(CSR)，拷贝`csr.json`为`etcd-csr.json`并做以下修改:\n\n```json\n{\n  \"CN\": \"etcd\",\n    \"hosts\": [\n      \"127.0.0.1\",\n      \"10.138.212.68\",\n      \"10.138.196.180\",\n      \"10.138.148.161\",\n        \"master\",\n        \"node1\",\n        \"node2\"\n    ],\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"C\": \"CN\",\n      \"ST\": \"Shanghai\",\n      \"L\": \"Shanghai\",\n      \"O\": \"k8s\",\n      \"OU\": \"System\"\n    }\n  ]\n}\n```\n\n{%note danger%}\n\n此处需要指定`host`字段的值，该值为所有需要部署etcd节点的`ip 域名 或者 hostname`，etcd需要使用`Subject Alternative Name（SAN）`来校验集群以及防止滥用。如果你不清楚应该使用哪个ip，默认情况下使用`ip a`查看`eth0`即可。此处指定的`ip`与后续指定的`etcd的systemd`配置`initial-cluster`相关。\n\n相关阅读: [Option to accept TLS client certificates even if they lack correct Subject Alternative Names](https://github.com/coreos/etcd/issues/2056)\n\n{%endnote%}\n\n生成`etcd`证书和私钥：\n\n```bash\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes etcd-csr.json | cfssljson -bare etcd\nls etcd*\netcd.csr  etcd-csr.json  etcd-key.pem etcd.pem\n```\n\n将生成的`etch-key.pem`和`etcd.pem`拷贝到所有需要部署`etcd`集群的服务器`/etc/etcd/ssl`目录下备用。\n\n#### 创建`kube-apiserver`证书\n\n创建`kube-apiserver`证书签名请求配置文件，拷贝`csr.json`为`kubernetes-csr.json`并做以下修改：\n\n```json\n{\n    \"CN\": \"kubernetes\",\n    \"hosts\": [\n      \"127.0.0.1\",\n      \"10.138.212.68\",\n      \"10.138.196.180\",\n      \"10.138.148.161\",\n      \"10.254.0.1\",\n      \"kubernetes\",\n      \"kubernetes.default\",\n      \"kubernetes.default.svc\",\n      \"kubernetes.default.svc.cluster\",\n      \"kubernetes.default.svc.cluster.local\"\n    ],\n    \"key\": {\n        \"algo\": \"rsa\",\n        \"size\": 2048\n    },\n    \"names\": [\n        {\n            \"C\": \"CN\",\n            \"ST\": \"Shanghai\",\n            \"L\": \"Shanghai\",\n            \"O\": \"k8s\",\n            \"OU\": \"System\"\n        }\n    ]\n}\n```\n\n\n\n{%note warning%}\n\n此处指定了`host`字段来表示授权使用该证书的`ip或域名`列表，因此上述配置文件指定了要部署的kubernetes三台服务器ip（实际上只需要指定打算部署master节点的ip即可）以及`kube-apiserver`注册的名为`kubernetes`服务的服务ip（一般默认为后续配置`kube-apiserve`组件的时候指定的`—service-cluster-ip-range`网段的第一个ip。）如果你不清楚怎么操作，可以留空`host`字段。\n\n如果你指定了`host`字段，这里如果有 `VIP` 的，也是需要填写的。\n\n{%endnote%}\n\n生成`kube-apiserver`证书和私钥：\n\n```bash\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kubernetes-csr.json | cfssljson -bare apiserver\nls apiserver*\napiserver.csr  apiserver-key.pem  apiserver.pem\n```\n\n我们将该证书拷贝到需要部署到`master`节点上的`/etc/kubernetes/ssl`上备用。\n\n{%note info%}\n\n因为我们master节点的组件之间的通信使用`非HTTP`的安全端口，所以同样也需要`TLS`认证授权，因此我们也需要配置`kube-controller-manager`和`kube-scheduler`的证书来供这两个组件访问`kube-apiserver`.如果你的集群master节点组件使用HTTP非安全端口通信，那么可以不需要配置这两个证书。\n\n{%endnote%}\n\n#### 创建`kube-controller-manager`证书\n\n复制`car.json`为`kube-controller-manager-csr.json`并做以下修改：\n\n\n\n```json\n{\n  \"CN\": \"system:kube-controller-manager\",\n  \"hosts\": [],\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"C\": \"CN\",\n      \"ST\": \"Shanghai\",\n      \"L\": \"Shanghai\",\n      \"O\": \"k8s\",\n      \"OU\": \"System\"\n    }\n  ]\n}\n```\n\n\n\n上述的配置中，`kube-apiserver`将提取`CN`作为客户端组件(kube-controller-manager)的用户名(system:kube-controller-manager)，`kube-apiserver`预定义的RBAC使用ClusterRoleBinding `system:kube-controller-manager`将`用户system:kube-controller-manager`与`ClusterRole system:kube-controller-manager`绑定。\n\n生成`kube-controller-manager`证书和私钥：\n\n```bash\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare controller-manager\nls controller-manager*\ncontroller-manager.csr  controller-manager-key.pem  controller-manager.pem\n```\n\n将证书拷贝到需要部署`kube-controller-manager`的master节点`/etc/kubernetes/ssl`上备用。\n\n#### 创建kube-scheduler`证书\n\n与`kube-controller-manager`一样，`kube-scheduler`同样也需要`TLS`证书来访问`kube-apiserver`。此处不再赘述。直接上`kube-scheduler-csr.json`文件内容：\n\n```json\n{\n  \"CN\": \"system:kube-scheduler\",\n  \"hosts\": [],\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"C\": \"CN\",\n      \"ST\": \"Shanghai\",\n      \"L\": \"Shanghai\",\n      \"O\": \"k8s\",\n      \"OU\": \"System\"\n    }\n  ]\n}\n```\n\n``kube-scheduler `将提取 `CN作为客户端的用户名`,这里是 `system:kube-scheduler`。 kube-apiserver 预定义的 RBAC 使用的 ClusterRoleBindings `system:kube-scheduler `将`用户system:kube-scheduler `与 `ClusterRole system:kube-scheduler `绑定。\n\n生成`kube-scheduler`证书以及私钥：\n\n```bash\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare scheduler\nls scheduler*\nscheduler.csr  scheduler-key.pem  scheduler.pem\n```\n\n将证书拷贝到需要部署`kube-scheduler`的master节点`/etc/kubernetes/ssl`上备用。\n\n至此，`master`节点上的证书生成就全部完成了，接下来是生成`worker`节点的证书，需要注意的是：生成`worker`证书是可选的，如果你使用`TLS Bootstarpping`那么你可以跳过以下步骤`worker`证书生成工作。直接转到部署的实际操作环节。关于`TLS`证书和`TLS Bootstarpping`认证方式的区别，后续考虑单独写一遍文章展开来讲。\n\n-------\n\n#### 创建`kubelet`证书\n\n拷贝`car.json`为`kubelet-csr.json`并做以下修改:\n\n```json\n{\n  \"CN\": \"system:node:node\",\n  \"hosts\": [],\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"C\": \"CN\",\n      \"ST\": \"Shanghai\",\n      \"L\": \"Shanghai\",\n      \"O\": \"system:nodes\",\n      \"OU\": \"System\"\n    }\n  ]\n}\n```\n\n{%note warning%}\n\n`O`为用户组，kubernetes RBAC定义了ClusterRoleBinding将Group system:nodes和CLusterRole system:node关联起来。\n\n注意:在`kubernetes v1.8+`以上版本，将不会自动创建`binding`,因此我们后续需要手动创建绑定关系。\n\n{%endnote%}\n\n生成`kubelet`证书和私钥：\n\n```bash\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kubelet-csr.json | cfssljson -bare kubelet\nls kubelet*\nkubelet.csr  kubelet-csr.json  kubelet-key.pem  kubelet.pem\n```\n\n将生成的证书和秘钥拷贝到所有需要部署的worker节点上的`/etc/kubernetes/ssl`下备用。\n\n#### 创建`kube-proxy`证书\n\n拷贝`car.json`为`kube-proxy-csr.json`并做以下修改:\n\n```json\n{\n  \"CN\": \"system:kube-proxy\",\n  \"hosts\": [],\n  \"key\": {\n    \"algo\": \"rsa\",\n    \"size\": 2048\n  },\n  \"names\": [\n    {\n      \"C\": \"CN\",\n      \"ST\": \"Shanghai\",\n      \"L\": \"Shanghai\",\n      \"O\": \"k8s\",\n      \"OU\": \"System\"\n    }\n  ]\n}\n```\n\n{%note warning%}\n\n`CN` 指定该证书的 User为 system:kube-proxy。Kubernetes RBAC定义了ClusterRoleBinding将`system:kube-proxy用户`与`system:node-proxier 角色`绑定。system:node-proxier具有kube-proxy组件访问ApiServer的相关权限。\n\n{%endnote%}\n\n生成`kube-proxy`证书和私钥：\n\n```bash\ncfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy\nls kube-proxy*\nkube-proxy.csr  kube-proxy-csr.json  kube-proxy-key.pem  kube-proxy.pem\n```\n\n将生成的证书和私钥拷贝到所有需要部署`worker`节点的`/etc/kubernetes/ssl`下备用。\n\n在完成证书分发之后，这样我们的证书相关的生成工作就完成了。接下来开始配置各个组件。\n\n\n\n参考资料：\n\n- [Using RBAC Authorization](https://kubernetes.io/docs/admin/authorization/rbac/)\n- [Kubernetes HA Cluster Build](https://wiki.shileizcc.com/display/KUB/Kubernetes+HA+Cluster+Build)\n- [在CentOS上部署kubernetes集群](https://jimmysong.io/kubernetes-handbook/practice/install-kubernetes-on-centos.html)\n\n\n\n\n","slug":"Kubernetes集群之路之TLS证书配置","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoybg4004z2ev2c9yfb5k6","content":"<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/6/67/Kubernetes_logo.svg\" alt></p>\n<div class=\"note default\"><p>Kubernetes是Google开源的容器化集群管理系统，其提供的应用部署、扩展、服务发现等机制对于微服务化架构应用有着十分重要的作用。</p>\n<p>本系列文章基于以下版本来讲述如何使用二进制方式安装Kubernetes集群顺便讲述下踩坑的心路历程：</p>\n<ul>\n<li>Kubernetes version: <code>v1.10</code></li>\n<li>System: <code>CentOS Linux 7</code></li>\n<li>Kernel: <code>Linux 3.10.0</code></li>\n</ul></div>\n<p>Kubernetes系统的各个组件需要使用TLS证书对其通信加密以及授权认证，所以在部署之前我们需要先生成相关的TLS证书以便后续操作能够顺利进行。</p>\n<a id=\"more\"></a>\n<hr>\n<blockquote>\n<p>在后续安装部署中，将不使用kube-apiserver的HTTP非安全端口，所有组件都启用TLS双向认证通信。因此TLS证书配置是在安装配置Kubernetes系统中最容易出错和难于排查问题的一步，所以请务必耐心仔细。</p>\n</blockquote>\n<p>在开始前，为了模拟集群节点，我们假定需要在以下三台Linux主机上部署Kubernetes:</p>\n<ul>\n<li><code>10.138.148.161</code>：作为<code>master</code>节点</li>\n<li><code>10.138.196.180</code>：作为<code>Node</code>节点</li>\n<li><code>10.138.212.68</code>：作为<code>Node</code>节点</li>\n</ul>\n<div class=\"note danger\"><p>同一台主机上可以同时部署master和Node节点相关组件，即同时作为控制节点和工作节点，不过这么做可能导致master节点负载过高而失去响应进而导致整个集群出现无法预知的问题。</p></div>\n<hr>\n<h3 id=\"安装CFSSL证书生成工具\"><a href=\"#安装CFSSL证书生成工具\" class=\"headerlink\" title=\"安装CFSSL证书生成工具\"></a>安装<code>CFSSL</code>证书生成工具</h3><div class=\"note info\"><p>我们将使用<code>Cloudflare</code>的PKI工具集<a href=\"https://github.com/cloudflare/cfssl\" target=\"_blank\" rel=\"noopener\">cloudflare/cfssl</a>来生成集群所需要的各种<code>TLS</code>证书。</p></div>\n<p>执行以下命令直接下载二进制文件进行安装:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 -O cfssl </span><br><span class=\"line\">chmod +x cfssl </span><br><span class=\"line\">sudo mv cfssl /usr/<span class=\"built_in\">local</span>/bin</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 -O cfssljson </span><br><span class=\"line\">chmod +x cfssljson </span><br><span class=\"line\">sudo mv cfssljson /usr/<span class=\"built_in\">local</span>/bin</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64 -O cfssl-certinfo </span><br><span class=\"line\">chmod +x cfssl-certinfo </span><br><span class=\"line\">sudo mv cfssl-certinfo /usr/<span class=\"built_in\">local</span>/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/<span class=\"built_in\">local</span>/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"创建CA根证书（Certificate-Authority）\"><a href=\"#创建CA根证书（Certificate-Authority）\" class=\"headerlink\" title=\"创建CA根证书（Certificate Authority）\"></a>创建CA根证书（Certificate Authority）</h3><p>CA（Certificate Authority）是自签名的根证书，用来签名后续创建的其它 TLS 证书；<br>确认<code>CFSSL</code>工具安装成功之后，我们先通过<code>CFSSL</code>工具来创建模版配置json文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfssl <span class=\"built_in\">print</span>-defaults config &gt; config.json</span><br><span class=\"line\">cfssl <span class=\"built_in\">print</span>-defaults csr &gt; csr.json</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建CA配置文件\"><a href=\"#创建CA配置文件\" class=\"headerlink\" title=\"创建CA配置文件\"></a>创建CA配置文件</h4><p>这将生成两个模版json文件，后续<code>CFSSL</code>将读取json文件内容并生成对应的<code>pem</code>文件。我们先复制<code>config.json</code>为<code>ca-config.json</code>文件并做如下修改:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"signing\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"default\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"expiry\"</span>: <span class=\"string\">\"99999h\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">\"profiles\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"kubernetes\"</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"expiry\"</span>: <span class=\"string\">\"99999h\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"usages\"</span>: [</span><br><span class=\"line\">                    <span class=\"string\">\"signing\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"key encipherment\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"server auth\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"client auth\"</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"note warning\"><p><code>profiles</code>：可以定义多个profiles，分别指定不同的过期时间、使用场景等参数；后续在签名证书时使用某个特定的profile。</p>\n<p><code>signing</code>：表示该证书可用于签名(签发)其它证书，生成的 ca.pem 证书中 CA=TRUE。</p>\n<p><code>server auth</code>：表示`client可以用该 CA（生成的ca.pem） 对server提供的证书进行验证。</p>\n<p><code>client auth</code>：表示server可以用该CA(生成的ca.pem）对client提供的证书进行验证。</p></div>\n<h4 id=\"创建CA证书签名请求\"><a href=\"#创建CA证书签名请求\" class=\"headerlink\" title=\"创建CA证书签名请求\"></a>创建CA证书签名请求</h4><p>我们复制<code>csr.json</code>为<code>ca-csr.json</code>并做以下修改:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"CN\"</span>: <span class=\"string\">\"kubernetes\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"key\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"algo\"</span>: <span class=\"string\">\"rsa\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"size\"</span>: <span class=\"number\">2048</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"names\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"C\"</span>: <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"ST\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"L\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"O\"</span>: <span class=\"string\">\"k8s\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"OU\"</span>: <span class=\"string\">\"System\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"note warning\"><p><code>CN</code>(<code>Common Name</code>):后续<code>kube-apiserver</code>组件将从证书中提取该字段作为请求的用户名；</p>\n<p><code>O</code>(<code>Organtzation</code>):后续<code>kube-apiserver</code>组件将从证书中提取该字段作为请求的用户所属的用户组；</p></div>\n<h4 id=\"生成CA证书和私钥\"><a href=\"#生成CA证书和私钥\" class=\"headerlink\" title=\"生成CA证书和私钥\"></a>生成CA证书和私钥</h4><p>执行以下命令来生成CA证书和私钥：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfssl gencert -initca ca-csr.json | cfssljson -bare ca</span><br><span class=\"line\">ls ca*</span><br><span class=\"line\">ca.csr  ca-csr.json  ca-key.pem  ca.pem</span><br></pre></td></tr></table></figure>\n<p>这样，我们就生成了CA证书和私钥了，因为我们需要双向<code>TLS</code>认证，所以需要拷贝<code>ca-key.pem</code>和<code>ca.pem</code>到所有要部署的机器的<code>/etc/kubernetes/ssl</code>目录下备用。</p>\n<h3 id=\"创建kubernetes组件认证授权证书\"><a href=\"#创建kubernetes组件认证授权证书\" class=\"headerlink\" title=\"创建kubernetes组件认证授权证书\"></a>创建kubernetes组件认证授权证书</h3><p>因为我们准备部署的kubernetes组件是使用<code>TLS</code>双向认证的，包括<code>kube-apiserver</code>不打算使用HTTP端口，因此，我们需要生成以下的证书以供后续组件部署的时候备用：</p>\n<div class=\"note info\"><ul>\n<li><code>etcd</code>证书：etcd集群之间通信加密使用的<code>TLS</code>证书。</li>\n<li><code>kube-apiserver</code>证书：配置<code>kube-apiserver</code>组件的证书。</li>\n<li><code>kube-controller-manager</code>证书：用于和<code>kube-apiserver</code>通信认证的证书。</li>\n<li><code>kube-scheduler</code>证书：用于和<code>kube-apiserver</code>通信认证的证书。</li>\n<li><code>kubelet</code>证书【可选,非必需】：用于和<code>kube-apiserver</code>通信认证的证书，如果使用<code>TLS Bootstarp</code>认证方式，将没有必要配置。</li>\n<li><code>kube-proxy</code>证书【可选,非必需】：用于和<code>kube-apiserver</code>通信认证的证书，如果使用<code>TLS Bootstarp</code>认证方式，将没有必要配置。</li>\n</ul></div>\n<p>下面我们将逐个创建对应的<code>TLS</code>证书，并做相应的简短说明：</p>\n<h4 id=\"创建etcd证书：\"><a href=\"#创建etcd证书：\" class=\"headerlink\" title=\"创建etcd证书：\"></a>创建<code>etcd</code>证书：</h4><p>首选我们创建<code>etcd</code>证书签名请求(CSR)，拷贝<code>csr.json</code>为<code>etcd-csr.json</code>并做以下修改:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"CN\"</span>: <span class=\"string\">\"etcd\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"hosts\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"10.138.212.68\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"10.138.196.180\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"10.138.148.161\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"master\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"node1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"node2\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">  <span class=\"attr\">\"key\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"algo\"</span>: <span class=\"string\">\"rsa\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"size\"</span>: <span class=\"number\">2048</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"names\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"C\"</span>: <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"ST\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"L\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"O\"</span>: <span class=\"string\">\"k8s\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"OU\"</span>: <span class=\"string\">\"System\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"note danger\"><p>此处需要指定<code>host</code>字段的值，该值为所有需要部署etcd节点的<code>ip 域名 或者 hostname</code>，etcd需要使用<code>Subject Alternative Name（SAN）</code>来校验集群以及防止滥用。如果你不清楚应该使用哪个ip，默认情况下使用<code>ip a</code>查看<code>eth0</code>即可。此处指定的<code>ip</code>与后续指定的<code>etcd的systemd</code>配置<code>initial-cluster</code>相关。</p>\n<p>相关阅读: <a href=\"https://github.com/coreos/etcd/issues/2056\" target=\"_blank\" rel=\"noopener\">Option to accept TLS client certificates even if they lack correct Subject Alternative Names</a></p></div>\n<p>生成<code>etcd</code>证书和私钥：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes etcd-csr.json | cfssljson -bare etcd</span><br><span class=\"line\">ls etcd*</span><br><span class=\"line\">etcd.csr  etcd-csr.json  etcd-key.pem etcd.pem</span><br></pre></td></tr></table></figure>\n<p>将生成的<code>etch-key.pem</code>和<code>etcd.pem</code>拷贝到所有需要部署<code>etcd</code>集群的服务器<code>/etc/etcd/ssl</code>目录下备用。</p>\n<h4 id=\"创建kube-apiserver证书\"><a href=\"#创建kube-apiserver证书\" class=\"headerlink\" title=\"创建kube-apiserver证书\"></a>创建<code>kube-apiserver</code>证书</h4><p>创建<code>kube-apiserver</code>证书签名请求配置文件，拷贝<code>csr.json</code>为<code>kubernetes-csr.json</code>并做以下修改：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"CN\"</span>: <span class=\"string\">\"kubernetes\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"hosts\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"10.138.212.68\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"10.138.196.180\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"10.138.148.161\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"10.254.0.1\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"kubernetes\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"kubernetes.default\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"kubernetes.default.svc\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"kubernetes.default.svc.cluster\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"kubernetes.default.svc.cluster.local\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"key\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"algo\"</span>: <span class=\"string\">\"rsa\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"size\"</span>: <span class=\"number\">2048</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"names\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"C\"</span>: <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"ST\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"L\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"O\"</span>: <span class=\"string\">\"k8s\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"OU\"</span>: <span class=\"string\">\"System\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"note warning\"><p>此处指定了<code>host</code>字段来表示授权使用该证书的<code>ip或域名</code>列表，因此上述配置文件指定了要部署的kubernetes三台服务器ip（实际上只需要指定打算部署master节点的ip即可）以及<code>kube-apiserver</code>注册的名为<code>kubernetes</code>服务的服务ip（一般默认为后续配置<code>kube-apiserve</code>组件的时候指定的<code>—service-cluster-ip-range</code>网段的第一个ip。）如果你不清楚怎么操作，可以留空<code>host</code>字段。</p>\n<p>如果你指定了<code>host</code>字段，这里如果有 <code>VIP</code> 的，也是需要填写的。</p></div>\n<p>生成<code>kube-apiserver</code>证书和私钥：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kubernetes-csr.json | cfssljson -bare apiserver</span><br><span class=\"line\">ls apiserver*</span><br><span class=\"line\">apiserver.csr  apiserver-key.pem  apiserver.pem</span><br></pre></td></tr></table></figure>\n<p>我们将该证书拷贝到需要部署到<code>master</code>节点上的<code>/etc/kubernetes/ssl</code>上备用。</p>\n<div class=\"note info\"><p>因为我们master节点的组件之间的通信使用<code>非HTTP</code>的安全端口，所以同样也需要<code>TLS</code>认证授权，因此我们也需要配置<code>kube-controller-manager</code>和<code>kube-scheduler</code>的证书来供这两个组件访问<code>kube-apiserver</code>.如果你的集群master节点组件使用HTTP非安全端口通信，那么可以不需要配置这两个证书。</p></div>\n<h4 id=\"创建kube-controller-manager证书\"><a href=\"#创建kube-controller-manager证书\" class=\"headerlink\" title=\"创建kube-controller-manager证书\"></a>创建<code>kube-controller-manager</code>证书</h4><p>复制<code>car.json</code>为<code>kube-controller-manager-csr.json</code>并做以下修改：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"CN\"</span>: <span class=\"string\">\"system:kube-controller-manager\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"hosts\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"key\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"algo\"</span>: <span class=\"string\">\"rsa\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"size\"</span>: <span class=\"number\">2048</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"names\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"C\"</span>: <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"ST\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"L\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"O\"</span>: <span class=\"string\">\"k8s\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"OU\"</span>: <span class=\"string\">\"System\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述的配置中，<code>kube-apiserver</code>将提取<code>CN</code>作为客户端组件(kube-controller-manager)的用户名(system:kube-controller-manager)，<code>kube-apiserver</code>预定义的RBAC使用ClusterRoleBinding <code>system:kube-controller-manager</code>将<code>用户system:kube-controller-manager</code>与<code>ClusterRole system:kube-controller-manager</code>绑定。</p>\n<p>生成<code>kube-controller-manager</code>证书和私钥：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare controller-manager</span><br><span class=\"line\">ls controller-manager*</span><br><span class=\"line\">controller-manager.csr  controller-manager-key.pem  controller-manager.pem</span><br></pre></td></tr></table></figure>\n<p>将证书拷贝到需要部署<code>kube-controller-manager</code>的master节点<code>/etc/kubernetes/ssl</code>上备用。</p>\n<h4 id=\"创建kube-scheduler-证书\"><a href=\"#创建kube-scheduler-证书\" class=\"headerlink\" title=\"创建kube-scheduler`证书\"></a>创建kube-scheduler`证书</h4><p>与<code>kube-controller-manager</code>一样，<code>kube-scheduler</code>同样也需要<code>TLS</code>证书来访问<code>kube-apiserver</code>。此处不再赘述。直接上<code>kube-scheduler-csr.json</code>文件内容：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"CN\"</span>: <span class=\"string\">\"system:kube-scheduler\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"hosts\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"key\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"algo\"</span>: <span class=\"string\">\"rsa\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"size\"</span>: <span class=\"number\">2048</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"names\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"C\"</span>: <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"ST\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"L\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"O\"</span>: <span class=\"string\">\"k8s\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"OU\"</span>: <span class=\"string\">\"System\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code></code>kube-scheduler <code>将提取</code>CN作为客户端的用户名<code>,这里是</code>system:kube-scheduler<code>。 kube-apiserver 预定义的 RBAC 使用的 ClusterRoleBindings</code>system:kube-scheduler <code>将</code>用户system:kube-scheduler <code>与</code>ClusterRole system:kube-scheduler `绑定。</p>\n<p>生成<code>kube-scheduler</code>证书以及私钥：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare scheduler</span><br><span class=\"line\">ls scheduler*</span><br><span class=\"line\">scheduler.csr  scheduler-key.pem  scheduler.pem</span><br></pre></td></tr></table></figure>\n<p>将证书拷贝到需要部署<code>kube-scheduler</code>的master节点<code>/etc/kubernetes/ssl</code>上备用。</p>\n<p>至此，<code>master</code>节点上的证书生成就全部完成了，接下来是生成<code>worker</code>节点的证书，需要注意的是：生成<code>worker</code>证书是可选的，如果你使用<code>TLS Bootstarpping</code>那么你可以跳过以下步骤<code>worker</code>证书生成工作。直接转到部署的实际操作环节。关于<code>TLS</code>证书和<code>TLS Bootstarpping</code>认证方式的区别，后续考虑单独写一遍文章展开来讲。</p>\n<hr>\n<h4 id=\"创建kubelet证书\"><a href=\"#创建kubelet证书\" class=\"headerlink\" title=\"创建kubelet证书\"></a>创建<code>kubelet</code>证书</h4><p>拷贝<code>car.json</code>为<code>kubelet-csr.json</code>并做以下修改:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"CN\"</span>: <span class=\"string\">\"system:node:node\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"hosts\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"key\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"algo\"</span>: <span class=\"string\">\"rsa\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"size\"</span>: <span class=\"number\">2048</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"names\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"C\"</span>: <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"ST\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"L\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"O\"</span>: <span class=\"string\">\"system:nodes\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"OU\"</span>: <span class=\"string\">\"System\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"note warning\"><p><code>O</code>为用户组，kubernetes RBAC定义了ClusterRoleBinding将Group system:nodes和CLusterRole system:node关联起来。</p>\n<p>注意:在<code>kubernetes v1.8+</code>以上版本，将不会自动创建<code>binding</code>,因此我们后续需要手动创建绑定关系。</p></div>\n<p>生成<code>kubelet</code>证书和私钥：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kubelet-csr.json | cfssljson -bare kubelet</span><br><span class=\"line\">ls kubelet*</span><br><span class=\"line\">kubelet.csr  kubelet-csr.json  kubelet-key.pem  kubelet.pem</span><br></pre></td></tr></table></figure>\n<p>将生成的证书和秘钥拷贝到所有需要部署的worker节点上的<code>/etc/kubernetes/ssl</code>下备用。</p>\n<h4 id=\"创建kube-proxy证书\"><a href=\"#创建kube-proxy证书\" class=\"headerlink\" title=\"创建kube-proxy证书\"></a>创建<code>kube-proxy</code>证书</h4><p>拷贝<code>car.json</code>为<code>kube-proxy-csr.json</code>并做以下修改:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"CN\"</span>: <span class=\"string\">\"system:kube-proxy\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"hosts\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"key\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"algo\"</span>: <span class=\"string\">\"rsa\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"size\"</span>: <span class=\"number\">2048</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"names\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"C\"</span>: <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"ST\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"L\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"O\"</span>: <span class=\"string\">\"k8s\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"OU\"</span>: <span class=\"string\">\"System\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"note warning\"><p><code>CN</code> 指定该证书的 User为 system:kube-proxy。Kubernetes RBAC定义了ClusterRoleBinding将<code>system:kube-proxy用户</code>与<code>system:node-proxier 角色</code>绑定。system:node-proxier具有kube-proxy组件访问ApiServer的相关权限。</p></div>\n<p>生成<code>kube-proxy</code>证书和私钥：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy</span><br><span class=\"line\">ls kube-proxy*</span><br><span class=\"line\">kube-proxy.csr  kube-proxy-csr.json  kube-proxy-key.pem  kube-proxy.pem</span><br></pre></td></tr></table></figure>\n<p>将生成的证书和私钥拷贝到所有需要部署<code>worker</code>节点的<code>/etc/kubernetes/ssl</code>下备用。</p>\n<p>在完成证书分发之后，这样我们的证书相关的生成工作就完成了。接下来开始配置各个组件。</p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://kubernetes.io/docs/admin/authorization/rbac/\" target=\"_blank\" rel=\"noopener\">Using RBAC Authorization</a></li>\n<li><a href=\"https://wiki.shileizcc.com/display/KUB/Kubernetes+HA+Cluster+Build\" target=\"_blank\" rel=\"noopener\">Kubernetes HA Cluster Build</a></li>\n<li><a href=\"https://jimmysong.io/kubernetes-handbook/practice/install-kubernetes-on-centos.html\" target=\"_blank\" rel=\"noopener\">在CentOS上部署kubernetes集群</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p><img src=\"https://upload.wikimedia.org/wikipedia/commons/6/67/Kubernetes_logo.svg\" alt></p>\n<div class=\"note default\"><p>Kubernetes是Google开源的容器化集群管理系统，其提供的应用部署、扩展、服务发现等机制对于微服务化架构应用有着十分重要的作用。</p>\n<p>本系列文章基于以下版本来讲述如何使用二进制方式安装Kubernetes集群顺便讲述下踩坑的心路历程：</p>\n<ul>\n<li>Kubernetes version: <code>v1.10</code></li>\n<li>System: <code>CentOS Linux 7</code></li>\n<li>Kernel: <code>Linux 3.10.0</code></li>\n</ul></div>\n<p>Kubernetes系统的各个组件需要使用TLS证书对其通信加密以及授权认证，所以在部署之前我们需要先生成相关的TLS证书以便后续操作能够顺利进行。</p>","more":"<hr>\n<blockquote>\n<p>在后续安装部署中，将不使用kube-apiserver的HTTP非安全端口，所有组件都启用TLS双向认证通信。因此TLS证书配置是在安装配置Kubernetes系统中最容易出错和难于排查问题的一步，所以请务必耐心仔细。</p>\n</blockquote>\n<p>在开始前，为了模拟集群节点，我们假定需要在以下三台Linux主机上部署Kubernetes:</p>\n<ul>\n<li><code>10.138.148.161</code>：作为<code>master</code>节点</li>\n<li><code>10.138.196.180</code>：作为<code>Node</code>节点</li>\n<li><code>10.138.212.68</code>：作为<code>Node</code>节点</li>\n</ul>\n<div class=\"note danger\"><p>同一台主机上可以同时部署master和Node节点相关组件，即同时作为控制节点和工作节点，不过这么做可能导致master节点负载过高而失去响应进而导致整个集群出现无法预知的问题。</p></div>\n<hr>\n<h3 id=\"安装CFSSL证书生成工具\"><a href=\"#安装CFSSL证书生成工具\" class=\"headerlink\" title=\"安装CFSSL证书生成工具\"></a>安装<code>CFSSL</code>证书生成工具</h3><div class=\"note info\"><p>我们将使用<code>Cloudflare</code>的PKI工具集<a href=\"https://github.com/cloudflare/cfssl\" target=\"_blank\" rel=\"noopener\">cloudflare/cfssl</a>来生成集群所需要的各种<code>TLS</code>证书。</p></div>\n<p>执行以下命令直接下载二进制文件进行安装:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://pkg.cfssl.org/R1.2/cfssl_linux-amd64 -O cfssl </span><br><span class=\"line\">chmod +x cfssl </span><br><span class=\"line\">sudo mv cfssl /usr/<span class=\"built_in\">local</span>/bin</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64 -O cfssljson </span><br><span class=\"line\">chmod +x cfssljson </span><br><span class=\"line\">sudo mv cfssljson /usr/<span class=\"built_in\">local</span>/bin</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64 -O cfssl-certinfo </span><br><span class=\"line\">chmod +x cfssl-certinfo </span><br><span class=\"line\">sudo mv cfssl-certinfo /usr/<span class=\"built_in\">local</span>/bin</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">export</span> PATH=/usr/<span class=\"built_in\">local</span>/bin:<span class=\"variable\">$PATH</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"创建CA根证书（Certificate-Authority）\"><a href=\"#创建CA根证书（Certificate-Authority）\" class=\"headerlink\" title=\"创建CA根证书（Certificate Authority）\"></a>创建CA根证书（Certificate Authority）</h3><p>CA（Certificate Authority）是自签名的根证书，用来签名后续创建的其它 TLS 证书；<br>确认<code>CFSSL</code>工具安装成功之后，我们先通过<code>CFSSL</code>工具来创建模版配置json文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfssl <span class=\"built_in\">print</span>-defaults config &gt; config.json</span><br><span class=\"line\">cfssl <span class=\"built_in\">print</span>-defaults csr &gt; csr.json</span><br></pre></td></tr></table></figure>\n<h4 id=\"创建CA配置文件\"><a href=\"#创建CA配置文件\" class=\"headerlink\" title=\"创建CA配置文件\"></a>创建CA配置文件</h4><p>这将生成两个模版json文件，后续<code>CFSSL</code>将读取json文件内容并生成对应的<code>pem</code>文件。我们先复制<code>config.json</code>为<code>ca-config.json</code>文件并做如下修改:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"signing\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"default\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"expiry\"</span>: <span class=\"string\">\"99999h\"</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        <span class=\"attr\">\"profiles\"</span>: &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"kubernetes\"</span>: &#123;</span><br><span class=\"line\">                <span class=\"attr\">\"expiry\"</span>: <span class=\"string\">\"99999h\"</span>,</span><br><span class=\"line\">                <span class=\"attr\">\"usages\"</span>: [</span><br><span class=\"line\">                    <span class=\"string\">\"signing\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"key encipherment\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"server auth\"</span>,</span><br><span class=\"line\">                    <span class=\"string\">\"client auth\"</span></span><br><span class=\"line\">                ]</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"note warning\"><p><code>profiles</code>：可以定义多个profiles，分别指定不同的过期时间、使用场景等参数；后续在签名证书时使用某个特定的profile。</p>\n<p><code>signing</code>：表示该证书可用于签名(签发)其它证书，生成的 ca.pem 证书中 CA=TRUE。</p>\n<p><code>server auth</code>：表示`client可以用该 CA（生成的ca.pem） 对server提供的证书进行验证。</p>\n<p><code>client auth</code>：表示server可以用该CA(生成的ca.pem）对client提供的证书进行验证。</p></div>\n<h4 id=\"创建CA证书签名请求\"><a href=\"#创建CA证书签名请求\" class=\"headerlink\" title=\"创建CA证书签名请求\"></a>创建CA证书签名请求</h4><p>我们复制<code>csr.json</code>为<code>ca-csr.json</code>并做以下修改:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"CN\"</span>: <span class=\"string\">\"kubernetes\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"key\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"algo\"</span>: <span class=\"string\">\"rsa\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"size\"</span>: <span class=\"number\">2048</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"names\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"C\"</span>: <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"ST\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"L\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"O\"</span>: <span class=\"string\">\"k8s\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"OU\"</span>: <span class=\"string\">\"System\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"note warning\"><p><code>CN</code>(<code>Common Name</code>):后续<code>kube-apiserver</code>组件将从证书中提取该字段作为请求的用户名；</p>\n<p><code>O</code>(<code>Organtzation</code>):后续<code>kube-apiserver</code>组件将从证书中提取该字段作为请求的用户所属的用户组；</p></div>\n<h4 id=\"生成CA证书和私钥\"><a href=\"#生成CA证书和私钥\" class=\"headerlink\" title=\"生成CA证书和私钥\"></a>生成CA证书和私钥</h4><p>执行以下命令来生成CA证书和私钥：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfssl gencert -initca ca-csr.json | cfssljson -bare ca</span><br><span class=\"line\">ls ca*</span><br><span class=\"line\">ca.csr  ca-csr.json  ca-key.pem  ca.pem</span><br></pre></td></tr></table></figure>\n<p>这样，我们就生成了CA证书和私钥了，因为我们需要双向<code>TLS</code>认证，所以需要拷贝<code>ca-key.pem</code>和<code>ca.pem</code>到所有要部署的机器的<code>/etc/kubernetes/ssl</code>目录下备用。</p>\n<h3 id=\"创建kubernetes组件认证授权证书\"><a href=\"#创建kubernetes组件认证授权证书\" class=\"headerlink\" title=\"创建kubernetes组件认证授权证书\"></a>创建kubernetes组件认证授权证书</h3><p>因为我们准备部署的kubernetes组件是使用<code>TLS</code>双向认证的，包括<code>kube-apiserver</code>不打算使用HTTP端口，因此，我们需要生成以下的证书以供后续组件部署的时候备用：</p>\n<div class=\"note info\"><ul>\n<li><code>etcd</code>证书：etcd集群之间通信加密使用的<code>TLS</code>证书。</li>\n<li><code>kube-apiserver</code>证书：配置<code>kube-apiserver</code>组件的证书。</li>\n<li><code>kube-controller-manager</code>证书：用于和<code>kube-apiserver</code>通信认证的证书。</li>\n<li><code>kube-scheduler</code>证书：用于和<code>kube-apiserver</code>通信认证的证书。</li>\n<li><code>kubelet</code>证书【可选,非必需】：用于和<code>kube-apiserver</code>通信认证的证书，如果使用<code>TLS Bootstarp</code>认证方式，将没有必要配置。</li>\n<li><code>kube-proxy</code>证书【可选,非必需】：用于和<code>kube-apiserver</code>通信认证的证书，如果使用<code>TLS Bootstarp</code>认证方式，将没有必要配置。</li>\n</ul></div>\n<p>下面我们将逐个创建对应的<code>TLS</code>证书，并做相应的简短说明：</p>\n<h4 id=\"创建etcd证书：\"><a href=\"#创建etcd证书：\" class=\"headerlink\" title=\"创建etcd证书：\"></a>创建<code>etcd</code>证书：</h4><p>首选我们创建<code>etcd</code>证书签名请求(CSR)，拷贝<code>csr.json</code>为<code>etcd-csr.json</code>并做以下修改:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"CN\"</span>: <span class=\"string\">\"etcd\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"hosts\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"10.138.212.68\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"10.138.196.180\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"10.138.148.161\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"master\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"node1\"</span>,</span><br><span class=\"line\">        <span class=\"string\">\"node2\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">  <span class=\"attr\">\"key\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"algo\"</span>: <span class=\"string\">\"rsa\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"size\"</span>: <span class=\"number\">2048</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"names\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"C\"</span>: <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"ST\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"L\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"O\"</span>: <span class=\"string\">\"k8s\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"OU\"</span>: <span class=\"string\">\"System\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"note danger\"><p>此处需要指定<code>host</code>字段的值，该值为所有需要部署etcd节点的<code>ip 域名 或者 hostname</code>，etcd需要使用<code>Subject Alternative Name（SAN）</code>来校验集群以及防止滥用。如果你不清楚应该使用哪个ip，默认情况下使用<code>ip a</code>查看<code>eth0</code>即可。此处指定的<code>ip</code>与后续指定的<code>etcd的systemd</code>配置<code>initial-cluster</code>相关。</p>\n<p>相关阅读: <a href=\"https://github.com/coreos/etcd/issues/2056\" target=\"_blank\" rel=\"noopener\">Option to accept TLS client certificates even if they lack correct Subject Alternative Names</a></p></div>\n<p>生成<code>etcd</code>证书和私钥：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes etcd-csr.json | cfssljson -bare etcd</span><br><span class=\"line\">ls etcd*</span><br><span class=\"line\">etcd.csr  etcd-csr.json  etcd-key.pem etcd.pem</span><br></pre></td></tr></table></figure>\n<p>将生成的<code>etch-key.pem</code>和<code>etcd.pem</code>拷贝到所有需要部署<code>etcd</code>集群的服务器<code>/etc/etcd/ssl</code>目录下备用。</p>\n<h4 id=\"创建kube-apiserver证书\"><a href=\"#创建kube-apiserver证书\" class=\"headerlink\" title=\"创建kube-apiserver证书\"></a>创建<code>kube-apiserver</code>证书</h4><p>创建<code>kube-apiserver</code>证书签名请求配置文件，拷贝<code>csr.json</code>为<code>kubernetes-csr.json</code>并做以下修改：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">\"CN\"</span>: <span class=\"string\">\"kubernetes\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"hosts\"</span>: [</span><br><span class=\"line\">      <span class=\"string\">\"127.0.0.1\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"10.138.212.68\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"10.138.196.180\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"10.138.148.161\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"10.254.0.1\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"kubernetes\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"kubernetes.default\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"kubernetes.default.svc\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"kubernetes.default.svc.cluster\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"kubernetes.default.svc.cluster.local\"</span></span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"attr\">\"key\"</span>: &#123;</span><br><span class=\"line\">        <span class=\"attr\">\"algo\"</span>: <span class=\"string\">\"rsa\"</span>,</span><br><span class=\"line\">        <span class=\"attr\">\"size\"</span>: <span class=\"number\">2048</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">\"names\"</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">\"C\"</span>: <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"ST\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"L\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"O\"</span>: <span class=\"string\">\"k8s\"</span>,</span><br><span class=\"line\">            <span class=\"attr\">\"OU\"</span>: <span class=\"string\">\"System\"</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"note warning\"><p>此处指定了<code>host</code>字段来表示授权使用该证书的<code>ip或域名</code>列表，因此上述配置文件指定了要部署的kubernetes三台服务器ip（实际上只需要指定打算部署master节点的ip即可）以及<code>kube-apiserver</code>注册的名为<code>kubernetes</code>服务的服务ip（一般默认为后续配置<code>kube-apiserve</code>组件的时候指定的<code>—service-cluster-ip-range</code>网段的第一个ip。）如果你不清楚怎么操作，可以留空<code>host</code>字段。</p>\n<p>如果你指定了<code>host</code>字段，这里如果有 <code>VIP</code> 的，也是需要填写的。</p></div>\n<p>生成<code>kube-apiserver</code>证书和私钥：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kubernetes-csr.json | cfssljson -bare apiserver</span><br><span class=\"line\">ls apiserver*</span><br><span class=\"line\">apiserver.csr  apiserver-key.pem  apiserver.pem</span><br></pre></td></tr></table></figure>\n<p>我们将该证书拷贝到需要部署到<code>master</code>节点上的<code>/etc/kubernetes/ssl</code>上备用。</p>\n<div class=\"note info\"><p>因为我们master节点的组件之间的通信使用<code>非HTTP</code>的安全端口，所以同样也需要<code>TLS</code>认证授权，因此我们也需要配置<code>kube-controller-manager</code>和<code>kube-scheduler</code>的证书来供这两个组件访问<code>kube-apiserver</code>.如果你的集群master节点组件使用HTTP非安全端口通信，那么可以不需要配置这两个证书。</p></div>\n<h4 id=\"创建kube-controller-manager证书\"><a href=\"#创建kube-controller-manager证书\" class=\"headerlink\" title=\"创建kube-controller-manager证书\"></a>创建<code>kube-controller-manager</code>证书</h4><p>复制<code>car.json</code>为<code>kube-controller-manager-csr.json</code>并做以下修改：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"CN\"</span>: <span class=\"string\">\"system:kube-controller-manager\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"hosts\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"key\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"algo\"</span>: <span class=\"string\">\"rsa\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"size\"</span>: <span class=\"number\">2048</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"names\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"C\"</span>: <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"ST\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"L\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"O\"</span>: <span class=\"string\">\"k8s\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"OU\"</span>: <span class=\"string\">\"System\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上述的配置中，<code>kube-apiserver</code>将提取<code>CN</code>作为客户端组件(kube-controller-manager)的用户名(system:kube-controller-manager)，<code>kube-apiserver</code>预定义的RBAC使用ClusterRoleBinding <code>system:kube-controller-manager</code>将<code>用户system:kube-controller-manager</code>与<code>ClusterRole system:kube-controller-manager</code>绑定。</p>\n<p>生成<code>kube-controller-manager</code>证书和私钥：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-controller-manager-csr.json | cfssljson -bare controller-manager</span><br><span class=\"line\">ls controller-manager*</span><br><span class=\"line\">controller-manager.csr  controller-manager-key.pem  controller-manager.pem</span><br></pre></td></tr></table></figure>\n<p>将证书拷贝到需要部署<code>kube-controller-manager</code>的master节点<code>/etc/kubernetes/ssl</code>上备用。</p>\n<h4 id=\"创建kube-scheduler-证书\"><a href=\"#创建kube-scheduler-证书\" class=\"headerlink\" title=\"创建kube-scheduler`证书\"></a>创建kube-scheduler`证书</h4><p>与<code>kube-controller-manager</code>一样，<code>kube-scheduler</code>同样也需要<code>TLS</code>证书来访问<code>kube-apiserver</code>。此处不再赘述。直接上<code>kube-scheduler-csr.json</code>文件内容：</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"CN\"</span>: <span class=\"string\">\"system:kube-scheduler\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"hosts\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"key\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"algo\"</span>: <span class=\"string\">\"rsa\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"size\"</span>: <span class=\"number\">2048</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"names\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"C\"</span>: <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"ST\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"L\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"O\"</span>: <span class=\"string\">\"k8s\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"OU\"</span>: <span class=\"string\">\"System\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code></code>kube-scheduler <code>将提取</code>CN作为客户端的用户名<code>,这里是</code>system:kube-scheduler<code>。 kube-apiserver 预定义的 RBAC 使用的 ClusterRoleBindings</code>system:kube-scheduler <code>将</code>用户system:kube-scheduler <code>与</code>ClusterRole system:kube-scheduler `绑定。</p>\n<p>生成<code>kube-scheduler</code>证书以及私钥：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-scheduler-csr.json | cfssljson -bare scheduler</span><br><span class=\"line\">ls scheduler*</span><br><span class=\"line\">scheduler.csr  scheduler-key.pem  scheduler.pem</span><br></pre></td></tr></table></figure>\n<p>将证书拷贝到需要部署<code>kube-scheduler</code>的master节点<code>/etc/kubernetes/ssl</code>上备用。</p>\n<p>至此，<code>master</code>节点上的证书生成就全部完成了，接下来是生成<code>worker</code>节点的证书，需要注意的是：生成<code>worker</code>证书是可选的，如果你使用<code>TLS Bootstarpping</code>那么你可以跳过以下步骤<code>worker</code>证书生成工作。直接转到部署的实际操作环节。关于<code>TLS</code>证书和<code>TLS Bootstarpping</code>认证方式的区别，后续考虑单独写一遍文章展开来讲。</p>\n<hr>\n<h4 id=\"创建kubelet证书\"><a href=\"#创建kubelet证书\" class=\"headerlink\" title=\"创建kubelet证书\"></a>创建<code>kubelet</code>证书</h4><p>拷贝<code>car.json</code>为<code>kubelet-csr.json</code>并做以下修改:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"CN\"</span>: <span class=\"string\">\"system:node:node\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"hosts\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"key\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"algo\"</span>: <span class=\"string\">\"rsa\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"size\"</span>: <span class=\"number\">2048</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"names\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"C\"</span>: <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"ST\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"L\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"O\"</span>: <span class=\"string\">\"system:nodes\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"OU\"</span>: <span class=\"string\">\"System\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"note warning\"><p><code>O</code>为用户组，kubernetes RBAC定义了ClusterRoleBinding将Group system:nodes和CLusterRole system:node关联起来。</p>\n<p>注意:在<code>kubernetes v1.8+</code>以上版本，将不会自动创建<code>binding</code>,因此我们后续需要手动创建绑定关系。</p></div>\n<p>生成<code>kubelet</code>证书和私钥：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kubelet-csr.json | cfssljson -bare kubelet</span><br><span class=\"line\">ls kubelet*</span><br><span class=\"line\">kubelet.csr  kubelet-csr.json  kubelet-key.pem  kubelet.pem</span><br></pre></td></tr></table></figure>\n<p>将生成的证书和秘钥拷贝到所有需要部署的worker节点上的<code>/etc/kubernetes/ssl</code>下备用。</p>\n<h4 id=\"创建kube-proxy证书\"><a href=\"#创建kube-proxy证书\" class=\"headerlink\" title=\"创建kube-proxy证书\"></a>创建<code>kube-proxy</code>证书</h4><p>拷贝<code>car.json</code>为<code>kube-proxy-csr.json</code>并做以下修改:</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">\"CN\"</span>: <span class=\"string\">\"system:kube-proxy\"</span>,</span><br><span class=\"line\">  <span class=\"attr\">\"hosts\"</span>: [],</span><br><span class=\"line\">  <span class=\"attr\">\"key\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">\"algo\"</span>: <span class=\"string\">\"rsa\"</span>,</span><br><span class=\"line\">    <span class=\"attr\">\"size\"</span>: <span class=\"number\">2048</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">\"names\"</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"attr\">\"C\"</span>: <span class=\"string\">\"CN\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"ST\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"L\"</span>: <span class=\"string\">\"Shanghai\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"O\"</span>: <span class=\"string\">\"k8s\"</span>,</span><br><span class=\"line\">      <span class=\"attr\">\"OU\"</span>: <span class=\"string\">\"System\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<div class=\"note warning\"><p><code>CN</code> 指定该证书的 User为 system:kube-proxy。Kubernetes RBAC定义了ClusterRoleBinding将<code>system:kube-proxy用户</code>与<code>system:node-proxier 角色</code>绑定。system:node-proxier具有kube-proxy组件访问ApiServer的相关权限。</p></div>\n<p>生成<code>kube-proxy</code>证书和私钥：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes kube-proxy-csr.json | cfssljson -bare kube-proxy</span><br><span class=\"line\">ls kube-proxy*</span><br><span class=\"line\">kube-proxy.csr  kube-proxy-csr.json  kube-proxy-key.pem  kube-proxy.pem</span><br></pre></td></tr></table></figure>\n<p>将生成的证书和私钥拷贝到所有需要部署<code>worker</code>节点的<code>/etc/kubernetes/ssl</code>下备用。</p>\n<p>在完成证书分发之后，这样我们的证书相关的生成工作就完成了。接下来开始配置各个组件。</p>\n<p>参考资料：</p>\n<ul>\n<li><a href=\"https://kubernetes.io/docs/admin/authorization/rbac/\" target=\"_blank\" rel=\"noopener\">Using RBAC Authorization</a></li>\n<li><a href=\"https://wiki.shileizcc.com/display/KUB/Kubernetes+HA+Cluster+Build\" target=\"_blank\" rel=\"noopener\">Kubernetes HA Cluster Build</a></li>\n<li><a href=\"https://jimmysong.io/kubernetes-handbook/practice/install-kubernetes-on-centos.html\" target=\"_blank\" rel=\"noopener\">在CentOS上部署kubernetes集群</a></li>\n</ul>"},{"title":"Linux 学习笔记-软件包管理","date":"2015-04-24T02:06:02.000Z","_content":"\n\n\n# RPM软件包管理\n\n### rpm包管理查询\n参数选项:\n- `-a` 查询所有已安装的软件包\n- `-f` 查询文件所属软件包\n- `-p` 查询软件包\n- `-i` 显示软件包信息\n- `-l` 显示软件包中的文件列表\n- `-d` 显示被标注为文档的文件列表\n- `-c` 显示被标注为配置文件的文件列表\n\n<!--more-->\n\n>rpm查询应用案列:\n\n\n 0. 查看软件是否被安装:\n\n>`rpm -q xxxx软件包名`将显示指定的软件包名是否被安装。\n>以下示例将显示`sudo`命令是否被安装:\n\n```bash\n# rpm -q sudo\n```\n\n>`-qa`将会显示所有被安装的软件包，从中过滤指定的软件包，可以使用管道组合命令:\n>` rpm -qa | grep xxxx软件包名`来查看指定软件包是否被安装。\n\n以下示例将查询`sudo`命令是否被安装:\n\n```bash\n# rpm -qa | grep sudo\n```\n\n\n 1. 查询文件隶属的软件包: \n>`rpm --qf xxxx软件包名` 其中`f`代表file的意思。\n\n以下示例为查询`/etc/services`文件所属的软件包:\n\n```bash\n# rpm -qf /etc/services \n```\n 2. 查询软件包信息:\n>`rpm -qi xxx软件包名`查询已安装包信息\n>`rpm -qip xxxx.rpm`查询指定rpm软件包信息（未安装包信息）\n\n以下示例为查询`sudo`命令软件包的信息:\n\n```bash\n# rpm -qi sudo \n```\n 3. 查询软件包安装文件：\n>`rpm -ql xxx软件包名`查询已安装软件包安装了哪些文件\n>`rpm -qlp xxxx.rpm`查询指定的rpm软件包将会安装哪些文件（未安装包安装将会安装的文件） \n\n以下示例为显示`sudo`命令软件包安装的文件:\n\n```bash\n# rpm -ql sudo\n```\n 4. 查询软件包帮助文档:\n>`rpm -qd xxx软件包名` 查询已安装的软件包安装的帮助文档\n>`rpm -qdp xxx.rpm` 查询指定rpm软件包将会安装的帮助文档（未安装软件包将会安装的帮助文档）\n\n以下示例将会显示`sudo`命令安装的帮助文档:\n\n```bash\n# rpm -qd sudo\n```\n 5. 查询软件包配置文件： \n>`rpm -qc xxxx软件包名` 查询已安装软件包包含的配置文件\n>`rpmm -qcp xxxx.rpm` 查询指定rpm软件包将会安装的配置文件（为安装软件包将会安装的配置文件）\n\n以下示例将会显示`sudo`命令安装的配置文件:\n\n```bash\n# rpm -qc sudo\n```\n\n\n学会这些，可以查看linux系统中的文件隶属于那个软件包，再查看该软件包的信息，以确定该软件包是否需要来确定软件包的开启与否。来达到服务器的精简不必要的软件运行以降低负载。\n\n### rpm软件包的安装、卸载\n\n#### 卸载软件包:\n```bash\n#  rpm -e xxx软件包名\n```\n>其中`xxx软件包名`为软件包名称。\n>注意:如果其它软件包有依赖关系，卸载时会产生提示信息。可以使用--nodeps强行卸载。\n\n以下为强制卸载`samba`软件包 示例:\n\n```bash\n# rpm -e --nodeps samba\n```\n\n#### 安装本地rpm软件包:\n```bash\n# rpm -ivh xxxxxxxxx.rpm\n```\n>其中`-ivh`代表的意思为:\n>- i :安装（install）\n>- v :显示安装过程中的详细信息\n>- h :用`#`号显示安装进度（hash）\n>- U :用大写的U来表示升级安装（update）\n\n升级安装示例:\n```bash\n# rpm -Uvh xxxxx.rpm\n```\n\n如果想忽略进度和安装信息，直接安装可使用:\n\n```bsah\n# rpm -i xxxxxxxxx.rpm\n```\n#### 安装本地软件包附带参数说明:\n\n`--excludedocs`\n>不安装软件包中的文档文件(如果你已经足够熟悉这个软件包并且服务器空间紧张的话）\n\n以下为示例:\n\n```bash\n# rpm -ivh --excludedocs xxxxx.rpm\n```\n\n`--prefix PATH`\n>将软件包安装到由`PATH`指定的路径下,通常不建议这样做或者说这样指定无效果。因为大部分rpm软件包在打包的时候开发人员指定了安装时软件包文件存放的位置了。\n\n以下为示例:\n\n```bash\n# rpm -ivh --prefix=/usr/xiamo/ xxxx.rpm\n```\n\n`--test`\n>只对安装进行测试，并不实际安装。实际环境中比较有用的一个参数，可以测试安装软件包需要哪些依赖需要是否存在安装兼容性问题等等。\n\n以下为示例:\n\n```bash\n# rpm -ivh --test xxxx.rpm\n```\n\n`--replacepkgs`\n>覆盖安装\n>软件包已经被安装,如果要覆盖安装该软件包，例如某个软件包的某个文件丢失，就可以覆盖安装。可以再命令行上使用该参数.\n\n以下为示例:\n\n```bash\n# rpm -ivh --replacepkgs xxxx.rpm\n```\n\n`--replacefiles`\n>文件冲突\n>如果要安装的软件包中有一个文件已在安装其它软件包时安装，会出现错误信息，要想让rpm忽略该错误信息，请使用命令行选项。\n\n以下为示例:\n\n```bash\n# rpm -ivh --replacefiles xxxx.rpm\n```\n\n`--nodeps`\n>未解决依赖关系\n>rpm软件包可能依赖于其它软件包，在安装了特定的软件包之后才能安装该软件包。你必须安装完所有依赖的软件包，才能解决这个问题。强制安装使用该选项。事实上，这样做安装好的软件包十有八九是无法运行的。这也是rpm比较头疼的地方。还好yum解决了这个问题:)\n\n以下为示例:\n\n```bash\n# rpm -ivh --nodeps xxx.rpm\n```\n### rpm软件包校验\n\n>在linux日常应用中，可能其它管理员误操作将某个软件包的文件更改了，这个时候，为了查看哪些文件被更改，就必须校验软件包是否被更改。\n>`rpm -V 软件名称`将会校验指定的已安装的软件包。\n>- 如果软件包没有被做过任何修改，那么执行该命令将不会有任何提示信息。\n>- 如果软件包被改动过，那么将会出现提示信息。\n\n以下为提示信息代表的含义:\n\n- `5` 文件的md5校验值\n- `S` 文件大小\n- `L` 链接文件\n- `T` 文件的创建时间\n- `D` 设备文件按\n- `U` 文件的用户\n- `G` 文件的用户组\n- `M` 文件的权限\n\n### rpm软件包文件提取\n\n- 解压所有文件到当前目录\n```bash\n# rpm2cpio xxxxxx.rpm | cpio -idv\n```\n\n- 解压指定文件到当前目录\n\n>以下命令将指定的rpm解包，并将其中的的`/etc/inittab`文件提取到当前目录得`etc`目录下。（当前目录的`etc`目录下将会有一个`inittab`文件。)\n```bash\n# rpm2cpio xxxx.rpm | cpio -idv ./etc/inittab\n```\n\n\n## yum软件包管理工具\n\n应用yum包管理工具的好处:\n\n> - 自动解决软件包依赖关系\n> - 方便的软件包升级\n> - 软件包可信任\n\n缺点:\n> -  比rpm慢（需要读取yum源）\n> -  需要联网\n\n### yum软件包常用选项:\n\n- 安装\n>`yum install xxx软件包名`将会在yum源查找并安装该软件包。\n\n以下为安装`sudo`命令示例:\n```bash\n# yum install sudo\n```\n- 检测升级 \n>`yum check-update xxxx软件包名`将会在yum源查询指定软件是否有更新可用。(不会安装更新）\n\n以下为检测`sudo`命令是否有更新可用示例:\n```bash\n# yum check-update sudo\n```\n><font color=red>如果不指定软件包名，将检测升级所有软件包。（只检测，不进行升级操作)</font>\n\n以下为检测所有安装的软件包是否有更新可用:\n```bash\n# yum check-update\n```\n- 升级\n>`yum update xxx软件包名`将会更新升级指定的软件包（如果有更新可用的话），因此次命令最好配合`yum check-update`使用。\n\n以下为升级安装`sudo`软件包示例：\n```bash\n# yum update sudo\n```\n- 软件包查询\n>`yum list`列出yum源上所有的软件包,并标注哪些软件包已安装，哪些软件包可更新。（此命令不时列出系统安装的软件包哦，而是yum源上的。所有一般不建议直接这样执行。可以使用管道配合`more`命令来分页查看。\n\n以下为使用示例:\n```bash\n# yum list\n# yum list | more\n```\n列出yum源上指定的软件包可以管道配合`grep`，以下为示例:\n\n```bash\n# yum list | grep sudo\n```\n- 软件包信息\n>`yum info xxx软件包名` 列出软件包的详细信息以及软件包的作用介绍。\n\n以下示例将会列出`sudo`命令的详细说明,以及该软件包的作用介绍:\n```bash\n# yum info sudo\n```\n- 卸载\n>`yum remove xxxx软件名` 卸载指定的软件包\n\n以下示例将会卸载`sudo`命令:\n```bash\n# yum remove sudo\n```\n- 帮助\n>查看更多的关系yum的帮助信息,来更好的了解yum软件包管理机制并且灵活的使用。\n\n示例:\n```bash\n# yum --help\n# man yum\n```\n\n## 源代码包安装\n\n>源码安装不同于二进制包安装，它有着很高的自由度。可以个性化定制。但是也往往存在着缺少编译器而无法正常编译安装以及安装之后配置文件的管理问题。\n\n应用举例:\n>此处用`proftpd`举例。\n\n```bash\n# tar -zxvf proftpd-1.3.3d.tar.gz (解压源码包）\n# cd proftpf-1.3.3d （进入源码包目录）\n# ./config --prefix=/usr/local/proftpd （配置安装路径）\n# make (编译）\n# make install  （安装）\n```\n>软件下载地址: [www.proftpd.org](http://www.proftpd.org)\n\n其中，配置安装路径是非常必要的，因为源码安装不同于二进制安装。通常没有统一的卸载命令。存在管理不方便以及卸载不干净等问题。因此需要统一指定安装目录。习惯性的，将`/usr/local`设置为软件的安装目录，后面再跟上软件包的名称建立安装文件夹。\n\n\n## 脚本安装\n\n>过于简单，就不解释了。。。\n\n## APT软件包管理\n\n- 搜索软件包\n>`apt-cache search xxx软件包名`将会搜索指定的软件包，并列出其所有的相关软件的信息。类似于`yum list`\n\n以下示例将会列出`sudo`命令的软件包:\n```bash\n# apt-cache search sudo\n```\n- 软件包信息\n>`apt-cache show xxx软件包名`将会显示软件包的详细信息，并列出其作用介绍。类比于`yum info`。\n\n以下示例将会显示`sudo`软件有关详细信息:\n```bash\n# apt-cache show sudo\n```\n- 安装\n>` apt-get install xxx软件包名`将会安装制定的软件包。\n>- `reinstall`参数替换install将会覆盖安装制定软件包。\n>- `-f`参数将会修复安装制定软件包。\n\n以下示例将会安装、覆盖安装、修复安装`sudo`：\n```bash\n# apt-get install sudo (安装）\n# apt-get reinstall sudo （覆盖安装）\n# apt-get install -f sudo （修复安装）\n```\n- 删除卸载\n>`apt-get remove xxx软件包名`将会卸载指定的软件包。\n>- `autoremove`将会自动卸载依赖关系软件包（连同主程序的依赖一起卸载）\n>- `--purge`连同软件的配置文件一起删除（不保留配置文件）。\n\n以下示例将会卸载、连同依赖一起卸载、不保留配置文件卸载`sudo`：\n```bash\n# apt-get remove sudo (卸载）\n# apt-get autoremove sudo （连同卸载sudo的依赖）\n# apt-get remove --purge （卸载sudo以及配置文件）\n```\n- 更新软件源\n>`apt-get update`更新软件源\n\n示例:\n```bash\n# apt-get update\n```\n- 更新已安装软件包\n>` apt-get upgrade`将会对已经安装的软件包进行更新。\n\n示例:\n```bash\n# apt-get upgrade\n```","source":"_posts/Linux-学习笔记-软件包管理.md","raw":"title: \"Linux 学习笔记-软件包管理\"\ndate: 2015-04-24 10:06:02\ncategories: 学习笔记\ntags: \n- linux\n- rpm\n- apt\n- yum\n---\n\n\n\n# RPM软件包管理\n\n### rpm包管理查询\n参数选项:\n- `-a` 查询所有已安装的软件包\n- `-f` 查询文件所属软件包\n- `-p` 查询软件包\n- `-i` 显示软件包信息\n- `-l` 显示软件包中的文件列表\n- `-d` 显示被标注为文档的文件列表\n- `-c` 显示被标注为配置文件的文件列表\n\n<!--more-->\n\n>rpm查询应用案列:\n\n\n 0. 查看软件是否被安装:\n\n>`rpm -q xxxx软件包名`将显示指定的软件包名是否被安装。\n>以下示例将显示`sudo`命令是否被安装:\n\n```bash\n# rpm -q sudo\n```\n\n>`-qa`将会显示所有被安装的软件包，从中过滤指定的软件包，可以使用管道组合命令:\n>` rpm -qa | grep xxxx软件包名`来查看指定软件包是否被安装。\n\n以下示例将查询`sudo`命令是否被安装:\n\n```bash\n# rpm -qa | grep sudo\n```\n\n\n 1. 查询文件隶属的软件包: \n>`rpm --qf xxxx软件包名` 其中`f`代表file的意思。\n\n以下示例为查询`/etc/services`文件所属的软件包:\n\n```bash\n# rpm -qf /etc/services \n```\n 2. 查询软件包信息:\n>`rpm -qi xxx软件包名`查询已安装包信息\n>`rpm -qip xxxx.rpm`查询指定rpm软件包信息（未安装包信息）\n\n以下示例为查询`sudo`命令软件包的信息:\n\n```bash\n# rpm -qi sudo \n```\n 3. 查询软件包安装文件：\n>`rpm -ql xxx软件包名`查询已安装软件包安装了哪些文件\n>`rpm -qlp xxxx.rpm`查询指定的rpm软件包将会安装哪些文件（未安装包安装将会安装的文件） \n\n以下示例为显示`sudo`命令软件包安装的文件:\n\n```bash\n# rpm -ql sudo\n```\n 4. 查询软件包帮助文档:\n>`rpm -qd xxx软件包名` 查询已安装的软件包安装的帮助文档\n>`rpm -qdp xxx.rpm` 查询指定rpm软件包将会安装的帮助文档（未安装软件包将会安装的帮助文档）\n\n以下示例将会显示`sudo`命令安装的帮助文档:\n\n```bash\n# rpm -qd sudo\n```\n 5. 查询软件包配置文件： \n>`rpm -qc xxxx软件包名` 查询已安装软件包包含的配置文件\n>`rpmm -qcp xxxx.rpm` 查询指定rpm软件包将会安装的配置文件（为安装软件包将会安装的配置文件）\n\n以下示例将会显示`sudo`命令安装的配置文件:\n\n```bash\n# rpm -qc sudo\n```\n\n\n学会这些，可以查看linux系统中的文件隶属于那个软件包，再查看该软件包的信息，以确定该软件包是否需要来确定软件包的开启与否。来达到服务器的精简不必要的软件运行以降低负载。\n\n### rpm软件包的安装、卸载\n\n#### 卸载软件包:\n```bash\n#  rpm -e xxx软件包名\n```\n>其中`xxx软件包名`为软件包名称。\n>注意:如果其它软件包有依赖关系，卸载时会产生提示信息。可以使用--nodeps强行卸载。\n\n以下为强制卸载`samba`软件包 示例:\n\n```bash\n# rpm -e --nodeps samba\n```\n\n#### 安装本地rpm软件包:\n```bash\n# rpm -ivh xxxxxxxxx.rpm\n```\n>其中`-ivh`代表的意思为:\n>- i :安装（install）\n>- v :显示安装过程中的详细信息\n>- h :用`#`号显示安装进度（hash）\n>- U :用大写的U来表示升级安装（update）\n\n升级安装示例:\n```bash\n# rpm -Uvh xxxxx.rpm\n```\n\n如果想忽略进度和安装信息，直接安装可使用:\n\n```bsah\n# rpm -i xxxxxxxxx.rpm\n```\n#### 安装本地软件包附带参数说明:\n\n`--excludedocs`\n>不安装软件包中的文档文件(如果你已经足够熟悉这个软件包并且服务器空间紧张的话）\n\n以下为示例:\n\n```bash\n# rpm -ivh --excludedocs xxxxx.rpm\n```\n\n`--prefix PATH`\n>将软件包安装到由`PATH`指定的路径下,通常不建议这样做或者说这样指定无效果。因为大部分rpm软件包在打包的时候开发人员指定了安装时软件包文件存放的位置了。\n\n以下为示例:\n\n```bash\n# rpm -ivh --prefix=/usr/xiamo/ xxxx.rpm\n```\n\n`--test`\n>只对安装进行测试，并不实际安装。实际环境中比较有用的一个参数，可以测试安装软件包需要哪些依赖需要是否存在安装兼容性问题等等。\n\n以下为示例:\n\n```bash\n# rpm -ivh --test xxxx.rpm\n```\n\n`--replacepkgs`\n>覆盖安装\n>软件包已经被安装,如果要覆盖安装该软件包，例如某个软件包的某个文件丢失，就可以覆盖安装。可以再命令行上使用该参数.\n\n以下为示例:\n\n```bash\n# rpm -ivh --replacepkgs xxxx.rpm\n```\n\n`--replacefiles`\n>文件冲突\n>如果要安装的软件包中有一个文件已在安装其它软件包时安装，会出现错误信息，要想让rpm忽略该错误信息，请使用命令行选项。\n\n以下为示例:\n\n```bash\n# rpm -ivh --replacefiles xxxx.rpm\n```\n\n`--nodeps`\n>未解决依赖关系\n>rpm软件包可能依赖于其它软件包，在安装了特定的软件包之后才能安装该软件包。你必须安装完所有依赖的软件包，才能解决这个问题。强制安装使用该选项。事实上，这样做安装好的软件包十有八九是无法运行的。这也是rpm比较头疼的地方。还好yum解决了这个问题:)\n\n以下为示例:\n\n```bash\n# rpm -ivh --nodeps xxx.rpm\n```\n### rpm软件包校验\n\n>在linux日常应用中，可能其它管理员误操作将某个软件包的文件更改了，这个时候，为了查看哪些文件被更改，就必须校验软件包是否被更改。\n>`rpm -V 软件名称`将会校验指定的已安装的软件包。\n>- 如果软件包没有被做过任何修改，那么执行该命令将不会有任何提示信息。\n>- 如果软件包被改动过，那么将会出现提示信息。\n\n以下为提示信息代表的含义:\n\n- `5` 文件的md5校验值\n- `S` 文件大小\n- `L` 链接文件\n- `T` 文件的创建时间\n- `D` 设备文件按\n- `U` 文件的用户\n- `G` 文件的用户组\n- `M` 文件的权限\n\n### rpm软件包文件提取\n\n- 解压所有文件到当前目录\n```bash\n# rpm2cpio xxxxxx.rpm | cpio -idv\n```\n\n- 解压指定文件到当前目录\n\n>以下命令将指定的rpm解包，并将其中的的`/etc/inittab`文件提取到当前目录得`etc`目录下。（当前目录的`etc`目录下将会有一个`inittab`文件。)\n```bash\n# rpm2cpio xxxx.rpm | cpio -idv ./etc/inittab\n```\n\n\n## yum软件包管理工具\n\n应用yum包管理工具的好处:\n\n> - 自动解决软件包依赖关系\n> - 方便的软件包升级\n> - 软件包可信任\n\n缺点:\n> -  比rpm慢（需要读取yum源）\n> -  需要联网\n\n### yum软件包常用选项:\n\n- 安装\n>`yum install xxx软件包名`将会在yum源查找并安装该软件包。\n\n以下为安装`sudo`命令示例:\n```bash\n# yum install sudo\n```\n- 检测升级 \n>`yum check-update xxxx软件包名`将会在yum源查询指定软件是否有更新可用。(不会安装更新）\n\n以下为检测`sudo`命令是否有更新可用示例:\n```bash\n# yum check-update sudo\n```\n><font color=red>如果不指定软件包名，将检测升级所有软件包。（只检测，不进行升级操作)</font>\n\n以下为检测所有安装的软件包是否有更新可用:\n```bash\n# yum check-update\n```\n- 升级\n>`yum update xxx软件包名`将会更新升级指定的软件包（如果有更新可用的话），因此次命令最好配合`yum check-update`使用。\n\n以下为升级安装`sudo`软件包示例：\n```bash\n# yum update sudo\n```\n- 软件包查询\n>`yum list`列出yum源上所有的软件包,并标注哪些软件包已安装，哪些软件包可更新。（此命令不时列出系统安装的软件包哦，而是yum源上的。所有一般不建议直接这样执行。可以使用管道配合`more`命令来分页查看。\n\n以下为使用示例:\n```bash\n# yum list\n# yum list | more\n```\n列出yum源上指定的软件包可以管道配合`grep`，以下为示例:\n\n```bash\n# yum list | grep sudo\n```\n- 软件包信息\n>`yum info xxx软件包名` 列出软件包的详细信息以及软件包的作用介绍。\n\n以下示例将会列出`sudo`命令的详细说明,以及该软件包的作用介绍:\n```bash\n# yum info sudo\n```\n- 卸载\n>`yum remove xxxx软件名` 卸载指定的软件包\n\n以下示例将会卸载`sudo`命令:\n```bash\n# yum remove sudo\n```\n- 帮助\n>查看更多的关系yum的帮助信息,来更好的了解yum软件包管理机制并且灵活的使用。\n\n示例:\n```bash\n# yum --help\n# man yum\n```\n\n## 源代码包安装\n\n>源码安装不同于二进制包安装，它有着很高的自由度。可以个性化定制。但是也往往存在着缺少编译器而无法正常编译安装以及安装之后配置文件的管理问题。\n\n应用举例:\n>此处用`proftpd`举例。\n\n```bash\n# tar -zxvf proftpd-1.3.3d.tar.gz (解压源码包）\n# cd proftpf-1.3.3d （进入源码包目录）\n# ./config --prefix=/usr/local/proftpd （配置安装路径）\n# make (编译）\n# make install  （安装）\n```\n>软件下载地址: [www.proftpd.org](http://www.proftpd.org)\n\n其中，配置安装路径是非常必要的，因为源码安装不同于二进制安装。通常没有统一的卸载命令。存在管理不方便以及卸载不干净等问题。因此需要统一指定安装目录。习惯性的，将`/usr/local`设置为软件的安装目录，后面再跟上软件包的名称建立安装文件夹。\n\n\n## 脚本安装\n\n>过于简单，就不解释了。。。\n\n## APT软件包管理\n\n- 搜索软件包\n>`apt-cache search xxx软件包名`将会搜索指定的软件包，并列出其所有的相关软件的信息。类似于`yum list`\n\n以下示例将会列出`sudo`命令的软件包:\n```bash\n# apt-cache search sudo\n```\n- 软件包信息\n>`apt-cache show xxx软件包名`将会显示软件包的详细信息，并列出其作用介绍。类比于`yum info`。\n\n以下示例将会显示`sudo`软件有关详细信息:\n```bash\n# apt-cache show sudo\n```\n- 安装\n>` apt-get install xxx软件包名`将会安装制定的软件包。\n>- `reinstall`参数替换install将会覆盖安装制定软件包。\n>- `-f`参数将会修复安装制定软件包。\n\n以下示例将会安装、覆盖安装、修复安装`sudo`：\n```bash\n# apt-get install sudo (安装）\n# apt-get reinstall sudo （覆盖安装）\n# apt-get install -f sudo （修复安装）\n```\n- 删除卸载\n>`apt-get remove xxx软件包名`将会卸载指定的软件包。\n>- `autoremove`将会自动卸载依赖关系软件包（连同主程序的依赖一起卸载）\n>- `--purge`连同软件的配置文件一起删除（不保留配置文件）。\n\n以下示例将会卸载、连同依赖一起卸载、不保留配置文件卸载`sudo`：\n```bash\n# apt-get remove sudo (卸载）\n# apt-get autoremove sudo （连同卸载sudo的依赖）\n# apt-get remove --purge （卸载sudo以及配置文件）\n```\n- 更新软件源\n>`apt-get update`更新软件源\n\n示例:\n```bash\n# apt-get update\n```\n- 更新已安装软件包\n>` apt-get upgrade`将会对已经安装的软件包进行更新。\n\n示例:\n```bash\n# apt-get upgrade\n```","slug":"Linux-学习笔记-软件包管理","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoybg600512ev2dsh6h9nv","content":"<h1 id=\"RPM软件包管理\"><a href=\"#RPM软件包管理\" class=\"headerlink\" title=\"RPM软件包管理\"></a>RPM软件包管理</h1><h3 id=\"rpm包管理查询\"><a href=\"#rpm包管理查询\" class=\"headerlink\" title=\"rpm包管理查询\"></a>rpm包管理查询</h3><p>参数选项:</p>\n<ul>\n<li><code>-a</code> 查询所有已安装的软件包</li>\n<li><code>-f</code> 查询文件所属软件包</li>\n<li><code>-p</code> 查询软件包</li>\n<li><code>-i</code> 显示软件包信息</li>\n<li><code>-l</code> 显示软件包中的文件列表</li>\n<li><code>-d</code> 显示被标注为文档的文件列表</li>\n<li><code>-c</code> 显示被标注为配置文件的文件列表</li>\n</ul>\n<a id=\"more\"></a>\n<blockquote>\n<p>rpm查询应用案列:</p>\n</blockquote>\n<ol start=\"0\">\n<li>查看软件是否被安装:</li>\n</ol>\n<blockquote>\n<p><code>rpm -q xxxx软件包名</code>将显示指定的软件包名是否被安装。<br>以下示例将显示<code>sudo</code>命令是否被安装:</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -q sudo</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>-qa</code>将会显示所有被安装的软件包，从中过滤指定的软件包，可以使用管道组合命令:<br><code>rpm -qa | grep xxxx软件包名</code>来查看指定软件包是否被安装。</p>\n</blockquote>\n<p>以下示例将查询<code>sudo</code>命令是否被安装:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -qa | grep sudo</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>查询文件隶属的软件包: <blockquote>\n<p><code>rpm --qf xxxx软件包名</code> 其中<code>f</code>代表file的意思。</p>\n</blockquote>\n</li>\n</ol>\n<p>以下示例为查询<code>/etc/services</code>文件所属的软件包:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -qf /etc/services</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>查询软件包信息:<blockquote>\n<p><code>rpm -qi xxx软件包名</code>查询已安装包信息<br><code>rpm -qip xxxx.rpm</code>查询指定rpm软件包信息（未安装包信息）</p>\n</blockquote>\n</li>\n</ol>\n<p>以下示例为查询<code>sudo</code>命令软件包的信息:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -qi sudo</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>查询软件包安装文件：<blockquote>\n<p><code>rpm -ql xxx软件包名</code>查询已安装软件包安装了哪些文件<br><code>rpm -qlp xxxx.rpm</code>查询指定的rpm软件包将会安装哪些文件（未安装包安装将会安装的文件） </p>\n</blockquote>\n</li>\n</ol>\n<p>以下示例为显示<code>sudo</code>命令软件包安装的文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -ql sudo</span></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>查询软件包帮助文档:<blockquote>\n<p><code>rpm -qd xxx软件包名</code> 查询已安装的软件包安装的帮助文档<br><code>rpm -qdp xxx.rpm</code> 查询指定rpm软件包将会安装的帮助文档（未安装软件包将会安装的帮助文档）</p>\n</blockquote>\n</li>\n</ol>\n<p>以下示例将会显示<code>sudo</code>命令安装的帮助文档:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -qd sudo</span></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>查询软件包配置文件： <blockquote>\n<p><code>rpm -qc xxxx软件包名</code> 查询已安装软件包包含的配置文件<br><code>rpmm -qcp xxxx.rpm</code> 查询指定rpm软件包将会安装的配置文件（为安装软件包将会安装的配置文件）</p>\n</blockquote>\n</li>\n</ol>\n<p>以下示例将会显示<code>sudo</code>命令安装的配置文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -qc sudo</span></span><br></pre></td></tr></table></figure>\n<p>学会这些，可以查看linux系统中的文件隶属于那个软件包，再查看该软件包的信息，以确定该软件包是否需要来确定软件包的开启与否。来达到服务器的精简不必要的软件运行以降低负载。</p>\n<h3 id=\"rpm软件包的安装、卸载\"><a href=\"#rpm软件包的安装、卸载\" class=\"headerlink\" title=\"rpm软件包的安装、卸载\"></a>rpm软件包的安装、卸载</h3><h4 id=\"卸载软件包\"><a href=\"#卸载软件包\" class=\"headerlink\" title=\"卸载软件包:\"></a>卸载软件包:</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  rpm -e xxx软件包名</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>其中<code>xxx软件包名</code>为软件包名称。<br>注意:如果其它软件包有依赖关系，卸载时会产生提示信息。可以使用–nodeps强行卸载。</p>\n</blockquote>\n<p>以下为强制卸载<code>samba</code>软件包 示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -e --nodeps samba</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"安装本地rpm软件包\"><a href=\"#安装本地rpm软件包\" class=\"headerlink\" title=\"安装本地rpm软件包:\"></a>安装本地rpm软件包:</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -ivh xxxxxxxxx.rpm</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>其中<code>-ivh</code>代表的意思为:</p>\n<ul>\n<li>i :安装（install）</li>\n<li>v :显示安装过程中的详细信息</li>\n<li>h :用<code>#</code>号显示安装进度（hash）</li>\n<li>U :用大写的U来表示升级安装（update）</li>\n</ul>\n</blockquote>\n<p>升级安装示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -Uvh xxxxx.rpm</span></span><br></pre></td></tr></table></figure></p>\n<p>如果想忽略进度和安装信息，直接安装可使用:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># rpm -i xxxxxxxxx.rpm</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装本地软件包附带参数说明\"><a href=\"#安装本地软件包附带参数说明\" class=\"headerlink\" title=\"安装本地软件包附带参数说明:\"></a>安装本地软件包附带参数说明:</h4><p><code>--excludedocs</code></p>\n<blockquote>\n<p>不安装软件包中的文档文件(如果你已经足够熟悉这个软件包并且服务器空间紧张的话）</p>\n</blockquote>\n<p>以下为示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -ivh --excludedocs xxxxx.rpm</span></span><br></pre></td></tr></table></figure>\n<p><code>--prefix PATH</code></p>\n<blockquote>\n<p>将软件包安装到由<code>PATH</code>指定的路径下,通常不建议这样做或者说这样指定无效果。因为大部分rpm软件包在打包的时候开发人员指定了安装时软件包文件存放的位置了。</p>\n</blockquote>\n<p>以下为示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -ivh --prefix=/usr/xiamo/ xxxx.rpm</span></span><br></pre></td></tr></table></figure>\n<p><code>--test</code></p>\n<blockquote>\n<p>只对安装进行测试，并不实际安装。实际环境中比较有用的一个参数，可以测试安装软件包需要哪些依赖需要是否存在安装兼容性问题等等。</p>\n</blockquote>\n<p>以下为示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -ivh --test xxxx.rpm</span></span><br></pre></td></tr></table></figure>\n<p><code>--replacepkgs</code></p>\n<blockquote>\n<p>覆盖安装<br>软件包已经被安装,如果要覆盖安装该软件包，例如某个软件包的某个文件丢失，就可以覆盖安装。可以再命令行上使用该参数.</p>\n</blockquote>\n<p>以下为示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -ivh --replacepkgs xxxx.rpm</span></span><br></pre></td></tr></table></figure>\n<p><code>--replacefiles</code></p>\n<blockquote>\n<p>文件冲突<br>如果要安装的软件包中有一个文件已在安装其它软件包时安装，会出现错误信息，要想让rpm忽略该错误信息，请使用命令行选项。</p>\n</blockquote>\n<p>以下为示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -ivh --replacefiles xxxx.rpm</span></span><br></pre></td></tr></table></figure>\n<p><code>--nodeps</code></p>\n<blockquote>\n<p>未解决依赖关系<br>rpm软件包可能依赖于其它软件包，在安装了特定的软件包之后才能安装该软件包。你必须安装完所有依赖的软件包，才能解决这个问题。强制安装使用该选项。事实上，这样做安装好的软件包十有八九是无法运行的。这也是rpm比较头疼的地方。还好yum解决了这个问题:)</p>\n</blockquote>\n<p>以下为示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -ivh --nodeps xxx.rpm</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"rpm软件包校验\"><a href=\"#rpm软件包校验\" class=\"headerlink\" title=\"rpm软件包校验\"></a>rpm软件包校验</h3><blockquote>\n<p>在linux日常应用中，可能其它管理员误操作将某个软件包的文件更改了，这个时候，为了查看哪些文件被更改，就必须校验软件包是否被更改。<br><code>rpm -V 软件名称</code>将会校验指定的已安装的软件包。</p>\n<ul>\n<li>如果软件包没有被做过任何修改，那么执行该命令将不会有任何提示信息。</li>\n<li>如果软件包被改动过，那么将会出现提示信息。</li>\n</ul>\n</blockquote>\n<p>以下为提示信息代表的含义:</p>\n<ul>\n<li><code>5</code> 文件的md5校验值</li>\n<li><code>S</code> 文件大小</li>\n<li><code>L</code> 链接文件</li>\n<li><code>T</code> 文件的创建时间</li>\n<li><code>D</code> 设备文件按</li>\n<li><code>U</code> 文件的用户</li>\n<li><code>G</code> 文件的用户组</li>\n<li><code>M</code> 文件的权限</li>\n</ul>\n<h3 id=\"rpm软件包文件提取\"><a href=\"#rpm软件包文件提取\" class=\"headerlink\" title=\"rpm软件包文件提取\"></a>rpm软件包文件提取</h3><ul>\n<li><p>解压所有文件到当前目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm2cpio xxxxxx.rpm | cpio -idv</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解压指定文件到当前目录</p>\n</li>\n</ul>\n<blockquote>\n<p>以下命令将指定的rpm解包，并将其中的的<code>/etc/inittab</code>文件提取到当前目录得<code>etc</code>目录下。（当前目录的<code>etc</code>目录下将会有一个<code>inittab</code>文件。)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm2cpio xxxx.rpm | cpio -idv ./etc/inittab</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"yum软件包管理工具\"><a href=\"#yum软件包管理工具\" class=\"headerlink\" title=\"yum软件包管理工具\"></a>yum软件包管理工具</h2><p>应用yum包管理工具的好处:</p>\n<blockquote>\n<ul>\n<li>自动解决软件包依赖关系</li>\n<li>方便的软件包升级</li>\n<li>软件包可信任</li>\n</ul>\n</blockquote>\n<p>缺点:</p>\n<blockquote>\n<ul>\n<li>比rpm慢（需要读取yum源）</li>\n<li>需要联网</li>\n</ul>\n</blockquote>\n<h3 id=\"yum软件包常用选项\"><a href=\"#yum软件包常用选项\" class=\"headerlink\" title=\"yum软件包常用选项:\"></a>yum软件包常用选项:</h3><ul>\n<li>安装<blockquote>\n<p><code>yum install xxx软件包名</code>将会在yum源查找并安装该软件包。</p>\n</blockquote>\n</li>\n</ul>\n<p>以下为安装<code>sudo</code>命令示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum install sudo</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>检测升级 <blockquote>\n<p><code>yum check-update xxxx软件包名</code>将会在yum源查询指定软件是否有更新可用。(不会安装更新）</p>\n</blockquote>\n</li>\n</ul>\n<p>以下为检测<code>sudo</code>命令是否有更新可用示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum check-update sudo</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<font color=\"red\">如果不指定软件包名，将检测升级所有软件包。（只检测，不进行升级操作)</font>\n</blockquote>\n<p>以下为检测所有安装的软件包是否有更新可用:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum check-update</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>升级<blockquote>\n<p><code>yum update xxx软件包名</code>将会更新升级指定的软件包（如果有更新可用的话），因此次命令最好配合<code>yum check-update</code>使用。</p>\n</blockquote>\n</li>\n</ul>\n<p>以下为升级安装<code>sudo</code>软件包示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum update sudo</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>软件包查询<blockquote>\n<p><code>yum list</code>列出yum源上所有的软件包,并标注哪些软件包已安装，哪些软件包可更新。（此命令不时列出系统安装的软件包哦，而是yum源上的。所有一般不建议直接这样执行。可以使用管道配合<code>more</code>命令来分页查看。</p>\n</blockquote>\n</li>\n</ul>\n<p>以下为使用示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum list</span></span><br><span class=\"line\"><span class=\"comment\"># yum list | more</span></span><br></pre></td></tr></table></figure></p>\n<p>列出yum源上指定的软件包可以管道配合<code>grep</code>，以下为示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum list | grep sudo</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>软件包信息<blockquote>\n<p><code>yum info xxx软件包名</code> 列出软件包的详细信息以及软件包的作用介绍。</p>\n</blockquote>\n</li>\n</ul>\n<p>以下示例将会列出<code>sudo</code>命令的详细说明,以及该软件包的作用介绍:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum info sudo</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>卸载<blockquote>\n<p><code>yum remove xxxx软件名</code> 卸载指定的软件包</p>\n</blockquote>\n</li>\n</ul>\n<p>以下示例将会卸载<code>sudo</code>命令:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum remove sudo</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>帮助<blockquote>\n<p>查看更多的关系yum的帮助信息,来更好的了解yum软件包管理机制并且灵活的使用。</p>\n</blockquote>\n</li>\n</ul>\n<p>示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum --help</span></span><br><span class=\"line\"><span class=\"comment\"># man yum</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"源代码包安装\"><a href=\"#源代码包安装\" class=\"headerlink\" title=\"源代码包安装\"></a>源代码包安装</h2><blockquote>\n<p>源码安装不同于二进制包安装，它有着很高的自由度。可以个性化定制。但是也往往存在着缺少编译器而无法正常编译安装以及安装之后配置文件的管理问题。</p>\n</blockquote>\n<p>应用举例:</p>\n<blockquote>\n<p>此处用<code>proftpd</code>举例。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># tar -zxvf proftpd-1.3.3d.tar.gz (解压源码包）</span></span><br><span class=\"line\"><span class=\"comment\"># cd proftpf-1.3.3d （进入源码包目录）</span></span><br><span class=\"line\"><span class=\"comment\"># ./config --prefix=/usr/local/proftpd （配置安装路径）</span></span><br><span class=\"line\"><span class=\"comment\"># make (编译）</span></span><br><span class=\"line\"><span class=\"comment\"># make install  （安装）</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>软件下载地址: <a href=\"http://www.proftpd.org\" target=\"_blank\" rel=\"noopener\">www.proftpd.org</a></p>\n</blockquote>\n<p>其中，配置安装路径是非常必要的，因为源码安装不同于二进制安装。通常没有统一的卸载命令。存在管理不方便以及卸载不干净等问题。因此需要统一指定安装目录。习惯性的，将<code>/usr/local</code>设置为软件的安装目录，后面再跟上软件包的名称建立安装文件夹。</p>\n<h2 id=\"脚本安装\"><a href=\"#脚本安装\" class=\"headerlink\" title=\"脚本安装\"></a>脚本安装</h2><blockquote>\n<p>过于简单，就不解释了。。。</p>\n</blockquote>\n<h2 id=\"APT软件包管理\"><a href=\"#APT软件包管理\" class=\"headerlink\" title=\"APT软件包管理\"></a>APT软件包管理</h2><ul>\n<li>搜索软件包<blockquote>\n<p><code>apt-cache search xxx软件包名</code>将会搜索指定的软件包，并列出其所有的相关软件的信息。类似于<code>yum list</code></p>\n</blockquote>\n</li>\n</ul>\n<p>以下示例将会列出<code>sudo</code>命令的软件包:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># apt-cache search sudo</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>软件包信息<blockquote>\n<p><code>apt-cache show xxx软件包名</code>将会显示软件包的详细信息，并列出其作用介绍。类比于<code>yum info</code>。</p>\n</blockquote>\n</li>\n</ul>\n<p>以下示例将会显示<code>sudo</code>软件有关详细信息:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># apt-cache show sudo</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>安装<blockquote>\n<p><code>apt-get install xxx软件包名</code>将会安装制定的软件包。</p>\n<ul>\n<li><code>reinstall</code>参数替换install将会覆盖安装制定软件包。</li>\n<li><code>-f</code>参数将会修复安装制定软件包。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p>以下示例将会安装、覆盖安装、修复安装<code>sudo</code>：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># apt-get install sudo (安装）</span></span><br><span class=\"line\"><span class=\"comment\"># apt-get reinstall sudo （覆盖安装）</span></span><br><span class=\"line\"><span class=\"comment\"># apt-get install -f sudo （修复安装）</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>删除卸载<blockquote>\n<p><code>apt-get remove xxx软件包名</code>将会卸载指定的软件包。</p>\n<ul>\n<li><code>autoremove</code>将会自动卸载依赖关系软件包（连同主程序的依赖一起卸载）</li>\n<li><code>--purge</code>连同软件的配置文件一起删除（不保留配置文件）。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p>以下示例将会卸载、连同依赖一起卸载、不保留配置文件卸载<code>sudo</code>：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># apt-get remove sudo (卸载）</span></span><br><span class=\"line\"><span class=\"comment\"># apt-get autoremove sudo （连同卸载sudo的依赖）</span></span><br><span class=\"line\"><span class=\"comment\"># apt-get remove --purge （卸载sudo以及配置文件）</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>更新软件源<blockquote>\n<p><code>apt-get update</code>更新软件源</p>\n</blockquote>\n</li>\n</ul>\n<p>示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># apt-get update</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>更新已安装软件包<blockquote>\n<p><code>apt-get upgrade</code>将会对已经安装的软件包进行更新。</p>\n</blockquote>\n</li>\n</ul>\n<p>示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># apt-get upgrade</span></span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"RPM软件包管理\"><a href=\"#RPM软件包管理\" class=\"headerlink\" title=\"RPM软件包管理\"></a>RPM软件包管理</h1><h3 id=\"rpm包管理查询\"><a href=\"#rpm包管理查询\" class=\"headerlink\" title=\"rpm包管理查询\"></a>rpm包管理查询</h3><p>参数选项:</p>\n<ul>\n<li><code>-a</code> 查询所有已安装的软件包</li>\n<li><code>-f</code> 查询文件所属软件包</li>\n<li><code>-p</code> 查询软件包</li>\n<li><code>-i</code> 显示软件包信息</li>\n<li><code>-l</code> 显示软件包中的文件列表</li>\n<li><code>-d</code> 显示被标注为文档的文件列表</li>\n<li><code>-c</code> 显示被标注为配置文件的文件列表</li>\n</ul>","more":"<blockquote>\n<p>rpm查询应用案列:</p>\n</blockquote>\n<ol start=\"0\">\n<li>查看软件是否被安装:</li>\n</ol>\n<blockquote>\n<p><code>rpm -q xxxx软件包名</code>将显示指定的软件包名是否被安装。<br>以下示例将显示<code>sudo</code>命令是否被安装:</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -q sudo</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p><code>-qa</code>将会显示所有被安装的软件包，从中过滤指定的软件包，可以使用管道组合命令:<br><code>rpm -qa | grep xxxx软件包名</code>来查看指定软件包是否被安装。</p>\n</blockquote>\n<p>以下示例将查询<code>sudo</code>命令是否被安装:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -qa | grep sudo</span></span><br></pre></td></tr></table></figure>\n<ol>\n<li>查询文件隶属的软件包: <blockquote>\n<p><code>rpm --qf xxxx软件包名</code> 其中<code>f</code>代表file的意思。</p>\n</blockquote>\n</li>\n</ol>\n<p>以下示例为查询<code>/etc/services</code>文件所属的软件包:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -qf /etc/services</span></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>查询软件包信息:<blockquote>\n<p><code>rpm -qi xxx软件包名</code>查询已安装包信息<br><code>rpm -qip xxxx.rpm</code>查询指定rpm软件包信息（未安装包信息）</p>\n</blockquote>\n</li>\n</ol>\n<p>以下示例为查询<code>sudo</code>命令软件包的信息:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -qi sudo</span></span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>查询软件包安装文件：<blockquote>\n<p><code>rpm -ql xxx软件包名</code>查询已安装软件包安装了哪些文件<br><code>rpm -qlp xxxx.rpm</code>查询指定的rpm软件包将会安装哪些文件（未安装包安装将会安装的文件） </p>\n</blockquote>\n</li>\n</ol>\n<p>以下示例为显示<code>sudo</code>命令软件包安装的文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -ql sudo</span></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>查询软件包帮助文档:<blockquote>\n<p><code>rpm -qd xxx软件包名</code> 查询已安装的软件包安装的帮助文档<br><code>rpm -qdp xxx.rpm</code> 查询指定rpm软件包将会安装的帮助文档（未安装软件包将会安装的帮助文档）</p>\n</blockquote>\n</li>\n</ol>\n<p>以下示例将会显示<code>sudo</code>命令安装的帮助文档:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -qd sudo</span></span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>查询软件包配置文件： <blockquote>\n<p><code>rpm -qc xxxx软件包名</code> 查询已安装软件包包含的配置文件<br><code>rpmm -qcp xxxx.rpm</code> 查询指定rpm软件包将会安装的配置文件（为安装软件包将会安装的配置文件）</p>\n</blockquote>\n</li>\n</ol>\n<p>以下示例将会显示<code>sudo</code>命令安装的配置文件:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -qc sudo</span></span><br></pre></td></tr></table></figure>\n<p>学会这些，可以查看linux系统中的文件隶属于那个软件包，再查看该软件包的信息，以确定该软件包是否需要来确定软件包的开启与否。来达到服务器的精简不必要的软件运行以降低负载。</p>\n<h3 id=\"rpm软件包的安装、卸载\"><a href=\"#rpm软件包的安装、卸载\" class=\"headerlink\" title=\"rpm软件包的安装、卸载\"></a>rpm软件包的安装、卸载</h3><h4 id=\"卸载软件包\"><a href=\"#卸载软件包\" class=\"headerlink\" title=\"卸载软件包:\"></a>卸载软件包:</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#  rpm -e xxx软件包名</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>其中<code>xxx软件包名</code>为软件包名称。<br>注意:如果其它软件包有依赖关系，卸载时会产生提示信息。可以使用–nodeps强行卸载。</p>\n</blockquote>\n<p>以下为强制卸载<code>samba</code>软件包 示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -e --nodeps samba</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"安装本地rpm软件包\"><a href=\"#安装本地rpm软件包\" class=\"headerlink\" title=\"安装本地rpm软件包:\"></a>安装本地rpm软件包:</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -ivh xxxxxxxxx.rpm</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>其中<code>-ivh</code>代表的意思为:</p>\n<ul>\n<li>i :安装（install）</li>\n<li>v :显示安装过程中的详细信息</li>\n<li>h :用<code>#</code>号显示安装进度（hash）</li>\n<li>U :用大写的U来表示升级安装（update）</li>\n</ul>\n</blockquote>\n<p>升级安装示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -Uvh xxxxx.rpm</span></span><br></pre></td></tr></table></figure></p>\n<p>如果想忽略进度和安装信息，直接安装可使用:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># rpm -i xxxxxxxxx.rpm</span><br></pre></td></tr></table></figure>\n<h4 id=\"安装本地软件包附带参数说明\"><a href=\"#安装本地软件包附带参数说明\" class=\"headerlink\" title=\"安装本地软件包附带参数说明:\"></a>安装本地软件包附带参数说明:</h4><p><code>--excludedocs</code></p>\n<blockquote>\n<p>不安装软件包中的文档文件(如果你已经足够熟悉这个软件包并且服务器空间紧张的话）</p>\n</blockquote>\n<p>以下为示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -ivh --excludedocs xxxxx.rpm</span></span><br></pre></td></tr></table></figure>\n<p><code>--prefix PATH</code></p>\n<blockquote>\n<p>将软件包安装到由<code>PATH</code>指定的路径下,通常不建议这样做或者说这样指定无效果。因为大部分rpm软件包在打包的时候开发人员指定了安装时软件包文件存放的位置了。</p>\n</blockquote>\n<p>以下为示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -ivh --prefix=/usr/xiamo/ xxxx.rpm</span></span><br></pre></td></tr></table></figure>\n<p><code>--test</code></p>\n<blockquote>\n<p>只对安装进行测试，并不实际安装。实际环境中比较有用的一个参数，可以测试安装软件包需要哪些依赖需要是否存在安装兼容性问题等等。</p>\n</blockquote>\n<p>以下为示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -ivh --test xxxx.rpm</span></span><br></pre></td></tr></table></figure>\n<p><code>--replacepkgs</code></p>\n<blockquote>\n<p>覆盖安装<br>软件包已经被安装,如果要覆盖安装该软件包，例如某个软件包的某个文件丢失，就可以覆盖安装。可以再命令行上使用该参数.</p>\n</blockquote>\n<p>以下为示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -ivh --replacepkgs xxxx.rpm</span></span><br></pre></td></tr></table></figure>\n<p><code>--replacefiles</code></p>\n<blockquote>\n<p>文件冲突<br>如果要安装的软件包中有一个文件已在安装其它软件包时安装，会出现错误信息，要想让rpm忽略该错误信息，请使用命令行选项。</p>\n</blockquote>\n<p>以下为示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -ivh --replacefiles xxxx.rpm</span></span><br></pre></td></tr></table></figure>\n<p><code>--nodeps</code></p>\n<blockquote>\n<p>未解决依赖关系<br>rpm软件包可能依赖于其它软件包，在安装了特定的软件包之后才能安装该软件包。你必须安装完所有依赖的软件包，才能解决这个问题。强制安装使用该选项。事实上，这样做安装好的软件包十有八九是无法运行的。这也是rpm比较头疼的地方。还好yum解决了这个问题:)</p>\n</blockquote>\n<p>以下为示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm -ivh --nodeps xxx.rpm</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"rpm软件包校验\"><a href=\"#rpm软件包校验\" class=\"headerlink\" title=\"rpm软件包校验\"></a>rpm软件包校验</h3><blockquote>\n<p>在linux日常应用中，可能其它管理员误操作将某个软件包的文件更改了，这个时候，为了查看哪些文件被更改，就必须校验软件包是否被更改。<br><code>rpm -V 软件名称</code>将会校验指定的已安装的软件包。</p>\n<ul>\n<li>如果软件包没有被做过任何修改，那么执行该命令将不会有任何提示信息。</li>\n<li>如果软件包被改动过，那么将会出现提示信息。</li>\n</ul>\n</blockquote>\n<p>以下为提示信息代表的含义:</p>\n<ul>\n<li><code>5</code> 文件的md5校验值</li>\n<li><code>S</code> 文件大小</li>\n<li><code>L</code> 链接文件</li>\n<li><code>T</code> 文件的创建时间</li>\n<li><code>D</code> 设备文件按</li>\n<li><code>U</code> 文件的用户</li>\n<li><code>G</code> 文件的用户组</li>\n<li><code>M</code> 文件的权限</li>\n</ul>\n<h3 id=\"rpm软件包文件提取\"><a href=\"#rpm软件包文件提取\" class=\"headerlink\" title=\"rpm软件包文件提取\"></a>rpm软件包文件提取</h3><ul>\n<li><p>解压所有文件到当前目录</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm2cpio xxxxxx.rpm | cpio -idv</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>解压指定文件到当前目录</p>\n</li>\n</ul>\n<blockquote>\n<p>以下命令将指定的rpm解包，并将其中的的<code>/etc/inittab</code>文件提取到当前目录得<code>etc</code>目录下。（当前目录的<code>etc</code>目录下将会有一个<code>inittab</code>文件。)<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># rpm2cpio xxxx.rpm | cpio -idv ./etc/inittab</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h2 id=\"yum软件包管理工具\"><a href=\"#yum软件包管理工具\" class=\"headerlink\" title=\"yum软件包管理工具\"></a>yum软件包管理工具</h2><p>应用yum包管理工具的好处:</p>\n<blockquote>\n<ul>\n<li>自动解决软件包依赖关系</li>\n<li>方便的软件包升级</li>\n<li>软件包可信任</li>\n</ul>\n</blockquote>\n<p>缺点:</p>\n<blockquote>\n<ul>\n<li>比rpm慢（需要读取yum源）</li>\n<li>需要联网</li>\n</ul>\n</blockquote>\n<h3 id=\"yum软件包常用选项\"><a href=\"#yum软件包常用选项\" class=\"headerlink\" title=\"yum软件包常用选项:\"></a>yum软件包常用选项:</h3><ul>\n<li>安装<blockquote>\n<p><code>yum install xxx软件包名</code>将会在yum源查找并安装该软件包。</p>\n</blockquote>\n</li>\n</ul>\n<p>以下为安装<code>sudo</code>命令示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum install sudo</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>检测升级 <blockquote>\n<p><code>yum check-update xxxx软件包名</code>将会在yum源查询指定软件是否有更新可用。(不会安装更新）</p>\n</blockquote>\n</li>\n</ul>\n<p>以下为检测<code>sudo</code>命令是否有更新可用示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum check-update sudo</span></span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<font color=\"red\">如果不指定软件包名，将检测升级所有软件包。（只检测，不进行升级操作)</font>\n</blockquote>\n<p>以下为检测所有安装的软件包是否有更新可用:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum check-update</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>升级<blockquote>\n<p><code>yum update xxx软件包名</code>将会更新升级指定的软件包（如果有更新可用的话），因此次命令最好配合<code>yum check-update</code>使用。</p>\n</blockquote>\n</li>\n</ul>\n<p>以下为升级安装<code>sudo</code>软件包示例：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum update sudo</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>软件包查询<blockquote>\n<p><code>yum list</code>列出yum源上所有的软件包,并标注哪些软件包已安装，哪些软件包可更新。（此命令不时列出系统安装的软件包哦，而是yum源上的。所有一般不建议直接这样执行。可以使用管道配合<code>more</code>命令来分页查看。</p>\n</blockquote>\n</li>\n</ul>\n<p>以下为使用示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum list</span></span><br><span class=\"line\"><span class=\"comment\"># yum list | more</span></span><br></pre></td></tr></table></figure></p>\n<p>列出yum源上指定的软件包可以管道配合<code>grep</code>，以下为示例:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum list | grep sudo</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>软件包信息<blockquote>\n<p><code>yum info xxx软件包名</code> 列出软件包的详细信息以及软件包的作用介绍。</p>\n</blockquote>\n</li>\n</ul>\n<p>以下示例将会列出<code>sudo</code>命令的详细说明,以及该软件包的作用介绍:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum info sudo</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>卸载<blockquote>\n<p><code>yum remove xxxx软件名</code> 卸载指定的软件包</p>\n</blockquote>\n</li>\n</ul>\n<p>以下示例将会卸载<code>sudo</code>命令:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum remove sudo</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>帮助<blockquote>\n<p>查看更多的关系yum的帮助信息,来更好的了解yum软件包管理机制并且灵活的使用。</p>\n</blockquote>\n</li>\n</ul>\n<p>示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># yum --help</span></span><br><span class=\"line\"><span class=\"comment\"># man yum</span></span><br></pre></td></tr></table></figure></p>\n<h2 id=\"源代码包安装\"><a href=\"#源代码包安装\" class=\"headerlink\" title=\"源代码包安装\"></a>源代码包安装</h2><blockquote>\n<p>源码安装不同于二进制包安装，它有着很高的自由度。可以个性化定制。但是也往往存在着缺少编译器而无法正常编译安装以及安装之后配置文件的管理问题。</p>\n</blockquote>\n<p>应用举例:</p>\n<blockquote>\n<p>此处用<code>proftpd</code>举例。</p>\n</blockquote>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># tar -zxvf proftpd-1.3.3d.tar.gz (解压源码包）</span></span><br><span class=\"line\"><span class=\"comment\"># cd proftpf-1.3.3d （进入源码包目录）</span></span><br><span class=\"line\"><span class=\"comment\"># ./config --prefix=/usr/local/proftpd （配置安装路径）</span></span><br><span class=\"line\"><span class=\"comment\"># make (编译）</span></span><br><span class=\"line\"><span class=\"comment\"># make install  （安装）</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>软件下载地址: <a href=\"http://www.proftpd.org\" target=\"_blank\" rel=\"noopener\">www.proftpd.org</a></p>\n</blockquote>\n<p>其中，配置安装路径是非常必要的，因为源码安装不同于二进制安装。通常没有统一的卸载命令。存在管理不方便以及卸载不干净等问题。因此需要统一指定安装目录。习惯性的，将<code>/usr/local</code>设置为软件的安装目录，后面再跟上软件包的名称建立安装文件夹。</p>\n<h2 id=\"脚本安装\"><a href=\"#脚本安装\" class=\"headerlink\" title=\"脚本安装\"></a>脚本安装</h2><blockquote>\n<p>过于简单，就不解释了。。。</p>\n</blockquote>\n<h2 id=\"APT软件包管理\"><a href=\"#APT软件包管理\" class=\"headerlink\" title=\"APT软件包管理\"></a>APT软件包管理</h2><ul>\n<li>搜索软件包<blockquote>\n<p><code>apt-cache search xxx软件包名</code>将会搜索指定的软件包，并列出其所有的相关软件的信息。类似于<code>yum list</code></p>\n</blockquote>\n</li>\n</ul>\n<p>以下示例将会列出<code>sudo</code>命令的软件包:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># apt-cache search sudo</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>软件包信息<blockquote>\n<p><code>apt-cache show xxx软件包名</code>将会显示软件包的详细信息，并列出其作用介绍。类比于<code>yum info</code>。</p>\n</blockquote>\n</li>\n</ul>\n<p>以下示例将会显示<code>sudo</code>软件有关详细信息:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># apt-cache show sudo</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>安装<blockquote>\n<p><code>apt-get install xxx软件包名</code>将会安装制定的软件包。</p>\n<ul>\n<li><code>reinstall</code>参数替换install将会覆盖安装制定软件包。</li>\n<li><code>-f</code>参数将会修复安装制定软件包。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p>以下示例将会安装、覆盖安装、修复安装<code>sudo</code>：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># apt-get install sudo (安装）</span></span><br><span class=\"line\"><span class=\"comment\"># apt-get reinstall sudo （覆盖安装）</span></span><br><span class=\"line\"><span class=\"comment\"># apt-get install -f sudo （修复安装）</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>删除卸载<blockquote>\n<p><code>apt-get remove xxx软件包名</code>将会卸载指定的软件包。</p>\n<ul>\n<li><code>autoremove</code>将会自动卸载依赖关系软件包（连同主程序的依赖一起卸载）</li>\n<li><code>--purge</code>连同软件的配置文件一起删除（不保留配置文件）。</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n<p>以下示例将会卸载、连同依赖一起卸载、不保留配置文件卸载<code>sudo</code>：<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># apt-get remove sudo (卸载）</span></span><br><span class=\"line\"><span class=\"comment\"># apt-get autoremove sudo （连同卸载sudo的依赖）</span></span><br><span class=\"line\"><span class=\"comment\"># apt-get remove --purge （卸载sudo以及配置文件）</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>更新软件源<blockquote>\n<p><code>apt-get update</code>更新软件源</p>\n</blockquote>\n</li>\n</ul>\n<p>示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># apt-get update</span></span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>更新已安装软件包<blockquote>\n<p><code>apt-get upgrade</code>将会对已经安装的软件包进行更新。</p>\n</blockquote>\n</li>\n</ul>\n<p>示例:<br><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># apt-get upgrade</span></span><br></pre></td></tr></table></figure></p>"},{"title":"为NexT主题添加文章阅读量统计功能","isupdate":false,"date":"2015-10-21T13:57:00.000Z","updatetime":null,"_content":"\n\n\n### 前言\n\n---\n\n由于最近在折腾Android项目，需要用到一些与服务器交互、以及数据存储的相关功能，然后发现了[LeanCloud](https://leancloud.cn)这家服务提供商,使用下来还感觉还挺靠谱的(请给我广告费)。正好发现他们服务提供了[JavaScript SDK](https://leancloud.cn/docs/js_guide.html)，于是就想着尝试着实现Hexo博客文章的浏览数统计功能，之前虽然在使用不蒜子，但是不蒜子不能够在主页展示文章阅读量啊！对于博主这种有强迫症又想装X的人来说果断不能忍啊！\n\n\n\n### ~~修改NexT主题模版~~\n\n~~本方法理论上对Hexo博客通用，由于博主使用的是NexT主题，所以当然针对NexT来说咯。~~**<font color=red>NexT主题目前已经合并这个Feature，因此如果你使用的是NexT主题，可以直接使用不用修改主题模版而直接在`_config.yml`中配置即可，请直接跳转查看[配置LeanCloud](#%E9%85%8D%E7%BD%AELeanCloud)</font>**\n\n<!-- more -->\n\n####  ~~修改`_config.yml`文件~~\n\n~~打开NexT主题的根目录下的`_config.yml`文件，在任意位置添加以下内容：~~\n\n```javascript\nleancloud_visitors:\n  enable: true\n  app_id: #<AppID>\n  app_key: #<AppKEY>\n```\n\n#### ~~添加`lean-analytics.swig`文件~~\n\n~~在主题的`layout\\_scripts`路径下，新建一个`lean-analytics.swig`文件，并向里面添加以下内容~~\n\n\n```javascript\n<!-- custom analytics part create by xiamo -->\n<script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.1.js\"></script>\n<script>AV.initialize(\"{{theme.leancloud_visitors.app_id}}\", \"{{theme.leancloud_visitors.app_key}}\");</script>\n<script>\nfunction showTime(Counter) {\n\tvar query = new AV.Query(Counter);\n\t$(\".leancloud_visitors\").each(function() {\n\t\tvar url = $(this).attr(\"id\").trim();\n\t\tquery.equalTo(\"url\", url);\n\t\tquery.find({\n\t\t\tsuccess: function(results) {\n\t\t\t\tif (results.length == 0) {\n\t\t\t\t\tvar content = $(document.getElementById(url)).text() + ': 0';\n\t\t\t\t\t$(document.getElementById(url)).text(content);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tfor (var i = 0; i < results.length; i++) {\n\t\t\t\t\tvar object = results[i];\n\t\t\t\t\tvar content = $(document.getElementById(url)).text() + ': ' + object.get('time');\n\t\t\t\t\t$(document.getElementById(url)).text(content);\n\t\t\t\t}\n\t\t\t},\n\t\t\terror: function(object, error) {\n\t\t\t\tconsole.log(\"Error: \" + error.code + \" \" + error.message);\n\t\t\t}\n\t\t});\n\n\t});\n}\n\nfunction addCount(Counter) {\n\tvar Counter = AV.Object.extend(\"Counter\");\n\turl = $(\".leancloud_visitors\").attr('id').trim();\n\ttitle = $(\".leancloud_visitors\").attr('data-flag-title').trim();\n\tvar query = new AV.Query(Counter);\n\tquery.equalTo(\"url\", url);\n\tquery.find({\n\t\tsuccess: function(results) {\n\t\t\tif (results.length > 0) {\n\t\t\t\tvar counter = results[0];\n\t\t\t\tcounter.fetchWhenSave(true);\n\t\t\t\tcounter.increment(\"time\");\n\t\t\t\tcounter.save(null, {\n\t\t\t\t\tsuccess: function(counter) {\n\t\t\t\t\t\tvar content = $(document.getElementById(url)).text() + ': ' + counter.get('time');\n\t\t\t\t\t\t$(document.getElementById(url)).text(content);\n\t\t\t\t\t},\n\t\t\t\t\terror: function(counter, error) {\n\t\t\t\t\t\tconsole.log('Failed to save Visitor num, with error message: ' + error.message);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tvar newcounter = new Counter();\n\t\t\t\tnewcounter.set(\"title\", title);\n\t\t\t\tnewcounter.set(\"url\", url);\n\t\t\t\tnewcounter.set(\"time\", 1);\n\t\t\t\tnewcounter.save(null, {\n\t\t\t\t\tsuccess: function(newcounter) {\n\t\t\t\t\t    console.log(\"newcounter.get('time')=\"+newcounter.get('time'));\n\t\t\t\t\t\tvar content = $(document.getElementById(url)).text() + ': ' + newcounter.get('time');\n\t\t\t\t\t\t$(document.getElementById(url)).text(content);\n\t\t\t\t\t},\n\t\t\t\t\terror: function(newcounter, error) {\n\t\t\t\t\t\tconsole.log('Failed to create');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\terror: function(error) {\n\t\t\tconsole.log('Error:' + error.code + \" \" + error.message);\n\t\t}\n\t});\n}\n$(function() {\n\tvar Counter = AV.Object.extend(\"Counter\");\n\tif ($('.leancloud_visitors').length == 1) {\n\t\taddCount(Counter);\n\t} else if ($('.post-title-link').length > 1) {\n\t\tshowTime(Counter);\n\t}\n});\n</script>\n```\n\n#### ~~修改`post.swig`文件~~\n\n~~在主题的`layout\\_macro`路径下，打开`post.swig`文件，找到以下内容（大概88行）：~~\n\n```html\n          {% if not is_index and theme.facebook_sdk.enable and theme.facebook_sdk.like_button %}\n            &nbsp; | &nbsp;\n            <div class=\"fb-like\" data-layout=\"button_count\" data-share=\"true\"></div>\n          {% endif %}\n```\n\n~~在其后面添加如下内容：~~\n\n```html\n{% if theme.leancloud_visitors.enable %}\n\t\t  \t <span id=\"{{ url_for(post.path) }}\"class=\"leancloud_visitors\"  data-flag-title=\"{{ post.title }}\">\n            &nbsp; | &nbsp; {{__('post.visitors')}}\n            </span>\n\t\t  {% endif %}\n```\n\n~~添加完毕之后，文件内容像这个样子：~~\n\n```html\n          {% if not is_index and theme.facebook_sdk.enable and theme.facebook_sdk.like_button %}\n            &nbsp; | &nbsp;\n            <div class=\"fb-like\" data-layout=\"button_count\" data-share=\"true\"></div>\n          {% endif %}\n\t\t\t {% if theme.leancloud_visitors.enable %}\n\t\t  \t <span id=\"{{ url_for(post.path) }}\"class=\"leancloud_visitors\"  data-flag-title=\"{{ post.title }}\">\n            &nbsp; | &nbsp; {{__('post.visitors')}}\n            </span>\n\t\t  {% endif %}\n        </div>\n      </header>\n    {% endif %}\n```\n\n#### ~~修改`layout.swig`文件~~\n\n~~在NexT根目录的`layout`路径下，打开 `_layout.swig`文件，在`</body>`上方添加如下内容：~~\n```html\n{% if theme.leancloud_visitors.enable %}\n  \t {% include '_scripts/lean-analytics.swig' %}\n  {%  endif %}\n```\n\n~~添加完成之后，文件内容像这个样子：~~\n\n```html\n{# LazyLoad #}\n  <script type=\"text/javascript\" src=\"{{ url_for(theme.js) }}/lazyload.js\"></script>\n  <script type=\"text/javascript\">\n    $(function () {\n      $(\"#posts\").find('img').lazyload({\n        placeholder: \"{{ url_for(theme.images) }}/loading.gif\",\n        effect: \"fadeIn\"\n      });\n    });\n  </script>\n  {% if theme.leancloud_visitors.enable %}\n  \t {% include '_scripts/lean-analytics.swig' %}\n  {%  endif %}\n</body>\n</html>\n```\n\n#### ~~修改`zh-Hans.yml`文件~~\n\n~~在NexT目录的`languages`路径下的`zh-Hans.yml`文件，在`post:`结点下添加`visitors: 阅读次数`，像这个样子：~~\n```html\npost:\n  posted: 发表于\n  visitors: 阅读次数\n  updated: 更新于\n  in: 分类于\n  read_more: 阅读全文\n  untitled: 未命名\n  toc_empty: 此文章未包含目录\n```\n\n~~** 如果你使用的是其它NexT的语言，请相应的添加该字段即可。**~~\n\n~~至此NexT的修改工作就完成了，但是现在还是不能够使用文章阅读量这个统计功能的。这个功能依赖于[LeanCloud](https://leancloud.cn/)提供后端数据存取，因此我们需要注册一个[LeanCloud帐号](https://leancloud.cn/login.html#/signup)才能继续使用这个功能，**[点我快速注册](https://leancloud.cn/login.html#/signup).**~~\n\n\n\n-----\n\n\n\n### 配置[LeanCloud](https://leancloud.cn)\n\n在注册完成LeanCloud帐号并验证邮箱之后，我们就可以登录我们的LeanCloud帐号，进行一番配置之后拿到`AppID`以及`AppKey`这两个参数即可正常使用文章阅读量统计的功能了。\n\n\n#### 创建应用\n\n- 我们新建一个应用来专门进行博客的访问统计的数据操作。首先，打开控制台，如下图所示：\n\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/open_consoloe.png \"打开控制台\")\n\n- 在出现的界面点击`创建应用`：\n\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/create_app.png \"创建应用\")\n\n- 在接下来的页面，新建的应用名称我们可以随意输入，即便是输入的不满意我们后续也是可以更改的:\n\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/creating_app.png \"创建的新应用名称\")\n\n- 这里为了演示的方便，我新创建一个取名为test的应用。创建完成之后我们点击新创建的应用的名字来进行该应用的参数配置：\n\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/create_class.png \"打开应用参数配置界面\")\n\n- 在应用的数据配置界面，左侧下划线开头的都是系统预定义好的表，为了便于区分我们新建一张表来保存我们的数据。点击左侧右上角的齿轮图标，新建Class：\n   在弹出的选项中选择`创建Class`来新建Class用来专门保存我们博客的文章访问量等数据:\n   点击`创建Class`之后，~~理论上来说名字可以随意取名，只要你交互代码做相应的更改即可~~，但是为了保证我们前面对NexT主题的修改兼容，此处的**<font color=green>新建Class名字必须为<font color=red >`Counter`**</font></font>:\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/creating_class.png \"权限配置\")\n\n- 由于LeanCloud升级了默认的ACL权限，如果你想避免后续因为权限的问题导致次数统计显示不正常，建议在此处选择`无限制`。\n\n\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/open_app_key.png \"打开应用设置\")\n\n创建完成之后，左侧数据栏应该会多出一栏名为`Counter`的栏目，这个时候我们点击顶部的设置，切换到test应用的操作界面:\n在弹出的界面中，选择左侧的`应用Key`选项，即可发现我们创建应用的`AppID`以及`AppKey`，有了它，我们就有权限能够通过主题中配置好的Javascript代码与这个应用的Counter表进行数据存取操作了:\n\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/opened_app_key.png \"获取Appid、Appkey\")\n\n复制`AppID`以及`AppKey`并在NexT主题的`_config.yml`文件中我们相应的位置填入即可，正确配置之后文件内容像这个样子:\n\n```html\nleancloud_visitors:\n  enable: true\n  app_id: joaeuuc4hsqudUUwx4gIvGF6-gzGzoHsz\n  app_key: E9UJsJpw1omCHuS22PdSpKoh\n```\n\n这个时候重新生成部署Hexo博客，应该就可以正常使用文章阅读量统计的功能了。需要特别说明的是：记录文章访问量的唯一标识符是文章的`发布日期`以及`文章的标题`，因此请确保这两个数值组合的唯一性，如果你更改了这两个数值，会造成文章阅读数值的清零重计。\n\n### 后台管理\n\n当你配置部分完成之后，初始的文章统计量显示为0，但是这个时候我们LeanCloud对应的应用的`Counter`表中并没有相应的记录，只是单纯的显示为0而已，当博客文章在配置好阅读量统计服务之后第一次打开时，便会自动向服务器发送数据来创建一条数据，该数据会被记录在对应的应用的`Counter`表中。\n\n\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/background.png \"后台管理\")\n\n我们可以修改其中的`time`字段的数值来达到修改某一篇文章的访问量的目的（博客文章访问量快递提升人气的装逼利器）。双击具体的数值，修改之后回车即可保存。\n\n-  `url`字段被当作唯一`ID`来使用，因此如果你不知道带来的后果的话请不要修改。\n-  `title`字段显示的是博客文章的标题，用于后台管理的时候区分文章之用，没有什么实际作用。\n-  其他字段皆为自动生成，具体作用请查阅LeanCloud官方文档，如果你不知道有什么作用请不要随意修改。\n\n### Web安全\n\n因为AppID以及AppKey是暴露在外的，因此如果一些别用用心之人知道了之后用于其它目的是得不偿失的，为了确保只用于我们自己的博客，建议开启Web安全选项，这样就只能通过我们自己的域名才有权访问后台的数据了，可以进一步提升安全性。\n\n选择应用的设置的`安全中心`选项卡:\n\n\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/open_safe_center.png \"进入安全中心\")\n\n在`Web 安全域名`中填入我们自己的博客域名，来确保数据调用的安全:\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/bind_domain.png \"锁定域名\")\n\n\n如果你不知道怎么填写安全域名而或者填写完成之后发现博客文章访问量显示不正常，打开浏览器调试模式，发现如下图的输出:\n\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/broswer_403.png \"Web安全域名填写错误\")\n\n这说明你的安全域名填写错误，导致服务器拒绝了数据交互的请求，你可以更改为正确的安全域名或者你不知道如何修改请在本博文中留言或者放弃设置Web安全域名。\n\n\nEnjoy it！\n","source":"_posts/为NexT主题添加文章阅读量统计功能.md","raw":"title: 为NexT主题添加文章阅读量统计功能\nisupdate: false\ndate: 2015-10-21 21:57:00\nupdatetime:\ntags: Hexo\ncategories: Hexo\n---\n\n\n\n### 前言\n\n---\n\n由于最近在折腾Android项目，需要用到一些与服务器交互、以及数据存储的相关功能，然后发现了[LeanCloud](https://leancloud.cn)这家服务提供商,使用下来还感觉还挺靠谱的(请给我广告费)。正好发现他们服务提供了[JavaScript SDK](https://leancloud.cn/docs/js_guide.html)，于是就想着尝试着实现Hexo博客文章的浏览数统计功能，之前虽然在使用不蒜子，但是不蒜子不能够在主页展示文章阅读量啊！对于博主这种有强迫症又想装X的人来说果断不能忍啊！\n\n\n\n### ~~修改NexT主题模版~~\n\n~~本方法理论上对Hexo博客通用，由于博主使用的是NexT主题，所以当然针对NexT来说咯。~~**<font color=red>NexT主题目前已经合并这个Feature，因此如果你使用的是NexT主题，可以直接使用不用修改主题模版而直接在`_config.yml`中配置即可，请直接跳转查看[配置LeanCloud](#%E9%85%8D%E7%BD%AELeanCloud)</font>**\n\n<!-- more -->\n\n####  ~~修改`_config.yml`文件~~\n\n~~打开NexT主题的根目录下的`_config.yml`文件，在任意位置添加以下内容：~~\n\n```javascript\nleancloud_visitors:\n  enable: true\n  app_id: #<AppID>\n  app_key: #<AppKEY>\n```\n\n#### ~~添加`lean-analytics.swig`文件~~\n\n~~在主题的`layout\\_scripts`路径下，新建一个`lean-analytics.swig`文件，并向里面添加以下内容~~\n\n\n```javascript\n<!-- custom analytics part create by xiamo -->\n<script src=\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.1.js\"></script>\n<script>AV.initialize(\"{{theme.leancloud_visitors.app_id}}\", \"{{theme.leancloud_visitors.app_key}}\");</script>\n<script>\nfunction showTime(Counter) {\n\tvar query = new AV.Query(Counter);\n\t$(\".leancloud_visitors\").each(function() {\n\t\tvar url = $(this).attr(\"id\").trim();\n\t\tquery.equalTo(\"url\", url);\n\t\tquery.find({\n\t\t\tsuccess: function(results) {\n\t\t\t\tif (results.length == 0) {\n\t\t\t\t\tvar content = $(document.getElementById(url)).text() + ': 0';\n\t\t\t\t\t$(document.getElementById(url)).text(content);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tfor (var i = 0; i < results.length; i++) {\n\t\t\t\t\tvar object = results[i];\n\t\t\t\t\tvar content = $(document.getElementById(url)).text() + ': ' + object.get('time');\n\t\t\t\t\t$(document.getElementById(url)).text(content);\n\t\t\t\t}\n\t\t\t},\n\t\t\terror: function(object, error) {\n\t\t\t\tconsole.log(\"Error: \" + error.code + \" \" + error.message);\n\t\t\t}\n\t\t});\n\n\t});\n}\n\nfunction addCount(Counter) {\n\tvar Counter = AV.Object.extend(\"Counter\");\n\turl = $(\".leancloud_visitors\").attr('id').trim();\n\ttitle = $(\".leancloud_visitors\").attr('data-flag-title').trim();\n\tvar query = new AV.Query(Counter);\n\tquery.equalTo(\"url\", url);\n\tquery.find({\n\t\tsuccess: function(results) {\n\t\t\tif (results.length > 0) {\n\t\t\t\tvar counter = results[0];\n\t\t\t\tcounter.fetchWhenSave(true);\n\t\t\t\tcounter.increment(\"time\");\n\t\t\t\tcounter.save(null, {\n\t\t\t\t\tsuccess: function(counter) {\n\t\t\t\t\t\tvar content = $(document.getElementById(url)).text() + ': ' + counter.get('time');\n\t\t\t\t\t\t$(document.getElementById(url)).text(content);\n\t\t\t\t\t},\n\t\t\t\t\terror: function(counter, error) {\n\t\t\t\t\t\tconsole.log('Failed to save Visitor num, with error message: ' + error.message);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\tvar newcounter = new Counter();\n\t\t\t\tnewcounter.set(\"title\", title);\n\t\t\t\tnewcounter.set(\"url\", url);\n\t\t\t\tnewcounter.set(\"time\", 1);\n\t\t\t\tnewcounter.save(null, {\n\t\t\t\t\tsuccess: function(newcounter) {\n\t\t\t\t\t    console.log(\"newcounter.get('time')=\"+newcounter.get('time'));\n\t\t\t\t\t\tvar content = $(document.getElementById(url)).text() + ': ' + newcounter.get('time');\n\t\t\t\t\t\t$(document.getElementById(url)).text(content);\n\t\t\t\t\t},\n\t\t\t\t\terror: function(newcounter, error) {\n\t\t\t\t\t\tconsole.log('Failed to create');\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t},\n\t\terror: function(error) {\n\t\t\tconsole.log('Error:' + error.code + \" \" + error.message);\n\t\t}\n\t});\n}\n$(function() {\n\tvar Counter = AV.Object.extend(\"Counter\");\n\tif ($('.leancloud_visitors').length == 1) {\n\t\taddCount(Counter);\n\t} else if ($('.post-title-link').length > 1) {\n\t\tshowTime(Counter);\n\t}\n});\n</script>\n```\n\n#### ~~修改`post.swig`文件~~\n\n~~在主题的`layout\\_macro`路径下，打开`post.swig`文件，找到以下内容（大概88行）：~~\n\n```html\n          {% if not is_index and theme.facebook_sdk.enable and theme.facebook_sdk.like_button %}\n            &nbsp; | &nbsp;\n            <div class=\"fb-like\" data-layout=\"button_count\" data-share=\"true\"></div>\n          {% endif %}\n```\n\n~~在其后面添加如下内容：~~\n\n```html\n{% if theme.leancloud_visitors.enable %}\n\t\t  \t <span id=\"{{ url_for(post.path) }}\"class=\"leancloud_visitors\"  data-flag-title=\"{{ post.title }}\">\n            &nbsp; | &nbsp; {{__('post.visitors')}}\n            </span>\n\t\t  {% endif %}\n```\n\n~~添加完毕之后，文件内容像这个样子：~~\n\n```html\n          {% if not is_index and theme.facebook_sdk.enable and theme.facebook_sdk.like_button %}\n            &nbsp; | &nbsp;\n            <div class=\"fb-like\" data-layout=\"button_count\" data-share=\"true\"></div>\n          {% endif %}\n\t\t\t {% if theme.leancloud_visitors.enable %}\n\t\t  \t <span id=\"{{ url_for(post.path) }}\"class=\"leancloud_visitors\"  data-flag-title=\"{{ post.title }}\">\n            &nbsp; | &nbsp; {{__('post.visitors')}}\n            </span>\n\t\t  {% endif %}\n        </div>\n      </header>\n    {% endif %}\n```\n\n#### ~~修改`layout.swig`文件~~\n\n~~在NexT根目录的`layout`路径下，打开 `_layout.swig`文件，在`</body>`上方添加如下内容：~~\n```html\n{% if theme.leancloud_visitors.enable %}\n  \t {% include '_scripts/lean-analytics.swig' %}\n  {%  endif %}\n```\n\n~~添加完成之后，文件内容像这个样子：~~\n\n```html\n{# LazyLoad #}\n  <script type=\"text/javascript\" src=\"{{ url_for(theme.js) }}/lazyload.js\"></script>\n  <script type=\"text/javascript\">\n    $(function () {\n      $(\"#posts\").find('img').lazyload({\n        placeholder: \"{{ url_for(theme.images) }}/loading.gif\",\n        effect: \"fadeIn\"\n      });\n    });\n  </script>\n  {% if theme.leancloud_visitors.enable %}\n  \t {% include '_scripts/lean-analytics.swig' %}\n  {%  endif %}\n</body>\n</html>\n```\n\n#### ~~修改`zh-Hans.yml`文件~~\n\n~~在NexT目录的`languages`路径下的`zh-Hans.yml`文件，在`post:`结点下添加`visitors: 阅读次数`，像这个样子：~~\n```html\npost:\n  posted: 发表于\n  visitors: 阅读次数\n  updated: 更新于\n  in: 分类于\n  read_more: 阅读全文\n  untitled: 未命名\n  toc_empty: 此文章未包含目录\n```\n\n~~** 如果你使用的是其它NexT的语言，请相应的添加该字段即可。**~~\n\n~~至此NexT的修改工作就完成了，但是现在还是不能够使用文章阅读量这个统计功能的。这个功能依赖于[LeanCloud](https://leancloud.cn/)提供后端数据存取，因此我们需要注册一个[LeanCloud帐号](https://leancloud.cn/login.html#/signup)才能继续使用这个功能，**[点我快速注册](https://leancloud.cn/login.html#/signup).**~~\n\n\n\n-----\n\n\n\n### 配置[LeanCloud](https://leancloud.cn)\n\n在注册完成LeanCloud帐号并验证邮箱之后，我们就可以登录我们的LeanCloud帐号，进行一番配置之后拿到`AppID`以及`AppKey`这两个参数即可正常使用文章阅读量统计的功能了。\n\n\n#### 创建应用\n\n- 我们新建一个应用来专门进行博客的访问统计的数据操作。首先，打开控制台，如下图所示：\n\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/open_consoloe.png \"打开控制台\")\n\n- 在出现的界面点击`创建应用`：\n\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/create_app.png \"创建应用\")\n\n- 在接下来的页面，新建的应用名称我们可以随意输入，即便是输入的不满意我们后续也是可以更改的:\n\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/creating_app.png \"创建的新应用名称\")\n\n- 这里为了演示的方便，我新创建一个取名为test的应用。创建完成之后我们点击新创建的应用的名字来进行该应用的参数配置：\n\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/create_class.png \"打开应用参数配置界面\")\n\n- 在应用的数据配置界面，左侧下划线开头的都是系统预定义好的表，为了便于区分我们新建一张表来保存我们的数据。点击左侧右上角的齿轮图标，新建Class：\n   在弹出的选项中选择`创建Class`来新建Class用来专门保存我们博客的文章访问量等数据:\n   点击`创建Class`之后，~~理论上来说名字可以随意取名，只要你交互代码做相应的更改即可~~，但是为了保证我们前面对NexT主题的修改兼容，此处的**<font color=green>新建Class名字必须为<font color=red >`Counter`**</font></font>:\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/creating_class.png \"权限配置\")\n\n- 由于LeanCloud升级了默认的ACL权限，如果你想避免后续因为权限的问题导致次数统计显示不正常，建议在此处选择`无限制`。\n\n\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/open_app_key.png \"打开应用设置\")\n\n创建完成之后，左侧数据栏应该会多出一栏名为`Counter`的栏目，这个时候我们点击顶部的设置，切换到test应用的操作界面:\n在弹出的界面中，选择左侧的`应用Key`选项，即可发现我们创建应用的`AppID`以及`AppKey`，有了它，我们就有权限能够通过主题中配置好的Javascript代码与这个应用的Counter表进行数据存取操作了:\n\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/opened_app_key.png \"获取Appid、Appkey\")\n\n复制`AppID`以及`AppKey`并在NexT主题的`_config.yml`文件中我们相应的位置填入即可，正确配置之后文件内容像这个样子:\n\n```html\nleancloud_visitors:\n  enable: true\n  app_id: joaeuuc4hsqudUUwx4gIvGF6-gzGzoHsz\n  app_key: E9UJsJpw1omCHuS22PdSpKoh\n```\n\n这个时候重新生成部署Hexo博客，应该就可以正常使用文章阅读量统计的功能了。需要特别说明的是：记录文章访问量的唯一标识符是文章的`发布日期`以及`文章的标题`，因此请确保这两个数值组合的唯一性，如果你更改了这两个数值，会造成文章阅读数值的清零重计。\n\n### 后台管理\n\n当你配置部分完成之后，初始的文章统计量显示为0，但是这个时候我们LeanCloud对应的应用的`Counter`表中并没有相应的记录，只是单纯的显示为0而已，当博客文章在配置好阅读量统计服务之后第一次打开时，便会自动向服务器发送数据来创建一条数据，该数据会被记录在对应的应用的`Counter`表中。\n\n\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/background.png \"后台管理\")\n\n我们可以修改其中的`time`字段的数值来达到修改某一篇文章的访问量的目的（博客文章访问量快递提升人气的装逼利器）。双击具体的数值，修改之后回车即可保存。\n\n-  `url`字段被当作唯一`ID`来使用，因此如果你不知道带来的后果的话请不要修改。\n-  `title`字段显示的是博客文章的标题，用于后台管理的时候区分文章之用，没有什么实际作用。\n-  其他字段皆为自动生成，具体作用请查阅LeanCloud官方文档，如果你不知道有什么作用请不要随意修改。\n\n### Web安全\n\n因为AppID以及AppKey是暴露在外的，因此如果一些别用用心之人知道了之后用于其它目的是得不偿失的，为了确保只用于我们自己的博客，建议开启Web安全选项，这样就只能通过我们自己的域名才有权访问后台的数据了，可以进一步提升安全性。\n\n选择应用的设置的`安全中心`选项卡:\n\n\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/open_safe_center.png \"进入安全中心\")\n\n在`Web 安全域名`中填入我们自己的博客域名，来确保数据调用的安全:\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/bind_domain.png \"锁定域名\")\n\n\n如果你不知道怎么填写安全域名而或者填写完成之后发现博客文章访问量显示不正常，打开浏览器调试模式，发现如下图的输出:\n\n\n![](http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/broswer_403.png \"Web安全域名填写错误\")\n\n这说明你的安全域名填写错误，导致服务器拒绝了数据交互的请求，你可以更改为正确的安全域名或者你不知道如何修改请在本博文中留言或者放弃设置Web安全域名。\n\n\nEnjoy it！\n","slug":"为NexT主题添加文章阅读量统计功能","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoybg700542ev2j1456o8c","content":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><hr>\n<p>由于最近在折腾Android项目，需要用到一些与服务器交互、以及数据存储的相关功能，然后发现了<a href=\"https://leancloud.cn\" target=\"_blank\" rel=\"noopener\">LeanCloud</a>这家服务提供商,使用下来还感觉还挺靠谱的(请给我广告费)。正好发现他们服务提供了<a href=\"https://leancloud.cn/docs/js_guide.html\" target=\"_blank\" rel=\"noopener\">JavaScript SDK</a>，于是就想着尝试着实现Hexo博客文章的浏览数统计功能，之前虽然在使用不蒜子，但是不蒜子不能够在主页展示文章阅读量啊！对于博主这种有强迫症又想装X的人来说果断不能忍啊！</p>\n<h3 id=\"修改NexT主题模版\"><a href=\"#修改NexT主题模版\" class=\"headerlink\" title=\"修改NexT主题模版\"></a><del>修改NexT主题模版</del></h3><p><del>本方法理论上对Hexo博客通用，由于博主使用的是NexT主题，所以当然针对NexT来说咯。</del><strong><font color=\"red\">NexT主题目前已经合并这个Feature，因此如果你使用的是NexT主题，可以直接使用不用修改主题模版而直接在<code>_config.yml</code>中配置即可，请直接跳转查看<a href=\"#%E9%85%8D%E7%BD%AELeanCloud\">配置LeanCloud</a></font></strong></p>\n<a id=\"more\"></a>\n<h4 id=\"修改-config-yml文件\"><a href=\"#修改-config-yml文件\" class=\"headerlink\" title=\"修改_config.yml文件\"></a><del>修改<code>_config.yml</code>文件</del></h4><p><del>打开NexT主题的根目录下的<code>_config.yml</code>文件，在任意位置添加以下内容：</del></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">leancloud_visitors:</span><br><span class=\"line\">  enable: <span class=\"literal\">true</span></span><br><span class=\"line\">  app_id: #&lt;AppID&gt;</span><br><span class=\"line\">  app_key: #&lt;AppKEY&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加lean-analytics-swig文件\"><a href=\"#添加lean-analytics-swig文件\" class=\"headerlink\" title=\"添加lean-analytics.swig文件\"></a><del>添加<code>lean-analytics.swig</code>文件</del></h4><p><del>在主题的<code>layout\\_scripts</code>路径下，新建一个<code>lean-analytics.swig</code>文件，并向里面添加以下内容</del></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- custom analytics part create by xiamo --&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.1.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;AV.initialize(<span class=\"string\">\"&#123;&#123;theme.leancloud_visitors.app_id&#125;&#125;\"</span>, <span class=\"string\">\"&#123;&#123;theme.leancloud_visitors.app_key&#125;&#125;\"</span>);&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showTime</span>(<span class=\"params\">Counter</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> query = <span class=\"keyword\">new</span> AV.Query(Counter);</span><br><span class=\"line\">\t$(<span class=\"string\">\".leancloud_visitors\"</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> url = $(<span class=\"keyword\">this</span>).attr(<span class=\"string\">\"id\"</span>).trim();</span><br><span class=\"line\">\t\tquery.equalTo(<span class=\"string\">\"url\"</span>, url);</span><br><span class=\"line\">\t\tquery.find(&#123;</span><br><span class=\"line\">\t\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (results.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">var</span> content = $(<span class=\"built_in\">document</span>.getElementById(url)).text() + <span class=\"string\">': 0'</span>;</span><br><span class=\"line\">\t\t\t\t\t$(<span class=\"built_in\">document</span>.getElementById(url)).text(content);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; results.length; i++) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">var</span> object = results[i];</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">var</span> content = $(<span class=\"built_in\">document</span>.getElementById(url)).text() + <span class=\"string\">': '</span> + object.get(<span class=\"string\">'time'</span>);</span><br><span class=\"line\">\t\t\t\t\t$(<span class=\"built_in\">document</span>.getElementById(url)).text(content);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\terror: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object, error</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"Error: \"</span> + error.code + <span class=\"string\">\" \"</span> + error.message);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addCount</span>(<span class=\"params\">Counter</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> Counter = AV.Object.extend(<span class=\"string\">\"Counter\"</span>);</span><br><span class=\"line\">\turl = $(<span class=\"string\">\".leancloud_visitors\"</span>).attr(<span class=\"string\">'id'</span>).trim();</span><br><span class=\"line\">\ttitle = $(<span class=\"string\">\".leancloud_visitors\"</span>).attr(<span class=\"string\">'data-flag-title'</span>).trim();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> query = <span class=\"keyword\">new</span> AV.Query(Counter);</span><br><span class=\"line\">\tquery.equalTo(<span class=\"string\">\"url\"</span>, url);</span><br><span class=\"line\">\tquery.find(&#123;</span><br><span class=\"line\">\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (results.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> counter = results[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\t\tcounter.fetchWhenSave(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\t\t\tcounter.increment(<span class=\"string\">\"time\"</span>);</span><br><span class=\"line\">\t\t\t\tcounter.save(<span class=\"literal\">null</span>, &#123;</span><br><span class=\"line\">\t\t\t\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">counter</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">var</span> content = $(<span class=\"built_in\">document</span>.getElementById(url)).text() + <span class=\"string\">': '</span> + counter.get(<span class=\"string\">'time'</span>);</span><br><span class=\"line\">\t\t\t\t\t\t$(<span class=\"built_in\">document</span>.getElementById(url)).text(content);</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\terror: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">counter, error</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Failed to save Visitor num, with error message: '</span> + error.message);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> newcounter = <span class=\"keyword\">new</span> Counter();</span><br><span class=\"line\">\t\t\t\tnewcounter.set(<span class=\"string\">\"title\"</span>, title);</span><br><span class=\"line\">\t\t\t\tnewcounter.set(<span class=\"string\">\"url\"</span>, url);</span><br><span class=\"line\">\t\t\t\tnewcounter.set(<span class=\"string\">\"time\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\tnewcounter.save(<span class=\"literal\">null</span>, &#123;</span><br><span class=\"line\">\t\t\t\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newcounter</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"newcounter.get('time')=\"</span>+newcounter.get(<span class=\"string\">'time'</span>));</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">var</span> content = $(<span class=\"built_in\">document</span>.getElementById(url)).text() + <span class=\"string\">': '</span> + newcounter.get(<span class=\"string\">'time'</span>);</span><br><span class=\"line\">\t\t\t\t\t\t$(<span class=\"built_in\">document</span>.getElementById(url)).text(content);</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\terror: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newcounter, error</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Failed to create'</span>);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\terror: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Error:'</span> + error.code + <span class=\"string\">\" \"</span> + error.message);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> Counter = AV.Object.extend(<span class=\"string\">\"Counter\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ($(<span class=\"string\">'.leancloud_visitors'</span>).length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\taddCount(Counter);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ($(<span class=\"string\">'.post-title-link'</span>).length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tshowTime(Counter);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"修改post-swig文件\"><a href=\"#修改post-swig文件\" class=\"headerlink\" title=\"修改post.swig文件\"></a><del>修改<code>post.swig</code>文件</del></h4><p><del>在主题的<code>layout\\_macro</code>路径下，打开<code>post.swig</code>文件，找到以下内容（大概88行）：</del></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if not is_index and theme.facebook_sdk.enable and theme.facebook_sdk.like_button %&#125;</span><br><span class=\"line\">  &amp;nbsp; | &amp;nbsp;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fb-like\"</span> <span class=\"attr\">data-layout</span>=<span class=\"string\">\"button_count\"</span> <span class=\"attr\">data-share</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<p><del>在其后面添加如下内容：</del></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if theme.leancloud_visitors.enable %&#125;</span><br><span class=\"line\">\t\t  \t <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"&#123;&#123; url_for(post.path) &#125;&#125;\"</span><span class=\"attr\">class</span>=<span class=\"string\">\"leancloud_visitors\"</span>  <span class=\"attr\">data-flag-title</span>=<span class=\"string\">\"&#123;&#123; post.title &#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">            &amp;nbsp; | &amp;nbsp; &#123;&#123;__('post.visitors')&#125;&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t  &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<p><del>添加完毕之后，文件内容像这个样子：</del></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      &#123;% if not is_index and theme.facebook_sdk.enable and theme.facebook_sdk.like_button %&#125;</span><br><span class=\"line\">        &amp;nbsp; | &amp;nbsp;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fb-like\"</span> <span class=\"attr\">data-layout</span>=<span class=\"string\">\"button_count\"</span> <span class=\"attr\">data-share</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      &#123;% endif %&#125;</span><br><span class=\"line\">&#123;% if theme.leancloud_visitors.enable %&#125;</span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"&#123;&#123; url_for(post.path) &#125;&#125;\"</span><span class=\"attr\">class</span>=<span class=\"string\">\"leancloud_visitors\"</span>  <span class=\"attr\">data-flag-title</span>=<span class=\"string\">\"&#123;&#123; post.title &#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">        &amp;nbsp; | &amp;nbsp; &#123;&#123;__('post.visitors')&#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">&#123;% endif %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改layout-swig文件\"><a href=\"#修改layout-swig文件\" class=\"headerlink\" title=\"修改layout.swig文件\"></a><del>修改<code>layout.swig</code>文件</del></h4><p><del>在NexT根目录的<code>layout</code>路径下，打开 <code>_layout.swig</code>文件，在<code>&lt;/body&gt;</code>上方添加如下内容：</del><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if theme.leancloud_visitors.enable %&#125;</span><br><span class=\"line\">  \t &#123;% include '_scripts/lean-analytics.swig' %&#125;</span><br><span class=\"line\">  &#123;%  endif %&#125;</span><br></pre></td></tr></table></figure></p>\n<p><del>添加完成之后，文件内容像这个样子：</del></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;# LazyLoad #&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123; url_for(theme.js) &#125;&#125;/lazyload.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      $(<span class=\"string\">\"#posts\"</span>).find(<span class=\"string\">'img'</span>).lazyload(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        placeholder: <span class=\"string\">\"&#123;&#123; url_for(theme.images) &#125;&#125;/loading.gif\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        effect: <span class=\"string\">\"fadeIn\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  &#123;% if theme.leancloud_visitors.enable %&#125;</span><br><span class=\"line\">  \t &#123;% include '_scripts/lean-analytics.swig' %&#125;</span><br><span class=\"line\">  &#123;%  endif %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"修改zh-Hans-yml文件\"><a href=\"#修改zh-Hans-yml文件\" class=\"headerlink\" title=\"修改zh-Hans.yml文件\"></a><del>修改<code>zh-Hans.yml</code>文件</del></h4><p><del>在NexT目录的<code>languages</code>路径下的<code>zh-Hans.yml</code>文件，在<code>post:</code>结点下添加<code>visitors: 阅读次数</code>，像这个样子：</del><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post:</span><br><span class=\"line\">  posted: 发表于</span><br><span class=\"line\">  visitors: 阅读次数</span><br><span class=\"line\">  updated: 更新于</span><br><span class=\"line\">  in: 分类于</span><br><span class=\"line\">  read_more: 阅读全文</span><br><span class=\"line\">  untitled: 未命名</span><br><span class=\"line\">  toc_empty: 此文章未包含目录</span><br></pre></td></tr></table></figure></p>\n<p><del><strong> 如果你使用的是其它NexT的语言，请相应的添加该字段即可。</strong></del></p>\n<p><del>至此NexT的修改工作就完成了，但是现在还是不能够使用文章阅读量这个统计功能的。这个功能依赖于<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">LeanCloud</a>提供后端数据存取，因此我们需要注册一个<a href=\"https://leancloud.cn/login.html#/signup\" target=\"_blank\" rel=\"noopener\">LeanCloud帐号</a>才能继续使用这个功能，<strong><a href=\"https://leancloud.cn/login.html#/signup\" target=\"_blank\" rel=\"noopener\">点我快速注册</a>.</strong></del></p>\n<hr>\n<h3 id=\"配置LeanCloud\"><a href=\"#配置LeanCloud\" class=\"headerlink\" title=\"配置LeanCloud\"></a>配置<a href=\"https://leancloud.cn\" target=\"_blank\" rel=\"noopener\">LeanCloud</a></h3><p>在注册完成LeanCloud帐号并验证邮箱之后，我们就可以登录我们的LeanCloud帐号，进行一番配置之后拿到<code>AppID</code>以及<code>AppKey</code>这两个参数即可正常使用文章阅读量统计的功能了。</p>\n<h4 id=\"创建应用\"><a href=\"#创建应用\" class=\"headerlink\" title=\"创建应用\"></a>创建应用</h4><ul>\n<li>我们新建一个应用来专门进行博客的访问统计的数据操作。首先，打开控制台，如下图所示：</li>\n</ul>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/open_consoloe.png\" alt title=\"打开控制台\"></p>\n<ul>\n<li>在出现的界面点击<code>创建应用</code>：</li>\n</ul>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/create_app.png\" alt title=\"创建应用\"></p>\n<ul>\n<li>在接下来的页面，新建的应用名称我们可以随意输入，即便是输入的不满意我们后续也是可以更改的:</li>\n</ul>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/creating_app.png\" alt title=\"创建的新应用名称\"></p>\n<ul>\n<li>这里为了演示的方便，我新创建一个取名为test的应用。创建完成之后我们点击新创建的应用的名字来进行该应用的参数配置：</li>\n</ul>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/create_class.png\" alt title=\"打开应用参数配置界面\"></p>\n<ul>\n<li>在应用的数据配置界面，左侧下划线开头的都是系统预定义好的表，为了便于区分我们新建一张表来保存我们的数据。点击左侧右上角的齿轮图标，新建Class：<br> 在弹出的选项中选择<code>创建Class</code>来新建Class用来专门保存我们博客的文章访问量等数据:<br> 点击<code>创建Class</code>之后，<del>理论上来说名字可以随意取名，只要你交互代码做相应的更改即可</del>，但是为了保证我们前面对NexT主题的修改兼容，此处的<strong><font color=\"green\">新建Class名字必须为<font color=\"red\"><code>Counter</code></font></font></strong>:</li>\n</ul>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/creating_class.png\" alt title=\"权限配置\"></p>\n<ul>\n<li>由于LeanCloud升级了默认的ACL权限，如果你想避免后续因为权限的问题导致次数统计显示不正常，建议在此处选择<code>无限制</code>。</li>\n</ul>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/open_app_key.png\" alt title=\"打开应用设置\"></p>\n<p>创建完成之后，左侧数据栏应该会多出一栏名为<code>Counter</code>的栏目，这个时候我们点击顶部的设置，切换到test应用的操作界面:<br>在弹出的界面中，选择左侧的<code>应用Key</code>选项，即可发现我们创建应用的<code>AppID</code>以及<code>AppKey</code>，有了它，我们就有权限能够通过主题中配置好的Javascript代码与这个应用的Counter表进行数据存取操作了:</p>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/opened_app_key.png\" alt title=\"获取Appid、Appkey\"></p>\n<p>复制<code>AppID</code>以及<code>AppKey</code>并在NexT主题的<code>_config.yml</code>文件中我们相应的位置填入即可，正确配置之后文件内容像这个样子:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">leancloud_visitors:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  app_id: joaeuuc4hsqudUUwx4gIvGF6-gzGzoHsz</span><br><span class=\"line\">  app_key: E9UJsJpw1omCHuS22PdSpKoh</span><br></pre></td></tr></table></figure>\n<p>这个时候重新生成部署Hexo博客，应该就可以正常使用文章阅读量统计的功能了。需要特别说明的是：记录文章访问量的唯一标识符是文章的<code>发布日期</code>以及<code>文章的标题</code>，因此请确保这两个数值组合的唯一性，如果你更改了这两个数值，会造成文章阅读数值的清零重计。</p>\n<h3 id=\"后台管理\"><a href=\"#后台管理\" class=\"headerlink\" title=\"后台管理\"></a>后台管理</h3><p>当你配置部分完成之后，初始的文章统计量显示为0，但是这个时候我们LeanCloud对应的应用的<code>Counter</code>表中并没有相应的记录，只是单纯的显示为0而已，当博客文章在配置好阅读量统计服务之后第一次打开时，便会自动向服务器发送数据来创建一条数据，该数据会被记录在对应的应用的<code>Counter</code>表中。</p>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/background.png\" alt title=\"后台管理\"></p>\n<p>我们可以修改其中的<code>time</code>字段的数值来达到修改某一篇文章的访问量的目的（博客文章访问量快递提升人气的装逼利器）。双击具体的数值，修改之后回车即可保存。</p>\n<ul>\n<li><code>url</code>字段被当作唯一<code>ID</code>来使用，因此如果你不知道带来的后果的话请不要修改。</li>\n<li><code>title</code>字段显示的是博客文章的标题，用于后台管理的时候区分文章之用，没有什么实际作用。</li>\n<li>其他字段皆为自动生成，具体作用请查阅LeanCloud官方文档，如果你不知道有什么作用请不要随意修改。</li>\n</ul>\n<h3 id=\"Web安全\"><a href=\"#Web安全\" class=\"headerlink\" title=\"Web安全\"></a>Web安全</h3><p>因为AppID以及AppKey是暴露在外的，因此如果一些别用用心之人知道了之后用于其它目的是得不偿失的，为了确保只用于我们自己的博客，建议开启Web安全选项，这样就只能通过我们自己的域名才有权访问后台的数据了，可以进一步提升安全性。</p>\n<p>选择应用的设置的<code>安全中心</code>选项卡:</p>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/open_safe_center.png\" alt title=\"进入安全中心\"></p>\n<p>在<code>Web 安全域名</code>中填入我们自己的博客域名，来确保数据调用的安全:</p>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/bind_domain.png\" alt title=\"锁定域名\"></p>\n<p>如果你不知道怎么填写安全域名而或者填写完成之后发现博客文章访问量显示不正常，打开浏览器调试模式，发现如下图的输出:</p>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/broswer_403.png\" alt title=\"Web安全域名填写错误\"></p>\n<p>这说明你的安全域名填写错误，导致服务器拒绝了数据交互的请求，你可以更改为正确的安全域名或者你不知道如何修改请在本博文中留言或者放弃设置Web安全域名。</p>\n<p>Enjoy it！</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h3><hr>\n<p>由于最近在折腾Android项目，需要用到一些与服务器交互、以及数据存储的相关功能，然后发现了<a href=\"https://leancloud.cn\" target=\"_blank\" rel=\"noopener\">LeanCloud</a>这家服务提供商,使用下来还感觉还挺靠谱的(请给我广告费)。正好发现他们服务提供了<a href=\"https://leancloud.cn/docs/js_guide.html\" target=\"_blank\" rel=\"noopener\">JavaScript SDK</a>，于是就想着尝试着实现Hexo博客文章的浏览数统计功能，之前虽然在使用不蒜子，但是不蒜子不能够在主页展示文章阅读量啊！对于博主这种有强迫症又想装X的人来说果断不能忍啊！</p>\n<h3 id=\"修改NexT主题模版\"><a href=\"#修改NexT主题模版\" class=\"headerlink\" title=\"修改NexT主题模版\"></a><del>修改NexT主题模版</del></h3><p><del>本方法理论上对Hexo博客通用，由于博主使用的是NexT主题，所以当然针对NexT来说咯。</del><strong><font color=\"red\">NexT主题目前已经合并这个Feature，因此如果你使用的是NexT主题，可以直接使用不用修改主题模版而直接在<code>_config.yml</code>中配置即可，请直接跳转查看<a href=\"#%E9%85%8D%E7%BD%AELeanCloud\">配置LeanCloud</a></font></strong></p>","more":"<h4 id=\"修改-config-yml文件\"><a href=\"#修改-config-yml文件\" class=\"headerlink\" title=\"修改_config.yml文件\"></a><del>修改<code>_config.yml</code>文件</del></h4><p><del>打开NexT主题的根目录下的<code>_config.yml</code>文件，在任意位置添加以下内容：</del></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">leancloud_visitors:</span><br><span class=\"line\">  enable: <span class=\"literal\">true</span></span><br><span class=\"line\">  app_id: #&lt;AppID&gt;</span><br><span class=\"line\">  app_key: #&lt;AppKEY&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"添加lean-analytics-swig文件\"><a href=\"#添加lean-analytics-swig文件\" class=\"headerlink\" title=\"添加lean-analytics.swig文件\"></a><del>添加<code>lean-analytics.swig</code>文件</del></h4><p><del>在主题的<code>layout\\_scripts</code>路径下，新建一个<code>lean-analytics.swig</code>文件，并向里面添加以下内容</del></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- custom analytics part create by xiamo --&gt;</span><br><span class=\"line\">&lt;script src=<span class=\"string\">\"https://cdn1.lncld.net/static/js/av-core-mini-0.6.1.js\"</span>&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;AV.initialize(<span class=\"string\">\"&#123;&#123;theme.leancloud_visitors.app_id&#125;&#125;\"</span>, <span class=\"string\">\"&#123;&#123;theme.leancloud_visitors.app_key&#125;&#125;\"</span>);&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">showTime</span>(<span class=\"params\">Counter</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> query = <span class=\"keyword\">new</span> AV.Query(Counter);</span><br><span class=\"line\">\t$(<span class=\"string\">\".leancloud_visitors\"</span>).each(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">var</span> url = $(<span class=\"keyword\">this</span>).attr(<span class=\"string\">\"id\"</span>).trim();</span><br><span class=\"line\">\t\tquery.equalTo(<span class=\"string\">\"url\"</span>, url);</span><br><span class=\"line\">\t\tquery.find(&#123;</span><br><span class=\"line\">\t\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (results.length == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">var</span> content = $(<span class=\"built_in\">document</span>.getElementById(url)).text() + <span class=\"string\">': 0'</span>;</span><br><span class=\"line\">\t\t\t\t\t$(<span class=\"built_in\">document</span>.getElementById(url)).text(content);</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">return</span>;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; results.length; i++) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">var</span> object = results[i];</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">var</span> content = $(<span class=\"built_in\">document</span>.getElementById(url)).text() + <span class=\"string\">': '</span> + object.get(<span class=\"string\">'time'</span>);</span><br><span class=\"line\">\t\t\t\t\t$(<span class=\"built_in\">document</span>.getElementById(url)).text(content);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t\t\terror: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">object, error</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">\"Error: \"</span> + error.code + <span class=\"string\">\" \"</span> + error.message);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">addCount</span>(<span class=\"params\">Counter</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> Counter = AV.Object.extend(<span class=\"string\">\"Counter\"</span>);</span><br><span class=\"line\">\turl = $(<span class=\"string\">\".leancloud_visitors\"</span>).attr(<span class=\"string\">'id'</span>).trim();</span><br><span class=\"line\">\ttitle = $(<span class=\"string\">\".leancloud_visitors\"</span>).attr(<span class=\"string\">'data-flag-title'</span>).trim();</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> query = <span class=\"keyword\">new</span> AV.Query(Counter);</span><br><span class=\"line\">\tquery.equalTo(<span class=\"string\">\"url\"</span>, url);</span><br><span class=\"line\">\tquery.find(&#123;</span><br><span class=\"line\">\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">results</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (results.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> counter = results[<span class=\"number\">0</span>];</span><br><span class=\"line\">\t\t\t\tcounter.fetchWhenSave(<span class=\"literal\">true</span>);</span><br><span class=\"line\">\t\t\t\tcounter.increment(<span class=\"string\">\"time\"</span>);</span><br><span class=\"line\">\t\t\t\tcounter.save(<span class=\"literal\">null</span>, &#123;</span><br><span class=\"line\">\t\t\t\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">counter</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">var</span> content = $(<span class=\"built_in\">document</span>.getElementById(url)).text() + <span class=\"string\">': '</span> + counter.get(<span class=\"string\">'time'</span>);</span><br><span class=\"line\">\t\t\t\t\t\t$(<span class=\"built_in\">document</span>.getElementById(url)).text(content);</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\terror: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">counter, error</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Failed to save Visitor num, with error message: '</span> + error.message);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">var</span> newcounter = <span class=\"keyword\">new</span> Counter();</span><br><span class=\"line\">\t\t\t\tnewcounter.set(<span class=\"string\">\"title\"</span>, title);</span><br><span class=\"line\">\t\t\t\tnewcounter.set(<span class=\"string\">\"url\"</span>, url);</span><br><span class=\"line\">\t\t\t\tnewcounter.set(<span class=\"string\">\"time\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t\t\tnewcounter.save(<span class=\"literal\">null</span>, &#123;</span><br><span class=\"line\">\t\t\t\t\tsuccess: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newcounter</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t    <span class=\"built_in\">console</span>.log(<span class=\"string\">\"newcounter.get('time')=\"</span>+newcounter.get(<span class=\"string\">'time'</span>));</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"keyword\">var</span> content = $(<span class=\"built_in\">document</span>.getElementById(url)).text() + <span class=\"string\">': '</span> + newcounter.get(<span class=\"string\">'time'</span>);</span><br><span class=\"line\">\t\t\t\t\t\t$(<span class=\"built_in\">document</span>.getElementById(url)).text(content);</span><br><span class=\"line\">\t\t\t\t\t&#125;,</span><br><span class=\"line\">\t\t\t\t\terror: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">newcounter, error</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Failed to create'</span>);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t\terror: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">error</span>) </span>&#123;</span><br><span class=\"line\">\t\t\t<span class=\"built_in\">console</span>.log(<span class=\"string\">'Error:'</span> + error.code + <span class=\"string\">\" \"</span> + error.message);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">$(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> Counter = AV.Object.extend(<span class=\"string\">\"Counter\"</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> ($(<span class=\"string\">'.leancloud_visitors'</span>).length == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\taddCount(Counter);</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> ($(<span class=\"string\">'.post-title-link'</span>).length &gt; <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">\t\tshowTime(Counter);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"修改post-swig文件\"><a href=\"#修改post-swig文件\" class=\"headerlink\" title=\"修改post.swig文件\"></a><del>修改<code>post.swig</code>文件</del></h4><p><del>在主题的<code>layout\\_macro</code>路径下，打开<code>post.swig</code>文件，找到以下内容（大概88行）：</del></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if not is_index and theme.facebook_sdk.enable and theme.facebook_sdk.like_button %&#125;</span><br><span class=\"line\">  &amp;nbsp; | &amp;nbsp;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fb-like\"</span> <span class=\"attr\">data-layout</span>=<span class=\"string\">\"button_count\"</span> <span class=\"attr\">data-share</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<p><del>在其后面添加如下内容：</del></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if theme.leancloud_visitors.enable %&#125;</span><br><span class=\"line\">\t\t  \t <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"&#123;&#123; url_for(post.path) &#125;&#125;\"</span><span class=\"attr\">class</span>=<span class=\"string\">\"leancloud_visitors\"</span>  <span class=\"attr\">data-flag-title</span>=<span class=\"string\">\"&#123;&#123; post.title &#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">            &amp;nbsp; | &amp;nbsp; &#123;&#123;__('post.visitors')&#125;&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">\t\t  &#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<p><del>添加完毕之后，文件内容像这个样子：</del></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">      &#123;% if not is_index and theme.facebook_sdk.enable and theme.facebook_sdk.like_button %&#125;</span><br><span class=\"line\">        &amp;nbsp; | &amp;nbsp;</span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"fb-like\"</span> <span class=\"attr\">data-layout</span>=<span class=\"string\">\"button_count\"</span> <span class=\"attr\">data-share</span>=<span class=\"string\">\"true\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">      &#123;% endif %&#125;</span><br><span class=\"line\">&#123;% if theme.leancloud_visitors.enable %&#125;</span><br><span class=\"line\">\t <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">id</span>=<span class=\"string\">\"&#123;&#123; url_for(post.path) &#125;&#125;\"</span><span class=\"attr\">class</span>=<span class=\"string\">\"leancloud_visitors\"</span>  <span class=\"attr\">data-flag-title</span>=<span class=\"string\">\"&#123;&#123; post.title &#125;&#125;\"</span>&gt;</span></span><br><span class=\"line\">        &amp;nbsp; | &amp;nbsp; &#123;&#123;__('post.visitors')&#125;&#125;</span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\">&#123;% endif %&#125;</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">header</span>&gt;</span></span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"修改layout-swig文件\"><a href=\"#修改layout-swig文件\" class=\"headerlink\" title=\"修改layout.swig文件\"></a><del>修改<code>layout.swig</code>文件</del></h4><p><del>在NexT根目录的<code>layout</code>路径下，打开 <code>_layout.swig</code>文件，在<code>&lt;/body&gt;</code>上方添加如下内容：</del><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;% if theme.leancloud_visitors.enable %&#125;</span><br><span class=\"line\">  \t &#123;% include '_scripts/lean-analytics.swig' %&#125;</span><br><span class=\"line\">  &#123;%  endif %&#125;</span><br></pre></td></tr></table></figure></p>\n<p><del>添加完成之后，文件内容像这个样子：</del></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;# LazyLoad #&#125;</span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span> <span class=\"attr\">src</span>=<span class=\"string\">\"&#123;&#123; url_for(theme.js) &#125;&#125;/lazyload.js\"</span>&gt;</span><span class=\"undefined\"></span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text/javascript\"</span>&gt;</span><span class=\"undefined\"></span></span><br><span class=\"line\"><span class=\"javascript\">    $(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      $(<span class=\"string\">\"#posts\"</span>).find(<span class=\"string\">'img'</span>).lazyload(&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        placeholder: <span class=\"string\">\"&#123;&#123; url_for(theme.images) &#125;&#125;/loading.gif\"</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">        effect: <span class=\"string\">\"fadeIn\"</span></span></span><br><span class=\"line\"><span class=\"undefined\">      &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">    &#125;);</span></span><br><span class=\"line\"><span class=\"undefined\">  </span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  &#123;% if theme.leancloud_visitors.enable %&#125;</span><br><span class=\"line\">  \t &#123;% include '_scripts/lean-analytics.swig' %&#125;</span><br><span class=\"line\">  &#123;%  endif %&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"修改zh-Hans-yml文件\"><a href=\"#修改zh-Hans-yml文件\" class=\"headerlink\" title=\"修改zh-Hans.yml文件\"></a><del>修改<code>zh-Hans.yml</code>文件</del></h4><p><del>在NexT目录的<code>languages</code>路径下的<code>zh-Hans.yml</code>文件，在<code>post:</code>结点下添加<code>visitors: 阅读次数</code>，像这个样子：</del><br><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post:</span><br><span class=\"line\">  posted: 发表于</span><br><span class=\"line\">  visitors: 阅读次数</span><br><span class=\"line\">  updated: 更新于</span><br><span class=\"line\">  in: 分类于</span><br><span class=\"line\">  read_more: 阅读全文</span><br><span class=\"line\">  untitled: 未命名</span><br><span class=\"line\">  toc_empty: 此文章未包含目录</span><br></pre></td></tr></table></figure></p>\n<p><del><strong> 如果你使用的是其它NexT的语言，请相应的添加该字段即可。</strong></del></p>\n<p><del>至此NexT的修改工作就完成了，但是现在还是不能够使用文章阅读量这个统计功能的。这个功能依赖于<a href=\"https://leancloud.cn/\" target=\"_blank\" rel=\"noopener\">LeanCloud</a>提供后端数据存取，因此我们需要注册一个<a href=\"https://leancloud.cn/login.html#/signup\" target=\"_blank\" rel=\"noopener\">LeanCloud帐号</a>才能继续使用这个功能，<strong><a href=\"https://leancloud.cn/login.html#/signup\" target=\"_blank\" rel=\"noopener\">点我快速注册</a>.</strong></del></p>\n<hr>\n<h3 id=\"配置LeanCloud\"><a href=\"#配置LeanCloud\" class=\"headerlink\" title=\"配置LeanCloud\"></a>配置<a href=\"https://leancloud.cn\" target=\"_blank\" rel=\"noopener\">LeanCloud</a></h3><p>在注册完成LeanCloud帐号并验证邮箱之后，我们就可以登录我们的LeanCloud帐号，进行一番配置之后拿到<code>AppID</code>以及<code>AppKey</code>这两个参数即可正常使用文章阅读量统计的功能了。</p>\n<h4 id=\"创建应用\"><a href=\"#创建应用\" class=\"headerlink\" title=\"创建应用\"></a>创建应用</h4><ul>\n<li>我们新建一个应用来专门进行博客的访问统计的数据操作。首先，打开控制台，如下图所示：</li>\n</ul>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/open_consoloe.png\" alt title=\"打开控制台\"></p>\n<ul>\n<li>在出现的界面点击<code>创建应用</code>：</li>\n</ul>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/create_app.png\" alt title=\"创建应用\"></p>\n<ul>\n<li>在接下来的页面，新建的应用名称我们可以随意输入，即便是输入的不满意我们后续也是可以更改的:</li>\n</ul>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/creating_app.png\" alt title=\"创建的新应用名称\"></p>\n<ul>\n<li>这里为了演示的方便，我新创建一个取名为test的应用。创建完成之后我们点击新创建的应用的名字来进行该应用的参数配置：</li>\n</ul>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/create_class.png\" alt title=\"打开应用参数配置界面\"></p>\n<ul>\n<li>在应用的数据配置界面，左侧下划线开头的都是系统预定义好的表，为了便于区分我们新建一张表来保存我们的数据。点击左侧右上角的齿轮图标，新建Class：<br> 在弹出的选项中选择<code>创建Class</code>来新建Class用来专门保存我们博客的文章访问量等数据:<br> 点击<code>创建Class</code>之后，<del>理论上来说名字可以随意取名，只要你交互代码做相应的更改即可</del>，但是为了保证我们前面对NexT主题的修改兼容，此处的<strong><font color=\"green\">新建Class名字必须为<font color=\"red\"><code>Counter</code></font></font></strong>:</li>\n</ul>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/creating_class.png\" alt title=\"权限配置\"></p>\n<ul>\n<li>由于LeanCloud升级了默认的ACL权限，如果你想避免后续因为权限的问题导致次数统计显示不正常，建议在此处选择<code>无限制</code>。</li>\n</ul>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/open_app_key.png\" alt title=\"打开应用设置\"></p>\n<p>创建完成之后，左侧数据栏应该会多出一栏名为<code>Counter</code>的栏目，这个时候我们点击顶部的设置，切换到test应用的操作界面:<br>在弹出的界面中，选择左侧的<code>应用Key</code>选项，即可发现我们创建应用的<code>AppID</code>以及<code>AppKey</code>，有了它，我们就有权限能够通过主题中配置好的Javascript代码与这个应用的Counter表进行数据存取操作了:</p>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/opened_app_key.png\" alt title=\"获取Appid、Appkey\"></p>\n<p>复制<code>AppID</code>以及<code>AppKey</code>并在NexT主题的<code>_config.yml</code>文件中我们相应的位置填入即可，正确配置之后文件内容像这个样子:</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">leancloud_visitors:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  app_id: joaeuuc4hsqudUUwx4gIvGF6-gzGzoHsz</span><br><span class=\"line\">  app_key: E9UJsJpw1omCHuS22PdSpKoh</span><br></pre></td></tr></table></figure>\n<p>这个时候重新生成部署Hexo博客，应该就可以正常使用文章阅读量统计的功能了。需要特别说明的是：记录文章访问量的唯一标识符是文章的<code>发布日期</code>以及<code>文章的标题</code>，因此请确保这两个数值组合的唯一性，如果你更改了这两个数值，会造成文章阅读数值的清零重计。</p>\n<h3 id=\"后台管理\"><a href=\"#后台管理\" class=\"headerlink\" title=\"后台管理\"></a>后台管理</h3><p>当你配置部分完成之后，初始的文章统计量显示为0，但是这个时候我们LeanCloud对应的应用的<code>Counter</code>表中并没有相应的记录，只是单纯的显示为0而已，当博客文章在配置好阅读量统计服务之后第一次打开时，便会自动向服务器发送数据来创建一条数据，该数据会被记录在对应的应用的<code>Counter</code>表中。</p>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/background.png\" alt title=\"后台管理\"></p>\n<p>我们可以修改其中的<code>time</code>字段的数值来达到修改某一篇文章的访问量的目的（博客文章访问量快递提升人气的装逼利器）。双击具体的数值，修改之后回车即可保存。</p>\n<ul>\n<li><code>url</code>字段被当作唯一<code>ID</code>来使用，因此如果你不知道带来的后果的话请不要修改。</li>\n<li><code>title</code>字段显示的是博客文章的标题，用于后台管理的时候区分文章之用，没有什么实际作用。</li>\n<li>其他字段皆为自动生成，具体作用请查阅LeanCloud官方文档，如果你不知道有什么作用请不要随意修改。</li>\n</ul>\n<h3 id=\"Web安全\"><a href=\"#Web安全\" class=\"headerlink\" title=\"Web安全\"></a>Web安全</h3><p>因为AppID以及AppKey是暴露在外的，因此如果一些别用用心之人知道了之后用于其它目的是得不偿失的，为了确保只用于我们自己的博客，建议开启Web安全选项，这样就只能通过我们自己的域名才有权访问后台的数据了，可以进一步提升安全性。</p>\n<p>选择应用的设置的<code>安全中心</code>选项卡:</p>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/open_safe_center.png\" alt title=\"进入安全中心\"></p>\n<p>在<code>Web 安全域名</code>中填入我们自己的博客域名，来确保数据调用的安全:</p>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/bind_domain.png\" alt title=\"锁定域名\"></p>\n<p>如果你不知道怎么填写安全域名而或者填写完成之后发现博客文章访问量显示不正常，打开浏览器调试模式，发现如下图的输出:</p>\n<p><img src=\"http://7xkj6q.com1.z0.glb.clouddn.com/static/images/leancloud-page-anlysis/broswer_403.png\" alt title=\"Web安全域名填写错误\"></p>\n<p>这说明你的安全域名填写错误，导致服务器拒绝了数据交互的请求，你可以更改为正确的安全域名或者你不知道如何修改请在本博文中留言或者放弃设置Web安全域名。</p>\n<p>Enjoy it！</p>"},{"title":"Create a Simple Android Keyboard","isupdate":false,"date":"2015-09-04T07:12:11.000Z","updatetime":null,"_content":"\n## 前言\n\n&emsp;&emsp;由于最近做的一个Android项目需要用到用户的输入一些字符，常规的输入法输入非常的不方便。因此有必要自定义一个输入法来完成这个过程。此处给出一个简单的输入法Demo\n来帮助理解自定义输入法的一些实现过程。\n\n- **有关输入法的一些说明，请参见:[Create a Android IME](http://notes.xiamo.tk/2015-04-01-Create-an-Android-IME.html)**\n\n<!--more-->\n\n## 准备工作\n\n&emsp;&emsp;磨刀不误砍柴工，创建一个Android是需要一点点准备工作的,选择一个好的IDE能够提高我们编码的效率：\n- Android Studio（推荐）\n- Android SDK\n\n本博文的编写环境为Android Studio，如果你还在使用Eclipse的话，转到Android Studio上来吧！如果对上述IDE的下载感到茫然的话，推荐一个国内Android开发的好网站：[http://www.androiddevtools.cn](http://www.androiddevtools.cn/)。\n\n## 创建一个Android项目\n\n- 打开Android Studio，创建一个新的Android项目，命名为`SimpleKeyboard`，如下图：\n\n![](http://i3.piimg.com/37ae2bfdf945c18e.png \"创建一个SimpleKeyboard项目\")\n\n- 最小的Android支持版本我们在这里选择API 9也就是Android 2.3咯：\n\n![](http://i3.piimg.com/f337c436d68dcc22.png \"设置最小SDK支持版本\")\n\n- 由于我们只是一个单独的键盘Demo，为了达到极致精简，还是不需要Activity了，因此我们选择`Add No Activity`：\n\n![](http://i3.piimg.com/fed92e215ec17e4f.png \"选择Add No Activity\")\n\n点击Finish，这样就完成了我们Android Keyboard项目的创建了。这个等待Gradle构建完成，因为我们这个项目是没有Activity的，因此我们需要按照如下图稍微配置一下：\n\n![](http://i3.piimg.com/4c72f6d152c54dee.png)\n\n![](http://i3.piimg.com/2195d3987d5dddd1.png)\n\n\n## 编辑AndroidManifest.xml文件\n\n&emsp;&emsp;键盘在Android系统中被识别为一个输入法编辑器（IME），IME作为一个Service运行。只有在AndroidManifest.xml文件中通过`android.permission.BIND_INPUT_METHOD`权限声明的Service并且响应`android.view.im`这个元数据动作才能够被Android系统正确的识别为IME。因此，我们在`AndroidManifest.xml`文件中的application标签对中添加如下代码：\n\n```xml\n\t\t<service\n            android:name=\".SimpleIME\"\n            android:label=\"@string/custom_ime\"\n            android:permission=\"android.permission.BIND_INPUT_METHOD\">\n            <meta-data\n                android:name=\"android.view.im\"\n                android:resource=\"@xml/method\" />\n            <intent-filter>\n                <action android:name=\"android.view.InputMethod\" />\n            </intent-filter>\n        </service>\n```\n\n## 创建method.xml\n\n>&emsp;&emsp;在上面的Service声明中，meta-data标签声明引用了一个叫做`method.xml`的文件，如果没有这个文件，那么Android系统将不能够识别我们的Service为一个有效的IME Service。这个文件包含了有关输入法及其子类的详细信息。\n\n在我们的Demo中，我们定义一个`subtyoe`来声明输入法的显示名称以及其语言环境：（如果没有res/xml目录的话，创建一个并将下面的内容添加到该目录的method.xml文件中）\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<input-method xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <subtype\n        android:imeSubtypeLocale=\"zh_CN\"\n        android:imeSubtypeMode=\"keyboard\"\n        android:label=\"tk_xiamo_notes\" />\n</input-method>\n```\n\n如果你对label中直接写死字符串这种做法比较有强迫症的话，可以将其抽取到Strings.xml文件中。\n\n## 定义键盘布局\n\n&emsp;&emsp;我们的键盘布局比较简单，仅仅包含了一个KeyboardView，因此在`layout`目录中创建一个`keyboard.xml`文件，并添加一下内容：\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.inputmethodservice.KeyboardView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/keyboard\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:layout_alignParentBottom=\"true\"\n    android:keyPreviewLayout=\"@layout/preview\" />\n\n```\n\n其中需要说明的是：\n- `layout_alignParentBottom`属性设置为`true`来保证键盘会在设备屏幕的底端弹出而不是在其它什么地方弹出。\n- `keyPreviewLayout`属性用于按下按键时暂短的按键预览。这里我们由于图方便省事，就用一个TextView来预览吧~\n\n在`layout`目录下创建一个preview.xml文件，并在其中添加如下内容：\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<TextView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:gravity=\"center\"\n    android:background=\"#A6A6A6\"\n    android:textStyle=\"bold\"\n    android:textSize=\"30sp\"\n    >\n</TextView>\n```\n\n## 定义键盘按键\n\n>键盘按键所代表的键值以及其位置等详细信息都被指定在一个xml文件中，每个独立的键盘按键至少都必须包含一下两个属性：\n\n\n\n| 属性名      | 作用                   |\n| -------- | -------------------- |\n| keyLabel | 决定这个按键上显示的字符信息       |\n| codes    | 决定这个按键的对应的字符信息所代表的键值 |\n\n\n\n**例如：定义一个字母A的按键那么它的`codes`属性值应该为：97，`keyLabel`属性值应该为A。**\n\n如果一个按键关联了多个键值，那么点击该按键输出的字符依赖于敲击该按键的次数。\n\n**例如：如果一个按键拥有三个键值：63、33、58:**\n\n\n\n| 敲击该按键的次数 | 输出的字符 |\n| -------- | ----- |\n| 1次       | ?     |\n| 2次       | !     |\n| 3次       | :     |\n\n\n\n当然了，除了上述属性之外，一个按键还有一些其他的属性：\n\n\n\n| 属性名          | 作用                                       |\n| ------------ | ---------------------------------------- |\n| keyEdgeFlags | 可以设置的值有：right或者left，该属性通常用在一行最左边或者最右边的按键上用于表示按键的排布 |\n| keyWidth     | 定义一个按键的宽度，通常该宽度值被定义为一个百分比值               |\n| isRepeatable | 如果这个属性被设置为true的话，长按被设置为该属性的按键将会在长按这段时间中多次重复该按键的动作。通过，在删除键或者空格键中设置该属性为true |\n\n\n键盘上的按键通过Row标识为一组按键，比较推荐的做法是限制每组中最多10枚按键，这样的话，每个按键的宽度等于键盘宽度的10%。在本Demo中，按键高度被设置为60dp，这个数值可以任意调整。但是推荐不要低于48dp。\n\n\n在`res/xml`目录中，创建一个`qwerty.xml`文件，并添加以下内容完成按键的定义：\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Keyboard xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:horizontalGap=\"0px\"\n    android:keyHeight=\"60dp\"\n    android:keyWidth=\"10%p\"\n    android:verticalGap=\"0px\"\n    >\n    <Row>\n        <Key\n            android:codes=\"49\"\n            android:keyEdgeFlags=\"left\"\n            android:keyLabel=\"1\" />\n        <Key\n            android:codes=\"50\"\n            android:keyLabel=\"2\" />\n        <Key\n            android:codes=\"51\"\n            android:keyLabel=\"3\" />\n        <Key\n            android:codes=\"52\"\n            android:keyLabel=\"4\" />\n        <Key\n            android:codes=\"53\"\n            android:keyLabel=\"5\" />\n        <Key\n            android:codes=\"54\"\n            android:keyLabel=\"6\" />\n        <Key\n            android:codes=\"55\"\n            android:keyLabel=\"7\" />\n        <Key\n            android:codes=\"56\"\n            android:keyLabel=\"8\" />\n        <Key\n            android:codes=\"57\"\n            android:keyLabel=\"9\" />\n        <Key\n            android:codes=\"48\"\n            android:keyEdgeFlags=\"right\"\n            android:keyLabel=\"0\" />\n    </Row>\n    <Row>\n        <Key\n            android:codes=\"113\"\n            android:keyEdgeFlags=\"left\"\n            android:keyLabel=\"q\" />\n        <Key\n            android:codes=\"119\"\n            android:keyLabel=\"w\" />\n        <Key\n            android:codes=\"101\"\n            android:keyLabel=\"e\" />\n        <Key\n            android:codes=\"114\"\n            android:keyLabel=\"r\" />\n        <Key\n            android:codes=\"116\"\n            android:keyLabel=\"t\" />\n        <Key\n            android:codes=\"121\"\n            android:keyLabel=\"y\" />\n        <Key\n            android:codes=\"117\"\n            android:keyLabel=\"u\" />\n        <Key\n            android:codes=\"105\"\n            android:keyLabel=\"i\" />\n        <Key\n            android:codes=\"111\"\n            android:keyLabel=\"o\" />\n        <Key\n            android:codes=\"112\"\n            android:keyEdgeFlags=\"right\"\n            android:keyLabel=\"p\" />\n    </Row>\n    <Row>\n        <Key\n            android:codes=\"97\"\n            android:keyEdgeFlags=\"left\"\n            android:keyLabel=\"a\" />\n        <Key\n            android:codes=\"115\"\n            android:keyLabel=\"s\" />\n        <Key\n            android:codes=\"100\"\n            android:keyLabel=\"d\" />\n        <Key\n            android:codes=\"102\"\n            android:keyLabel=\"f\" />\n        <Key\n            android:codes=\"103\"\n            android:keyLabel=\"g\" />\n        <Key\n            android:codes=\"104\"\n            android:keyLabel=\"h\" />\n        <Key\n            android:codes=\"106\"\n            android:keyLabel=\"j\" />\n        <Key\n            android:codes=\"107\"\n            android:keyLabel=\"k\" />\n        <Key\n            android:codes=\"108\"\n            android:keyLabel=\"l\" />\n        <Key\n            android:codes=\"35,64\"\n            android:keyEdgeFlags=\"right\"\n            android:keyLabel=\"\\#\\@\" />\n    </Row>\n    <Row>\n        <Key\n            android:codes=\"-1\"\n            android:keyEdgeFlags=\"left\"\n            android:keyLabel=\"↑\" />\n        <Key\n            android:codes=\"122\"\n            android:keyLabel=\"z\" />\n        <Key\n            android:codes=\"120\"\n            android:keyLabel=\"x\" />\n        <Key\n            android:codes=\"99\"\n            android:keyLabel=\"c\" />\n        <Key\n            android:codes=\"118\"\n            android:keyLabel=\"v\" />\n        <Key\n            android:codes=\"98\"\n            android:keyLabel=\"b\" />\n        <Key\n            android:codes=\"110\"\n            android:keyLabel=\"n\" />\n        <Key\n            android:codes=\"109\"\n            android:keyLabel=\"m\" />\n        <Key\n            android:codes=\"46\"\n            android:keyLabel=\".\" />\n        <Key\n            android:codes=\"63,33,58\"\n            android:keyEdgeFlags=\"right\"\n            android:keyLabel=\"\\?!:\" />\n    </Row>\n    <Row android:rowEdgeFlags=\"bottom\">\n        <Key\n            android:codes=\"44\"\n            android:keyEdgeFlags=\"left\"\n            android:keyLabel=\",\"\n            android:keyWidth=\"10%p\" />\n        <Key\n            android:codes=\"47\"\n            android:keyLabel=\"/\"\n            android:keyWidth=\"10%p\" />\n        <Key\n            android:codes=\"32\"\n            android:isRepeatable=\"true\"\n            android:keyLabel=\"SPACE\"\n            android:keyWidth=\"40%p\" />\n        <Key\n            android:codes=\"-5\"\n            android:isRepeatable=\"true\"\n            android:keyLabel=\"Del\"\n            android:keyWidth=\"20%p\" />\n        <Key\n            android:codes=\"-4\"\n            android:keyEdgeFlags=\"right\"\n            android:keyLabel=\"Done\"\n            android:keyWidth=\"20%p\" />\n    </Row>\n</Keyboard>\n```\n\n## 创建Service类\n\n创建一个java类，命名为`SimpleIME.java`（与AndroidManifest.xml文件中的定义向对应）：\n- `SimpleIME`类应该继承至`InputMethodService`类。\n- `SimpleIME`类应该实现`OnKeyboardActionListener`接口，该接口包含了键盘被点击或者被按下时回调的一些函数。\n\n创建完成之后，将以下内容添加到该文件中：\n\n```java\npackage tk.xiamo.notes.simplekeyboard;\n\nimport android.inputmethodservice.InputMethodService;\nimport android.inputmethodservice.Keyboard;\nimport android.inputmethodservice.KeyboardView;\nimport android.media.AudioManager;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.inputmethod.InputConnection;\n\npublic class SimpleIME extends InputMethodService implements KeyboardView.OnKeyboardActionListener {\n\n    private KeyboardView keyboardView;\n    private Keyboard keyboard;\n    private boolean caps = false;//大小写转换\n    @Override\n    /**\n     * onKey方法用于处理键盘与其他应用程序输入域进行交互。\n     * getCurrentInputConnection 这个方法被用于获取其它应用程序的输入域，一旦我们获取到这个Connection对象，我们就可以使用以下方法了：\n     * commitText ：输出一个或者多个字符到输入域中。\n     * deleteSurroundingText ：从输入域中删除一个或者多个字符。\n     * sendKeyEvent ：发送一个事件（如KEYCODE_ENTER）到外部的应用程序。\n     */\n    public void onKey(int primaryCode, int[] keyCodes) {\n        InputConnection inputConnection = getCurrentInputConnection();\n        playClick(primaryCode);\n        switch (primaryCode) {\n            case Keyboard.KEYCODE_DELETE:\n                inputConnection.deleteSurroundingText(1, 0);\n                break;\n            case Keyboard.KEYCODE_SHIFT:\n                caps = !caps;\n                keyboardView.setShifted(caps);\n                keyboardView.invalidateAllKeys();\n                break;\n            case Keyboard.KEYCODE_DONE:\n                inputConnection.sendKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_ENTER));\n                break;\n            default:\n                char code = (char) primaryCode;\n                if (Character.isLetter(code) && caps) {\n                    code = Character.toUpperCase(code);\n                }\n                inputConnection.commitText(String.valueOf(code), 1);\n        }\n    }\n\n    @Override\n    /**\n     * 当键盘被创建的时候，onCreateInputView方法将会被自动调用。所有的Service成员变量可以在该方法中被初始化。\n     */\n    public View onCreateInputView() {\n        keyboardView = (KeyboardView) getLayoutInflater().inflate(R.layout.keyboard, null);\n        keyboard = new Keyboard(this, R.xml.qwerty);\n        keyboardView.setKeyboard(keyboard);\n        keyboardView.setOnKeyboardActionListener(this);\n        return keyboardView;\n\n    }\n    /**\n     * @param keyCode 按键的键码\n     *                对指定的按键播放不同的按键声音\n     */\n    private void playClick(int keyCode) {\n        AudioManager am = (AudioManager) getSystemService(AUDIO_SERVICE);\n        switch (keyCode) {\n            case 32:\n                am.playSoundEffect(AudioManager.FX_KEYPRESS_SPACEBAR);\n                break;\n            case Keyboard.KEYCODE_DONE:\n            case 10:\n                am.playSoundEffect(AudioManager.FX_KEYPRESS_RETURN);\n                break;\n            case Keyboard.KEYCODE_DELETE:\n                am.playSoundEffect(AudioManager.FX_KEYPRESS_DELETE);\n                break;\n            default:\n                am.playSoundEffect(AudioManager.FX_KEYPRESS_STANDARD);\n        }\n    }\n    @Override\n    public void onText(CharSequence text) {}\n    @Override\n    public void swipeLeft() {}\n    @Override\n    public void swipeRight() {}\n    @Override\n    public void swipeDown() {}\n    @Override\n    public void swipeUp() {}\n    @Override\n    public void onPress(int primaryCode) {}\n    @Override\n    public void onRelease(int primaryCode) {}\n}\n\n```\n\n**需要特别说明的是：一旦用户在键盘上按下了一个按键，onKey方法将会带着被按下的按键的所代表的键值参数而被调用，基于键值的不同，将会执行以下动作：**\n\n\n\n| 键值             | 指定的动作                                    |\n| -------------- | ---------------------------------------- |\n| KEYCODE_DELETE | 将会使用deleteSurroundingText 方法删除光标左侧的一个字符。 |\n| KEYCODE_DONE   | 将会激发一个KEYCODE_ENTER 事件。                  |\n| KEYCODE_SHIFT  | caps变量的值将会被改变并且通过setShifted方法更新键盘的状态。整个键盘都会被重新绘制来保证状态改变之后按键的label标签可以被更新。其中：invalidateAllKeys 方法将可以重绘所有按键。 |\n| 普通键值           | 将会被简单的转换为一个字符然后发送到文本输入域中，如果caps变量被设置为true，那么按键字符都将被转换为大写。 |\n\n## 编译运行\n\n编译运行，在手机上运行的效果如下图：\n\n![](http://i1.piimg.com/e15673195304af50.jpg \"键盘运行效果\")\n\n","source":"_posts/Create-a-Simple-Android-Keyboard.md","raw":"title: Create a Simple Android Keyboard\nisupdate: false\ndate: 2015-09-04 15:12:11\nupdatetime:\ntags: \n- IME\n- Android\ncategories: Android\n---\n\n## 前言\n\n&emsp;&emsp;由于最近做的一个Android项目需要用到用户的输入一些字符，常规的输入法输入非常的不方便。因此有必要自定义一个输入法来完成这个过程。此处给出一个简单的输入法Demo\n来帮助理解自定义输入法的一些实现过程。\n\n- **有关输入法的一些说明，请参见:[Create a Android IME](http://notes.xiamo.tk/2015-04-01-Create-an-Android-IME.html)**\n\n<!--more-->\n\n## 准备工作\n\n&emsp;&emsp;磨刀不误砍柴工，创建一个Android是需要一点点准备工作的,选择一个好的IDE能够提高我们编码的效率：\n- Android Studio（推荐）\n- Android SDK\n\n本博文的编写环境为Android Studio，如果你还在使用Eclipse的话，转到Android Studio上来吧！如果对上述IDE的下载感到茫然的话，推荐一个国内Android开发的好网站：[http://www.androiddevtools.cn](http://www.androiddevtools.cn/)。\n\n## 创建一个Android项目\n\n- 打开Android Studio，创建一个新的Android项目，命名为`SimpleKeyboard`，如下图：\n\n![](http://i3.piimg.com/37ae2bfdf945c18e.png \"创建一个SimpleKeyboard项目\")\n\n- 最小的Android支持版本我们在这里选择API 9也就是Android 2.3咯：\n\n![](http://i3.piimg.com/f337c436d68dcc22.png \"设置最小SDK支持版本\")\n\n- 由于我们只是一个单独的键盘Demo，为了达到极致精简，还是不需要Activity了，因此我们选择`Add No Activity`：\n\n![](http://i3.piimg.com/fed92e215ec17e4f.png \"选择Add No Activity\")\n\n点击Finish，这样就完成了我们Android Keyboard项目的创建了。这个等待Gradle构建完成，因为我们这个项目是没有Activity的，因此我们需要按照如下图稍微配置一下：\n\n![](http://i3.piimg.com/4c72f6d152c54dee.png)\n\n![](http://i3.piimg.com/2195d3987d5dddd1.png)\n\n\n## 编辑AndroidManifest.xml文件\n\n&emsp;&emsp;键盘在Android系统中被识别为一个输入法编辑器（IME），IME作为一个Service运行。只有在AndroidManifest.xml文件中通过`android.permission.BIND_INPUT_METHOD`权限声明的Service并且响应`android.view.im`这个元数据动作才能够被Android系统正确的识别为IME。因此，我们在`AndroidManifest.xml`文件中的application标签对中添加如下代码：\n\n```xml\n\t\t<service\n            android:name=\".SimpleIME\"\n            android:label=\"@string/custom_ime\"\n            android:permission=\"android.permission.BIND_INPUT_METHOD\">\n            <meta-data\n                android:name=\"android.view.im\"\n                android:resource=\"@xml/method\" />\n            <intent-filter>\n                <action android:name=\"android.view.InputMethod\" />\n            </intent-filter>\n        </service>\n```\n\n## 创建method.xml\n\n>&emsp;&emsp;在上面的Service声明中，meta-data标签声明引用了一个叫做`method.xml`的文件，如果没有这个文件，那么Android系统将不能够识别我们的Service为一个有效的IME Service。这个文件包含了有关输入法及其子类的详细信息。\n\n在我们的Demo中，我们定义一个`subtyoe`来声明输入法的显示名称以及其语言环境：（如果没有res/xml目录的话，创建一个并将下面的内容添加到该目录的method.xml文件中）\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<input-method xmlns:android=\"http://schemas.android.com/apk/res/android\">\n    <subtype\n        android:imeSubtypeLocale=\"zh_CN\"\n        android:imeSubtypeMode=\"keyboard\"\n        android:label=\"tk_xiamo_notes\" />\n</input-method>\n```\n\n如果你对label中直接写死字符串这种做法比较有强迫症的话，可以将其抽取到Strings.xml文件中。\n\n## 定义键盘布局\n\n&emsp;&emsp;我们的键盘布局比较简单，仅仅包含了一个KeyboardView，因此在`layout`目录中创建一个`keyboard.xml`文件，并添加一下内容：\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<android.inputmethodservice.KeyboardView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/keyboard\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"wrap_content\"\n    android:layout_alignParentBottom=\"true\"\n    android:keyPreviewLayout=\"@layout/preview\" />\n\n```\n\n其中需要说明的是：\n- `layout_alignParentBottom`属性设置为`true`来保证键盘会在设备屏幕的底端弹出而不是在其它什么地方弹出。\n- `keyPreviewLayout`属性用于按下按键时暂短的按键预览。这里我们由于图方便省事，就用一个TextView来预览吧~\n\n在`layout`目录下创建一个preview.xml文件，并在其中添加如下内容：\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<TextView xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:gravity=\"center\"\n    android:background=\"#A6A6A6\"\n    android:textStyle=\"bold\"\n    android:textSize=\"30sp\"\n    >\n</TextView>\n```\n\n## 定义键盘按键\n\n>键盘按键所代表的键值以及其位置等详细信息都被指定在一个xml文件中，每个独立的键盘按键至少都必须包含一下两个属性：\n\n\n\n| 属性名      | 作用                   |\n| -------- | -------------------- |\n| keyLabel | 决定这个按键上显示的字符信息       |\n| codes    | 决定这个按键的对应的字符信息所代表的键值 |\n\n\n\n**例如：定义一个字母A的按键那么它的`codes`属性值应该为：97，`keyLabel`属性值应该为A。**\n\n如果一个按键关联了多个键值，那么点击该按键输出的字符依赖于敲击该按键的次数。\n\n**例如：如果一个按键拥有三个键值：63、33、58:**\n\n\n\n| 敲击该按键的次数 | 输出的字符 |\n| -------- | ----- |\n| 1次       | ?     |\n| 2次       | !     |\n| 3次       | :     |\n\n\n\n当然了，除了上述属性之外，一个按键还有一些其他的属性：\n\n\n\n| 属性名          | 作用                                       |\n| ------------ | ---------------------------------------- |\n| keyEdgeFlags | 可以设置的值有：right或者left，该属性通常用在一行最左边或者最右边的按键上用于表示按键的排布 |\n| keyWidth     | 定义一个按键的宽度，通常该宽度值被定义为一个百分比值               |\n| isRepeatable | 如果这个属性被设置为true的话，长按被设置为该属性的按键将会在长按这段时间中多次重复该按键的动作。通过，在删除键或者空格键中设置该属性为true |\n\n\n键盘上的按键通过Row标识为一组按键，比较推荐的做法是限制每组中最多10枚按键，这样的话，每个按键的宽度等于键盘宽度的10%。在本Demo中，按键高度被设置为60dp，这个数值可以任意调整。但是推荐不要低于48dp。\n\n\n在`res/xml`目录中，创建一个`qwerty.xml`文件，并添加以下内容完成按键的定义：\n\n```xml\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<Keyboard xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:horizontalGap=\"0px\"\n    android:keyHeight=\"60dp\"\n    android:keyWidth=\"10%p\"\n    android:verticalGap=\"0px\"\n    >\n    <Row>\n        <Key\n            android:codes=\"49\"\n            android:keyEdgeFlags=\"left\"\n            android:keyLabel=\"1\" />\n        <Key\n            android:codes=\"50\"\n            android:keyLabel=\"2\" />\n        <Key\n            android:codes=\"51\"\n            android:keyLabel=\"3\" />\n        <Key\n            android:codes=\"52\"\n            android:keyLabel=\"4\" />\n        <Key\n            android:codes=\"53\"\n            android:keyLabel=\"5\" />\n        <Key\n            android:codes=\"54\"\n            android:keyLabel=\"6\" />\n        <Key\n            android:codes=\"55\"\n            android:keyLabel=\"7\" />\n        <Key\n            android:codes=\"56\"\n            android:keyLabel=\"8\" />\n        <Key\n            android:codes=\"57\"\n            android:keyLabel=\"9\" />\n        <Key\n            android:codes=\"48\"\n            android:keyEdgeFlags=\"right\"\n            android:keyLabel=\"0\" />\n    </Row>\n    <Row>\n        <Key\n            android:codes=\"113\"\n            android:keyEdgeFlags=\"left\"\n            android:keyLabel=\"q\" />\n        <Key\n            android:codes=\"119\"\n            android:keyLabel=\"w\" />\n        <Key\n            android:codes=\"101\"\n            android:keyLabel=\"e\" />\n        <Key\n            android:codes=\"114\"\n            android:keyLabel=\"r\" />\n        <Key\n            android:codes=\"116\"\n            android:keyLabel=\"t\" />\n        <Key\n            android:codes=\"121\"\n            android:keyLabel=\"y\" />\n        <Key\n            android:codes=\"117\"\n            android:keyLabel=\"u\" />\n        <Key\n            android:codes=\"105\"\n            android:keyLabel=\"i\" />\n        <Key\n            android:codes=\"111\"\n            android:keyLabel=\"o\" />\n        <Key\n            android:codes=\"112\"\n            android:keyEdgeFlags=\"right\"\n            android:keyLabel=\"p\" />\n    </Row>\n    <Row>\n        <Key\n            android:codes=\"97\"\n            android:keyEdgeFlags=\"left\"\n            android:keyLabel=\"a\" />\n        <Key\n            android:codes=\"115\"\n            android:keyLabel=\"s\" />\n        <Key\n            android:codes=\"100\"\n            android:keyLabel=\"d\" />\n        <Key\n            android:codes=\"102\"\n            android:keyLabel=\"f\" />\n        <Key\n            android:codes=\"103\"\n            android:keyLabel=\"g\" />\n        <Key\n            android:codes=\"104\"\n            android:keyLabel=\"h\" />\n        <Key\n            android:codes=\"106\"\n            android:keyLabel=\"j\" />\n        <Key\n            android:codes=\"107\"\n            android:keyLabel=\"k\" />\n        <Key\n            android:codes=\"108\"\n            android:keyLabel=\"l\" />\n        <Key\n            android:codes=\"35,64\"\n            android:keyEdgeFlags=\"right\"\n            android:keyLabel=\"\\#\\@\" />\n    </Row>\n    <Row>\n        <Key\n            android:codes=\"-1\"\n            android:keyEdgeFlags=\"left\"\n            android:keyLabel=\"↑\" />\n        <Key\n            android:codes=\"122\"\n            android:keyLabel=\"z\" />\n        <Key\n            android:codes=\"120\"\n            android:keyLabel=\"x\" />\n        <Key\n            android:codes=\"99\"\n            android:keyLabel=\"c\" />\n        <Key\n            android:codes=\"118\"\n            android:keyLabel=\"v\" />\n        <Key\n            android:codes=\"98\"\n            android:keyLabel=\"b\" />\n        <Key\n            android:codes=\"110\"\n            android:keyLabel=\"n\" />\n        <Key\n            android:codes=\"109\"\n            android:keyLabel=\"m\" />\n        <Key\n            android:codes=\"46\"\n            android:keyLabel=\".\" />\n        <Key\n            android:codes=\"63,33,58\"\n            android:keyEdgeFlags=\"right\"\n            android:keyLabel=\"\\?!:\" />\n    </Row>\n    <Row android:rowEdgeFlags=\"bottom\">\n        <Key\n            android:codes=\"44\"\n            android:keyEdgeFlags=\"left\"\n            android:keyLabel=\",\"\n            android:keyWidth=\"10%p\" />\n        <Key\n            android:codes=\"47\"\n            android:keyLabel=\"/\"\n            android:keyWidth=\"10%p\" />\n        <Key\n            android:codes=\"32\"\n            android:isRepeatable=\"true\"\n            android:keyLabel=\"SPACE\"\n            android:keyWidth=\"40%p\" />\n        <Key\n            android:codes=\"-5\"\n            android:isRepeatable=\"true\"\n            android:keyLabel=\"Del\"\n            android:keyWidth=\"20%p\" />\n        <Key\n            android:codes=\"-4\"\n            android:keyEdgeFlags=\"right\"\n            android:keyLabel=\"Done\"\n            android:keyWidth=\"20%p\" />\n    </Row>\n</Keyboard>\n```\n\n## 创建Service类\n\n创建一个java类，命名为`SimpleIME.java`（与AndroidManifest.xml文件中的定义向对应）：\n- `SimpleIME`类应该继承至`InputMethodService`类。\n- `SimpleIME`类应该实现`OnKeyboardActionListener`接口，该接口包含了键盘被点击或者被按下时回调的一些函数。\n\n创建完成之后，将以下内容添加到该文件中：\n\n```java\npackage tk.xiamo.notes.simplekeyboard;\n\nimport android.inputmethodservice.InputMethodService;\nimport android.inputmethodservice.Keyboard;\nimport android.inputmethodservice.KeyboardView;\nimport android.media.AudioManager;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.inputmethod.InputConnection;\n\npublic class SimpleIME extends InputMethodService implements KeyboardView.OnKeyboardActionListener {\n\n    private KeyboardView keyboardView;\n    private Keyboard keyboard;\n    private boolean caps = false;//大小写转换\n    @Override\n    /**\n     * onKey方法用于处理键盘与其他应用程序输入域进行交互。\n     * getCurrentInputConnection 这个方法被用于获取其它应用程序的输入域，一旦我们获取到这个Connection对象，我们就可以使用以下方法了：\n     * commitText ：输出一个或者多个字符到输入域中。\n     * deleteSurroundingText ：从输入域中删除一个或者多个字符。\n     * sendKeyEvent ：发送一个事件（如KEYCODE_ENTER）到外部的应用程序。\n     */\n    public void onKey(int primaryCode, int[] keyCodes) {\n        InputConnection inputConnection = getCurrentInputConnection();\n        playClick(primaryCode);\n        switch (primaryCode) {\n            case Keyboard.KEYCODE_DELETE:\n                inputConnection.deleteSurroundingText(1, 0);\n                break;\n            case Keyboard.KEYCODE_SHIFT:\n                caps = !caps;\n                keyboardView.setShifted(caps);\n                keyboardView.invalidateAllKeys();\n                break;\n            case Keyboard.KEYCODE_DONE:\n                inputConnection.sendKeyEvent(new KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_ENTER));\n                break;\n            default:\n                char code = (char) primaryCode;\n                if (Character.isLetter(code) && caps) {\n                    code = Character.toUpperCase(code);\n                }\n                inputConnection.commitText(String.valueOf(code), 1);\n        }\n    }\n\n    @Override\n    /**\n     * 当键盘被创建的时候，onCreateInputView方法将会被自动调用。所有的Service成员变量可以在该方法中被初始化。\n     */\n    public View onCreateInputView() {\n        keyboardView = (KeyboardView) getLayoutInflater().inflate(R.layout.keyboard, null);\n        keyboard = new Keyboard(this, R.xml.qwerty);\n        keyboardView.setKeyboard(keyboard);\n        keyboardView.setOnKeyboardActionListener(this);\n        return keyboardView;\n\n    }\n    /**\n     * @param keyCode 按键的键码\n     *                对指定的按键播放不同的按键声音\n     */\n    private void playClick(int keyCode) {\n        AudioManager am = (AudioManager) getSystemService(AUDIO_SERVICE);\n        switch (keyCode) {\n            case 32:\n                am.playSoundEffect(AudioManager.FX_KEYPRESS_SPACEBAR);\n                break;\n            case Keyboard.KEYCODE_DONE:\n            case 10:\n                am.playSoundEffect(AudioManager.FX_KEYPRESS_RETURN);\n                break;\n            case Keyboard.KEYCODE_DELETE:\n                am.playSoundEffect(AudioManager.FX_KEYPRESS_DELETE);\n                break;\n            default:\n                am.playSoundEffect(AudioManager.FX_KEYPRESS_STANDARD);\n        }\n    }\n    @Override\n    public void onText(CharSequence text) {}\n    @Override\n    public void swipeLeft() {}\n    @Override\n    public void swipeRight() {}\n    @Override\n    public void swipeDown() {}\n    @Override\n    public void swipeUp() {}\n    @Override\n    public void onPress(int primaryCode) {}\n    @Override\n    public void onRelease(int primaryCode) {}\n}\n\n```\n\n**需要特别说明的是：一旦用户在键盘上按下了一个按键，onKey方法将会带着被按下的按键的所代表的键值参数而被调用，基于键值的不同，将会执行以下动作：**\n\n\n\n| 键值             | 指定的动作                                    |\n| -------------- | ---------------------------------------- |\n| KEYCODE_DELETE | 将会使用deleteSurroundingText 方法删除光标左侧的一个字符。 |\n| KEYCODE_DONE   | 将会激发一个KEYCODE_ENTER 事件。                  |\n| KEYCODE_SHIFT  | caps变量的值将会被改变并且通过setShifted方法更新键盘的状态。整个键盘都会被重新绘制来保证状态改变之后按键的label标签可以被更新。其中：invalidateAllKeys 方法将可以重绘所有按键。 |\n| 普通键值           | 将会被简单的转换为一个字符然后发送到文本输入域中，如果caps变量被设置为true，那么按键字符都将被转换为大写。 |\n\n## 编译运行\n\n编译运行，在手机上运行的效果如下图：\n\n![](http://i1.piimg.com/e15673195304af50.jpg \"键盘运行效果\")\n\n","slug":"Create-a-Simple-Android-Keyboard","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoybhs005l2ev2gs2hjn9x","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&emsp;&emsp;由于最近做的一个Android项目需要用到用户的输入一些字符，常规的输入法输入非常的不方便。因此有必要自定义一个输入法来完成这个过程。此处给出一个简单的输入法Demo<br>来帮助理解自定义输入法的一些实现过程。</p>\n<ul>\n<li><strong>有关输入法的一些说明，请参见:<a href=\"http://notes.xiamo.tk/2015-04-01-Create-an-Android-IME.html\" target=\"_blank\" rel=\"noopener\">Create a Android IME</a></strong></li>\n</ul>\n<a id=\"more\"></a>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>&emsp;&emsp;磨刀不误砍柴工，创建一个Android是需要一点点准备工作的,选择一个好的IDE能够提高我们编码的效率：</p>\n<ul>\n<li>Android Studio（推荐）</li>\n<li>Android SDK</li>\n</ul>\n<p>本博文的编写环境为Android Studio，如果你还在使用Eclipse的话，转到Android Studio上来吧！如果对上述IDE的下载感到茫然的话，推荐一个国内Android开发的好网站：<a href=\"http://www.androiddevtools.cn/\" target=\"_blank\" rel=\"noopener\">http://www.androiddevtools.cn</a>。</p>\n<h2 id=\"创建一个Android项目\"><a href=\"#创建一个Android项目\" class=\"headerlink\" title=\"创建一个Android项目\"></a>创建一个Android项目</h2><ul>\n<li>打开Android Studio，创建一个新的Android项目，命名为<code>SimpleKeyboard</code>，如下图：</li>\n</ul>\n<p><img src=\"http://i3.piimg.com/37ae2bfdf945c18e.png\" alt title=\"创建一个SimpleKeyboard项目\"></p>\n<ul>\n<li>最小的Android支持版本我们在这里选择API 9也就是Android 2.3咯：</li>\n</ul>\n<p><img src=\"http://i3.piimg.com/f337c436d68dcc22.png\" alt title=\"设置最小SDK支持版本\"></p>\n<ul>\n<li>由于我们只是一个单独的键盘Demo，为了达到极致精简，还是不需要Activity了，因此我们选择<code>Add No Activity</code>：</li>\n</ul>\n<p><img src=\"http://i3.piimg.com/fed92e215ec17e4f.png\" alt title=\"选择Add No Activity\"></p>\n<p>点击Finish，这样就完成了我们Android Keyboard项目的创建了。这个等待Gradle构建完成，因为我们这个项目是没有Activity的，因此我们需要按照如下图稍微配置一下：</p>\n<p><img src=\"http://i3.piimg.com/4c72f6d152c54dee.png\" alt></p>\n<p><img src=\"http://i3.piimg.com/2195d3987d5dddd1.png\" alt></p>\n<h2 id=\"编辑AndroidManifest-xml文件\"><a href=\"#编辑AndroidManifest-xml文件\" class=\"headerlink\" title=\"编辑AndroidManifest.xml文件\"></a>编辑AndroidManifest.xml文件</h2><p>&emsp;&emsp;键盘在Android系统中被识别为一个输入法编辑器（IME），IME作为一个Service运行。只有在AndroidManifest.xml文件中通过<code>android.permission.BIND_INPUT_METHOD</code>权限声明的Service并且响应<code>android.view.im</code>这个元数据动作才能够被Android系统正确的识别为IME。因此，我们在<code>AndroidManifest.xml</code>文件中的application标签对中添加如下代码：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">service</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:name</span>=<span class=\"string\">\".SimpleIME\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/custom_ime\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:permission</span>=<span class=\"string\">\"android.permission.BIND_INPUT_METHOD\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.view.im\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:resource</span>=<span class=\"string\">\"@xml/method\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.view.InputMethod\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">service</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"创建method-xml\"><a href=\"#创建method-xml\" class=\"headerlink\" title=\"创建method.xml\"></a>创建method.xml</h2><blockquote>\n<p>&emsp;&emsp;在上面的Service声明中，meta-data标签声明引用了一个叫做<code>method.xml</code>的文件，如果没有这个文件，那么Android系统将不能够识别我们的Service为一个有效的IME Service。这个文件包含了有关输入法及其子类的详细信息。</p>\n</blockquote>\n<p>在我们的Demo中，我们定义一个<code>subtyoe</code>来声明输入法的显示名称以及其语言环境：（如果没有res/xml目录的话，创建一个并将下面的内容添加到该目录的method.xml文件中）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input-method</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">subtype</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:imeSubtypeLocale</span>=<span class=\"string\">\"zh_CN\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:imeSubtypeMode</span>=<span class=\"string\">\"keyboard\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:label</span>=<span class=\"string\">\"tk_xiamo_notes\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">input-method</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如果你对label中直接写死字符串这种做法比较有强迫症的话，可以将其抽取到Strings.xml文件中。</p>\n<h2 id=\"定义键盘布局\"><a href=\"#定义键盘布局\" class=\"headerlink\" title=\"定义键盘布局\"></a>定义键盘布局</h2><p>&emsp;&emsp;我们的键盘布局比较简单，仅仅包含了一个KeyboardView，因此在<code>layout</code>目录中创建一个<code>keyboard.xml</code>文件，并添加一下内容：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.inputmethodservice.KeyboardView</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/keyboard\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_alignParentBottom</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:keyPreviewLayout</span>=<span class=\"string\">\"@layout/preview\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中需要说明的是：</p>\n<ul>\n<li><code>layout_alignParentBottom</code>属性设置为<code>true</code>来保证键盘会在设备屏幕的底端弹出而不是在其它什么地方弹出。</li>\n<li><code>keyPreviewLayout</code>属性用于按下按键时暂短的按键预览。这里我们由于图方便省事，就用一个TextView来预览吧~</li>\n</ul>\n<p>在<code>layout</code>目录下创建一个preview.xml文件，并在其中添加如下内容：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"#A6A6A6\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:textStyle</span>=<span class=\"string\">\"bold\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"30sp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">TextView</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"定义键盘按键\"><a href=\"#定义键盘按键\" class=\"headerlink\" title=\"定义键盘按键\"></a>定义键盘按键</h2><blockquote>\n<p>键盘按键所代表的键值以及其位置等详细信息都被指定在一个xml文件中，每个独立的键盘按键至少都必须包含一下两个属性：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>keyLabel</td>\n<td>决定这个按键上显示的字符信息</td>\n</tr>\n<tr>\n<td>codes</td>\n<td>决定这个按键的对应的字符信息所代表的键值</td>\n</tr>\n</tbody>\n</table>\n<p><strong>例如：定义一个字母A的按键那么它的<code>codes</code>属性值应该为：97，<code>keyLabel</code>属性值应该为A。</strong></p>\n<p>如果一个按键关联了多个键值，那么点击该按键输出的字符依赖于敲击该按键的次数。</p>\n<p><strong>例如：如果一个按键拥有三个键值：63、33、58:</strong></p>\n<table>\n<thead>\n<tr>\n<th>敲击该按键的次数</th>\n<th>输出的字符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1次</td>\n<td>?</td>\n</tr>\n<tr>\n<td>2次</td>\n<td>!</td>\n</tr>\n<tr>\n<td>3次</td>\n<td>:</td>\n</tr>\n</tbody>\n</table>\n<p>当然了，除了上述属性之外，一个按键还有一些其他的属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>keyEdgeFlags</td>\n<td>可以设置的值有：right或者left，该属性通常用在一行最左边或者最右边的按键上用于表示按键的排布</td>\n</tr>\n<tr>\n<td>keyWidth</td>\n<td>定义一个按键的宽度，通常该宽度值被定义为一个百分比值</td>\n</tr>\n<tr>\n<td>isRepeatable</td>\n<td>如果这个属性被设置为true的话，长按被设置为该属性的按键将会在长按这段时间中多次重复该按键的动作。通过，在删除键或者空格键中设置该属性为true</td>\n</tr>\n</tbody>\n</table>\n<p>键盘上的按键通过Row标识为一组按键，比较推荐的做法是限制每组中最多10枚按键，这样的话，每个按键的宽度等于键盘宽度的10%。在本Demo中，按键高度被设置为60dp，这个数值可以任意调整。但是推荐不要低于48dp。</p>\n<p>在<code>res/xml</code>目录中，创建一个<code>qwerty.xml</code>文件，并添加以下内容完成按键的定义：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Keyboard</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:horizontalGap</span>=<span class=\"string\">\"0px\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:keyHeight</span>=<span class=\"string\">\"60dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:keyWidth</span>=<span class=\"string\">\"10%p\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:verticalGap</span>=<span class=\"string\">\"0px\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Row</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"49\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyEdgeFlags</span>=<span class=\"string\">\"left\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"1\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"50\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"2\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"51\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"3\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"52\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"4\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"53\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"5\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"54\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"6\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"55\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"7\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"56\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"8\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"57\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"9\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"48\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyEdgeFlags</span>=<span class=\"string\">\"right\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"0\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Row</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Row</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"113\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyEdgeFlags</span>=<span class=\"string\">\"left\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"q\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"119\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"w\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"101\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"e\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"114\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"r\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"116\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"t\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"121\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"y\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"117\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"u\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"105\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"i\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"111\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"o\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"112\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyEdgeFlags</span>=<span class=\"string\">\"right\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"p\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Row</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Row</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"97\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyEdgeFlags</span>=<span class=\"string\">\"left\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"a\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"115\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"s\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"100\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"d\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"102\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"f\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"103\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"g\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"104\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"h\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"106\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"j\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"107\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"k\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"108\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"l\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"35,64\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyEdgeFlags</span>=<span class=\"string\">\"right\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"\\#\\@\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Row</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Row</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"-1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyEdgeFlags</span>=<span class=\"string\">\"left\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"↑\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"122\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"z\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"120\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"x\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"99\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"c\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"118\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"v\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"98\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"b\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"110\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"n\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"109\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"m\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"46\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\".\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"63,33,58\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyEdgeFlags</span>=<span class=\"string\">\"right\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"\\?!:\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Row</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Row</span> <span class=\"attr\">android:rowEdgeFlags</span>=<span class=\"string\">\"bottom\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"44\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyEdgeFlags</span>=<span class=\"string\">\"left\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\",\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyWidth</span>=<span class=\"string\">\"10%p\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"47\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"/\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyWidth</span>=<span class=\"string\">\"10%p\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"32\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:isRepeatable</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"SPACE\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyWidth</span>=<span class=\"string\">\"40%p\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"-5\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:isRepeatable</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"Del\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyWidth</span>=<span class=\"string\">\"20%p\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"-4\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyEdgeFlags</span>=<span class=\"string\">\"right\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"Done\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyWidth</span>=<span class=\"string\">\"20%p\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Row</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Keyboard</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"创建Service类\"><a href=\"#创建Service类\" class=\"headerlink\" title=\"创建Service类\"></a>创建Service类</h2><p>创建一个java类，命名为<code>SimpleIME.java</code>（与AndroidManifest.xml文件中的定义向对应）：</p>\n<ul>\n<li><code>SimpleIME</code>类应该继承至<code>InputMethodService</code>类。</li>\n<li><code>SimpleIME</code>类应该实现<code>OnKeyboardActionListener</code>接口，该接口包含了键盘被点击或者被按下时回调的一些函数。</li>\n</ul>\n<p>创建完成之后，将以下内容添加到该文件中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> tk.xiamo.notes.simplekeyboard;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.inputmethodservice.InputMethodService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.inputmethodservice.Keyboard;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.inputmethodservice.KeyboardView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.media.AudioManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.KeyEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.inputmethod.InputConnection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleIME</span> <span class=\"keyword\">extends</span> <span class=\"title\">InputMethodService</span> <span class=\"keyword\">implements</span> <span class=\"title\">KeyboardView</span>.<span class=\"title\">OnKeyboardActionListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> KeyboardView keyboardView;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Keyboard keyboard;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> caps = <span class=\"keyword\">false</span>;<span class=\"comment\">//大小写转换</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * onKey方法用于处理键盘与其他应用程序输入域进行交互。</span></span><br><span class=\"line\"><span class=\"comment\">     * getCurrentInputConnection 这个方法被用于获取其它应用程序的输入域，一旦我们获取到这个Connection对象，我们就可以使用以下方法了：</span></span><br><span class=\"line\"><span class=\"comment\">     * commitText ：输出一个或者多个字符到输入域中。</span></span><br><span class=\"line\"><span class=\"comment\">     * deleteSurroundingText ：从输入域中删除一个或者多个字符。</span></span><br><span class=\"line\"><span class=\"comment\">     * sendKeyEvent ：发送一个事件（如KEYCODE_ENTER）到外部的应用程序。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onKey</span><span class=\"params\">(<span class=\"keyword\">int</span> primaryCode, <span class=\"keyword\">int</span>[] keyCodes)</span> </span>&#123;</span><br><span class=\"line\">        InputConnection inputConnection = getCurrentInputConnection();</span><br><span class=\"line\">        playClick(primaryCode);</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (primaryCode) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> Keyboard.KEYCODE_DELETE:</span><br><span class=\"line\">                inputConnection.deleteSurroundingText(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> Keyboard.KEYCODE_SHIFT:</span><br><span class=\"line\">                caps = !caps;</span><br><span class=\"line\">                keyboardView.setShifted(caps);</span><br><span class=\"line\">                keyboardView.invalidateAllKeys();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> Keyboard.KEYCODE_DONE:</span><br><span class=\"line\">                inputConnection.sendKeyEvent(<span class=\"keyword\">new</span> KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_ENTER));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">char</span> code = (<span class=\"keyword\">char</span>) primaryCode;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Character.isLetter(code) &amp;&amp; caps) &#123;</span><br><span class=\"line\">                    code = Character.toUpperCase(code);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                inputConnection.commitText(String.valueOf(code), <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当键盘被创建的时候，onCreateInputView方法将会被自动调用。所有的Service成员变量可以在该方法中被初始化。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateInputView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        keyboardView = (KeyboardView) getLayoutInflater().inflate(R.layout.keyboard, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        keyboard = <span class=\"keyword\">new</span> Keyboard(<span class=\"keyword\">this</span>, R.xml.qwerty);</span><br><span class=\"line\">        keyboardView.setKeyboard(keyboard);</span><br><span class=\"line\">        keyboardView.setOnKeyboardActionListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keyboardView;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> keyCode 按键的键码</span></span><br><span class=\"line\"><span class=\"comment\">     *                对指定的按键播放不同的按键声音</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">playClick</span><span class=\"params\">(<span class=\"keyword\">int</span> keyCode)</span> </span>&#123;</span><br><span class=\"line\">        AudioManager am = (AudioManager) getSystemService(AUDIO_SERVICE);</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (keyCode) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">32</span>:</span><br><span class=\"line\">                am.playSoundEffect(AudioManager.FX_KEYPRESS_SPACEBAR);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> Keyboard.KEYCODE_DONE:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">10</span>:</span><br><span class=\"line\">                am.playSoundEffect(AudioManager.FX_KEYPRESS_RETURN);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> Keyboard.KEYCODE_DELETE:</span><br><span class=\"line\">                am.playSoundEffect(AudioManager.FX_KEYPRESS_DELETE);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                am.playSoundEffect(AudioManager.FX_KEYPRESS_STANDARD);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onText</span><span class=\"params\">(CharSequence text)</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swipeLeft</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swipeRight</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swipeDown</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swipeUp</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPress</span><span class=\"params\">(<span class=\"keyword\">int</span> primaryCode)</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRelease</span><span class=\"params\">(<span class=\"keyword\">int</span> primaryCode)</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>需要特别说明的是：一旦用户在键盘上按下了一个按键，onKey方法将会带着被按下的按键的所代表的键值参数而被调用，基于键值的不同，将会执行以下动作：</strong></p>\n<table>\n<thead>\n<tr>\n<th>键值</th>\n<th>指定的动作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>KEYCODE_DELETE</td>\n<td>将会使用deleteSurroundingText 方法删除光标左侧的一个字符。</td>\n</tr>\n<tr>\n<td>KEYCODE_DONE</td>\n<td>将会激发一个KEYCODE_ENTER 事件。</td>\n</tr>\n<tr>\n<td>KEYCODE_SHIFT</td>\n<td>caps变量的值将会被改变并且通过setShifted方法更新键盘的状态。整个键盘都会被重新绘制来保证状态改变之后按键的label标签可以被更新。其中：invalidateAllKeys 方法将可以重绘所有按键。</td>\n</tr>\n<tr>\n<td>普通键值</td>\n<td>将会被简单的转换为一个字符然后发送到文本输入域中，如果caps变量被设置为true，那么按键字符都将被转换为大写。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"编译运行\"><a href=\"#编译运行\" class=\"headerlink\" title=\"编译运行\"></a>编译运行</h2><p>编译运行，在手机上运行的效果如下图：</p>\n<p><img src=\"http://i1.piimg.com/e15673195304af50.jpg\" alt title=\"键盘运行效果\"></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>&emsp;&emsp;由于最近做的一个Android项目需要用到用户的输入一些字符，常规的输入法输入非常的不方便。因此有必要自定义一个输入法来完成这个过程。此处给出一个简单的输入法Demo<br>来帮助理解自定义输入法的一些实现过程。</p>\n<ul>\n<li><strong>有关输入法的一些说明，请参见:<a href=\"http://notes.xiamo.tk/2015-04-01-Create-an-Android-IME.html\" target=\"_blank\" rel=\"noopener\">Create a Android IME</a></strong></li>\n</ul>","more":"<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>&emsp;&emsp;磨刀不误砍柴工，创建一个Android是需要一点点准备工作的,选择一个好的IDE能够提高我们编码的效率：</p>\n<ul>\n<li>Android Studio（推荐）</li>\n<li>Android SDK</li>\n</ul>\n<p>本博文的编写环境为Android Studio，如果你还在使用Eclipse的话，转到Android Studio上来吧！如果对上述IDE的下载感到茫然的话，推荐一个国内Android开发的好网站：<a href=\"http://www.androiddevtools.cn/\" target=\"_blank\" rel=\"noopener\">http://www.androiddevtools.cn</a>。</p>\n<h2 id=\"创建一个Android项目\"><a href=\"#创建一个Android项目\" class=\"headerlink\" title=\"创建一个Android项目\"></a>创建一个Android项目</h2><ul>\n<li>打开Android Studio，创建一个新的Android项目，命名为<code>SimpleKeyboard</code>，如下图：</li>\n</ul>\n<p><img src=\"http://i3.piimg.com/37ae2bfdf945c18e.png\" alt title=\"创建一个SimpleKeyboard项目\"></p>\n<ul>\n<li>最小的Android支持版本我们在这里选择API 9也就是Android 2.3咯：</li>\n</ul>\n<p><img src=\"http://i3.piimg.com/f337c436d68dcc22.png\" alt title=\"设置最小SDK支持版本\"></p>\n<ul>\n<li>由于我们只是一个单独的键盘Demo，为了达到极致精简，还是不需要Activity了，因此我们选择<code>Add No Activity</code>：</li>\n</ul>\n<p><img src=\"http://i3.piimg.com/fed92e215ec17e4f.png\" alt title=\"选择Add No Activity\"></p>\n<p>点击Finish，这样就完成了我们Android Keyboard项目的创建了。这个等待Gradle构建完成，因为我们这个项目是没有Activity的，因此我们需要按照如下图稍微配置一下：</p>\n<p><img src=\"http://i3.piimg.com/4c72f6d152c54dee.png\" alt></p>\n<p><img src=\"http://i3.piimg.com/2195d3987d5dddd1.png\" alt></p>\n<h2 id=\"编辑AndroidManifest-xml文件\"><a href=\"#编辑AndroidManifest-xml文件\" class=\"headerlink\" title=\"编辑AndroidManifest.xml文件\"></a>编辑AndroidManifest.xml文件</h2><p>&emsp;&emsp;键盘在Android系统中被识别为一个输入法编辑器（IME），IME作为一个Service运行。只有在AndroidManifest.xml文件中通过<code>android.permission.BIND_INPUT_METHOD</code>权限声明的Service并且响应<code>android.view.im</code>这个元数据动作才能够被Android系统正确的识别为IME。因此，我们在<code>AndroidManifest.xml</code>文件中的application标签对中添加如下代码：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">service</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:name</span>=<span class=\"string\">\".SimpleIME\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/custom_ime\"</span></span></span><br><span class=\"line\"><span class=\"tag\">          <span class=\"attr\">android:permission</span>=<span class=\"string\">\"android.permission.BIND_INPUT_METHOD\"</span>&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">meta-data</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.view.im\"</span></span></span><br><span class=\"line\"><span class=\"tag\">              <span class=\"attr\">android:resource</span>=<span class=\"string\">\"@xml/method\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">              <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.view.InputMethod\"</span> /&gt;</span></span><br><span class=\"line\">          <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;/<span class=\"name\">service</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"创建method-xml\"><a href=\"#创建method-xml\" class=\"headerlink\" title=\"创建method.xml\"></a>创建method.xml</h2><blockquote>\n<p>&emsp;&emsp;在上面的Service声明中，meta-data标签声明引用了一个叫做<code>method.xml</code>的文件，如果没有这个文件，那么Android系统将不能够识别我们的Service为一个有效的IME Service。这个文件包含了有关输入法及其子类的详细信息。</p>\n</blockquote>\n<p>在我们的Demo中，我们定义一个<code>subtyoe</code>来声明输入法的显示名称以及其语言环境：（如果没有res/xml目录的话，创建一个并将下面的内容添加到该目录的method.xml文件中）</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input-method</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">subtype</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:imeSubtypeLocale</span>=<span class=\"string\">\"zh_CN\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:imeSubtypeMode</span>=<span class=\"string\">\"keyboard\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:label</span>=<span class=\"string\">\"tk_xiamo_notes\"</span> /&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">input-method</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p>如果你对label中直接写死字符串这种做法比较有强迫症的话，可以将其抽取到Strings.xml文件中。</p>\n<h2 id=\"定义键盘布局\"><a href=\"#定义键盘布局\" class=\"headerlink\" title=\"定义键盘布局\"></a>定义键盘布局</h2><p>&emsp;&emsp;我们的键盘布局比较简单，仅仅包含了一个KeyboardView，因此在<code>layout</code>目录中创建一个<code>keyboard.xml</code>文件，并添加一下内容：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">android.inputmethodservice.KeyboardView</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:id</span>=<span class=\"string\">\"@+id/keyboard\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"wrap_content\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_alignParentBottom</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:keyPreviewLayout</span>=<span class=\"string\">\"@layout/preview\"</span> /&gt;</span></span><br></pre></td></tr></table></figure>\n<p>其中需要说明的是：</p>\n<ul>\n<li><code>layout_alignParentBottom</code>属性设置为<code>true</code>来保证键盘会在设备屏幕的底端弹出而不是在其它什么地方弹出。</li>\n<li><code>keyPreviewLayout</code>属性用于按下按键时暂短的按键预览。这里我们由于图方便省事，就用一个TextView来预览吧~</li>\n</ul>\n<p>在<code>layout</code>目录下创建一个preview.xml文件，并在其中添加如下内容：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">TextView</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_width</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:layout_height</span>=<span class=\"string\">\"match_parent\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:gravity</span>=<span class=\"string\">\"center\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:background</span>=<span class=\"string\">\"#A6A6A6\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:textStyle</span>=<span class=\"string\">\"bold\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:textSize</span>=<span class=\"string\">\"30sp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">TextView</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"定义键盘按键\"><a href=\"#定义键盘按键\" class=\"headerlink\" title=\"定义键盘按键\"></a>定义键盘按键</h2><blockquote>\n<p>键盘按键所代表的键值以及其位置等详细信息都被指定在一个xml文件中，每个独立的键盘按键至少都必须包含一下两个属性：</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>keyLabel</td>\n<td>决定这个按键上显示的字符信息</td>\n</tr>\n<tr>\n<td>codes</td>\n<td>决定这个按键的对应的字符信息所代表的键值</td>\n</tr>\n</tbody>\n</table>\n<p><strong>例如：定义一个字母A的按键那么它的<code>codes</code>属性值应该为：97，<code>keyLabel</code>属性值应该为A。</strong></p>\n<p>如果一个按键关联了多个键值，那么点击该按键输出的字符依赖于敲击该按键的次数。</p>\n<p><strong>例如：如果一个按键拥有三个键值：63、33、58:</strong></p>\n<table>\n<thead>\n<tr>\n<th>敲击该按键的次数</th>\n<th>输出的字符</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1次</td>\n<td>?</td>\n</tr>\n<tr>\n<td>2次</td>\n<td>!</td>\n</tr>\n<tr>\n<td>3次</td>\n<td>:</td>\n</tr>\n</tbody>\n</table>\n<p>当然了，除了上述属性之外，一个按键还有一些其他的属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>keyEdgeFlags</td>\n<td>可以设置的值有：right或者left，该属性通常用在一行最左边或者最右边的按键上用于表示按键的排布</td>\n</tr>\n<tr>\n<td>keyWidth</td>\n<td>定义一个按键的宽度，通常该宽度值被定义为一个百分比值</td>\n</tr>\n<tr>\n<td>isRepeatable</td>\n<td>如果这个属性被设置为true的话，长按被设置为该属性的按键将会在长按这段时间中多次重复该按键的动作。通过，在删除键或者空格键中设置该属性为true</td>\n</tr>\n</tbody>\n</table>\n<p>键盘上的按键通过Row标识为一组按键，比较推荐的做法是限制每组中最多10枚按键，这样的话，每个按键的宽度等于键盘宽度的10%。在本Demo中，按键高度被设置为60dp，这个数值可以任意调整。但是推荐不要低于48dp。</p>\n<p>在<code>res/xml</code>目录中，创建一个<code>qwerty.xml</code>文件，并添加以下内容完成按键的定义：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Keyboard</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:horizontalGap</span>=<span class=\"string\">\"0px\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:keyHeight</span>=<span class=\"string\">\"60dp\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:keyWidth</span>=<span class=\"string\">\"10%p\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    <span class=\"attr\">android:verticalGap</span>=<span class=\"string\">\"0px\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    &gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Row</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"49\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyEdgeFlags</span>=<span class=\"string\">\"left\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"1\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"50\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"2\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"51\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"3\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"52\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"4\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"53\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"5\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"54\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"6\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"55\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"7\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"56\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"8\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"57\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"9\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"48\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyEdgeFlags</span>=<span class=\"string\">\"right\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"0\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Row</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Row</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"113\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyEdgeFlags</span>=<span class=\"string\">\"left\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"q\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"119\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"w\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"101\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"e\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"114\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"r\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"116\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"t\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"121\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"y\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"117\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"u\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"105\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"i\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"111\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"o\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"112\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyEdgeFlags</span>=<span class=\"string\">\"right\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"p\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Row</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Row</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"97\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyEdgeFlags</span>=<span class=\"string\">\"left\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"a\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"115\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"s\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"100\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"d\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"102\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"f\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"103\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"g\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"104\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"h\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"106\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"j\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"107\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"k\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"108\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"l\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"35,64\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyEdgeFlags</span>=<span class=\"string\">\"right\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"\\#\\@\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Row</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Row</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"-1\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyEdgeFlags</span>=<span class=\"string\">\"left\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"↑\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"122\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"z\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"120\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"x\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"99\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"c\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"118\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"v\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"98\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"b\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"110\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"n\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"109\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"m\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"46\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\".\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"63,33,58\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyEdgeFlags</span>=<span class=\"string\">\"right\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"\\?!:\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Row</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Row</span> <span class=\"attr\">android:rowEdgeFlags</span>=<span class=\"string\">\"bottom\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"44\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyEdgeFlags</span>=<span class=\"string\">\"left\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\",\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyWidth</span>=<span class=\"string\">\"10%p\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"47\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"/\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyWidth</span>=<span class=\"string\">\"10%p\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"32\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:isRepeatable</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"SPACE\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyWidth</span>=<span class=\"string\">\"40%p\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"-5\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:isRepeatable</span>=<span class=\"string\">\"true\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"Del\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyWidth</span>=<span class=\"string\">\"20%p\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">Key</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:codes</span>=<span class=\"string\">\"-4\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyEdgeFlags</span>=<span class=\"string\">\"right\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyLabel</span>=<span class=\"string\">\"Done\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:keyWidth</span>=<span class=\"string\">\"20%p\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Row</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Keyboard</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"创建Service类\"><a href=\"#创建Service类\" class=\"headerlink\" title=\"创建Service类\"></a>创建Service类</h2><p>创建一个java类，命名为<code>SimpleIME.java</code>（与AndroidManifest.xml文件中的定义向对应）：</p>\n<ul>\n<li><code>SimpleIME</code>类应该继承至<code>InputMethodService</code>类。</li>\n<li><code>SimpleIME</code>类应该实现<code>OnKeyboardActionListener</code>接口，该接口包含了键盘被点击或者被按下时回调的一些函数。</li>\n</ul>\n<p>创建完成之后，将以下内容添加到该文件中：</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> tk.xiamo.notes.simplekeyboard;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> android.inputmethodservice.InputMethodService;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.inputmethodservice.Keyboard;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.inputmethodservice.KeyboardView;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.media.AudioManager;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.KeyEvent;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.View;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.view.inputmethod.InputConnection;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SimpleIME</span> <span class=\"keyword\">extends</span> <span class=\"title\">InputMethodService</span> <span class=\"keyword\">implements</span> <span class=\"title\">KeyboardView</span>.<span class=\"title\">OnKeyboardActionListener</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> KeyboardView keyboardView;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> Keyboard keyboard;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">boolean</span> caps = <span class=\"keyword\">false</span>;<span class=\"comment\">//大小写转换</span></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * onKey方法用于处理键盘与其他应用程序输入域进行交互。</span></span><br><span class=\"line\"><span class=\"comment\">     * getCurrentInputConnection 这个方法被用于获取其它应用程序的输入域，一旦我们获取到这个Connection对象，我们就可以使用以下方法了：</span></span><br><span class=\"line\"><span class=\"comment\">     * commitText ：输出一个或者多个字符到输入域中。</span></span><br><span class=\"line\"><span class=\"comment\">     * deleteSurroundingText ：从输入域中删除一个或者多个字符。</span></span><br><span class=\"line\"><span class=\"comment\">     * sendKeyEvent ：发送一个事件（如KEYCODE_ENTER）到外部的应用程序。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onKey</span><span class=\"params\">(<span class=\"keyword\">int</span> primaryCode, <span class=\"keyword\">int</span>[] keyCodes)</span> </span>&#123;</span><br><span class=\"line\">        InputConnection inputConnection = getCurrentInputConnection();</span><br><span class=\"line\">        playClick(primaryCode);</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (primaryCode) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> Keyboard.KEYCODE_DELETE:</span><br><span class=\"line\">                inputConnection.deleteSurroundingText(<span class=\"number\">1</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> Keyboard.KEYCODE_SHIFT:</span><br><span class=\"line\">                caps = !caps;</span><br><span class=\"line\">                keyboardView.setShifted(caps);</span><br><span class=\"line\">                keyboardView.invalidateAllKeys();</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> Keyboard.KEYCODE_DONE:</span><br><span class=\"line\">                inputConnection.sendKeyEvent(<span class=\"keyword\">new</span> KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_ENTER));</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                <span class=\"keyword\">char</span> code = (<span class=\"keyword\">char</span>) primaryCode;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (Character.isLetter(code) &amp;&amp; caps) &#123;</span><br><span class=\"line\">                    code = Character.toUpperCase(code);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                inputConnection.commitText(String.valueOf(code), <span class=\"number\">1</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 当键盘被创建的时候，onCreateInputView方法将会被自动调用。所有的Service成员变量可以在该方法中被初始化。</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateInputView</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        keyboardView = (KeyboardView) getLayoutInflater().inflate(R.layout.keyboard, <span class=\"keyword\">null</span>);</span><br><span class=\"line\">        keyboard = <span class=\"keyword\">new</span> Keyboard(<span class=\"keyword\">this</span>, R.xml.qwerty);</span><br><span class=\"line\">        keyboardView.setKeyboard(keyboard);</span><br><span class=\"line\">        keyboardView.setOnKeyboardActionListener(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> keyboardView;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> keyCode 按键的键码</span></span><br><span class=\"line\"><span class=\"comment\">     *                对指定的按键播放不同的按键声音</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">playClick</span><span class=\"params\">(<span class=\"keyword\">int</span> keyCode)</span> </span>&#123;</span><br><span class=\"line\">        AudioManager am = (AudioManager) getSystemService(AUDIO_SERVICE);</span><br><span class=\"line\">        <span class=\"keyword\">switch</span> (keyCode) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">32</span>:</span><br><span class=\"line\">                am.playSoundEffect(AudioManager.FX_KEYPRESS_SPACEBAR);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> Keyboard.KEYCODE_DONE:</span><br><span class=\"line\">            <span class=\"keyword\">case</span> <span class=\"number\">10</span>:</span><br><span class=\"line\">                am.playSoundEffect(AudioManager.FX_KEYPRESS_RETURN);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">case</span> Keyboard.KEYCODE_DELETE:</span><br><span class=\"line\">                am.playSoundEffect(AudioManager.FX_KEYPRESS_DELETE);</span><br><span class=\"line\">                <span class=\"keyword\">break</span>;</span><br><span class=\"line\">            <span class=\"keyword\">default</span>:</span><br><span class=\"line\">                am.playSoundEffect(AudioManager.FX_KEYPRESS_STANDARD);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onText</span><span class=\"params\">(CharSequence text)</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swipeLeft</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swipeRight</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swipeDown</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">swipeUp</span><span class=\"params\">()</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onPress</span><span class=\"params\">(<span class=\"keyword\">int</span> primaryCode)</span> </span>&#123;&#125;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">onRelease</span><span class=\"params\">(<span class=\"keyword\">int</span> primaryCode)</span> </span>&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>需要特别说明的是：一旦用户在键盘上按下了一个按键，onKey方法将会带着被按下的按键的所代表的键值参数而被调用，基于键值的不同，将会执行以下动作：</strong></p>\n<table>\n<thead>\n<tr>\n<th>键值</th>\n<th>指定的动作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>KEYCODE_DELETE</td>\n<td>将会使用deleteSurroundingText 方法删除光标左侧的一个字符。</td>\n</tr>\n<tr>\n<td>KEYCODE_DONE</td>\n<td>将会激发一个KEYCODE_ENTER 事件。</td>\n</tr>\n<tr>\n<td>KEYCODE_SHIFT</td>\n<td>caps变量的值将会被改变并且通过setShifted方法更新键盘的状态。整个键盘都会被重新绘制来保证状态改变之后按键的label标签可以被更新。其中：invalidateAllKeys 方法将可以重绘所有按键。</td>\n</tr>\n<tr>\n<td>普通键值</td>\n<td>将会被简单的转换为一个字符然后发送到文本输入域中，如果caps变量被设置为true，那么按键字符都将被转换为大写。</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"编译运行\"><a href=\"#编译运行\" class=\"headerlink\" title=\"编译运行\"></a>编译运行</h2><p>编译运行，在手机上运行的效果如下图：</p>\n<p><img src=\"http://i1.piimg.com/e15673195304af50.jpg\" alt title=\"键盘运行效果\"></p>"},{"title":"Create an Android IME","date":"2015-04-01T15:25:22.000Z","_content":"\n## Creating an Input Method\n\n\n>输入法编辑器（IME，有的地方简称IME）是一个使用户能够输入文字的控件。Android提供了一个可扩展的输入法框架，它允许应用程序为用户提供可替代的输入方法，如屏幕上的键盘甚至是语音输入。一旦安装,用户就可以在系统设置里选择他喜欢的输入法,这个设置可以在Android系统的所有的地方使用。当然，使用过程中，一次只有一种输入法被激活（用户选择的那个）。  \n\n\n\n>想要给Android开发一个输入法应用，您的Android应用需要含一个继承自InputMethodService的类。此外，您通常需要创建一个“设置输入法”的Activity来设定应用的配置。您也可以定义一个作为系统设置的一部分来显示的设置界面。\n\n\n​        \n\n\n​        \n本文包括以下内容：\n- IME的生命周期。\n- 在应用程序清单中的声明IME组件。\n- IME的API。\n- 设计一个IME的界面。\n- 从IME向应用程序发送文本。\n- 使用IME的变种。  \n\n<!-- more -->\n​    \n>如果您以前没有开发过IME，建议先阅读《屏幕上的输入法》\n>这一章的介绍。此外，您可以通过修改SDK中的软键盘（Soft Keyboard sample）实例代码来开始建立自己的输入法应用。\n##The IME Lifecycle-IME的生命周期\nIME的生命周期如下图：\n​        \n![生命周期图](http://developer.android.com/resources/articles/images/inputmethod_lifecycle_image.png)   \n\n\n\n下面介绍了怎么根据输入法的生命周期来实现输入法的界面和代码\n​    \n#### Declaring IME Components in the Manifest-IME的组件清单中声明\n\n\n\n>在Android系统中，IME是一个Android应用程序包含一个特殊的输入法服务。应用程序的清单文件必须申报服务，索取必要的权限，提供相匹配的action.view.InputMethod意图过滤器，并提供元数据定义输入法的特点。此外，提供了一个设置界面，允许用户修改输入法的行为，你可以定义一个“设置”的Activity，可以从系统设置中进入。\n\n\n\n下面的代码片段声明了IME服务，这个服务需要通过BIND_INPUT_METHOD权限来声明系统允许它连接系统的IME（输入法服务）。还需要创建一个应答android.view.InputMethod的意图过滤器以及定义IME的元数据：\n```xml\n<!-- Declares the input method service -->\n    <service android:name=\"FastInputIME\"\n        android:label=\"@string/fast_input_label\"\n        android:permission=\"android.permission.BIND_INPUT_METHOD\">\n        <intent-filter>\n            <action android:name=\"android.view.InputMethod\" />\n        </intent-filter>\n        <meta-data android:name=\"android.view.im\" android:resource=\"@xml/method\" />\n    </service>\n```\n\n\n​    \n>接下来的代码片段声明了设置IME的Activity。他有一个应答android.intent.action.MAIN的过滤器，这个过滤器表明这个Activity是IME应用的入口。\n\n```xml\n<!-- Optional: an activity for controlling the IME settings -->\n    <activity android:name=\"FastInputIMESettings\" \n        android:label=\"@string/fast_input_settings\">\n        <intent-filter>\n            <action android:name=\"android.intent.action.MAIN\"/>\n        </intent-filter>\n    </activity>\n```\n\n>您也可以把设置输入法的功能直接放到输入法应用的界面上。\n\n### The Input Method API-输入的API\n\n\n>在android.inputmethodservice和android.view.inputmethod包下面可以找到开发IME所需的特殊的类。按钮事件类对于处理键盘字符的输入非常重要。\n\n\n>一个输入法应用的核心部分是一个服务组件，这是一个继承自InputMethodService的类。除了继承通常的服务周期，这个类还有提供输入法界面、处理用户输入、发送文本到焦点区域的回调函数。 默认的，InputMethodService类提供了大部分管理输入法的状态、输入法的可见性以及与当前焦点区域交流的接口。\n\n\n\n下面的类也很重要：  \n\n    BaseInputConnection\n   >定义了从输入法返回到应用后该应用接收输入法输入信息的渠道。您可以使用它来读取光标周围的文本，提交文本文本框内的信息， 发送原生的按钮事件到应用。应用程序应该继承，而不是实现InputConnection类的接口。\n\n    KeyboardView\n>查看扩展，呈现一个键盘和响应用户的输入事件。 键盘的一个实例，您可以定义在指定的键盘布局XML文件\n\n## Designing the Input Method UI-设置输入法的界面\n\n\n\n>一个输入法应用有两个主要的界面元素：候选字界面和输入界面。您只需要实现和您设计的输入法有关的元素即可。 \n\n### Input view-输入法界面\n\n\n\n>输入界面是用户输入通过按键，手写或者手势输入文本的界面。当一个自定义的输入法第一次显示的时候，系统将会执行onCreateInputView()方法。在您实现这方法的时候，您可以创建一个想要在输入法窗口显示的布局，然后返回给android系统。下面的代码片段是实现onCreateInputView() 方法的一个例子。\n\n```java\n  @Override \n    public View onCreateInputView() { \n        MyKeyboardView inputView = \n            (MyKeyboardView) getLayoutInflater().inflate( R.layout.input, null);\n \n        inputView.setOnKeyboardActionListener(this); inputView.setKeyboard(mLatinKeyboard); \n \n        return mInputView; \n    } \n \n```\n\n\n>在这个例子中，MyKeyboardView是一个继承KeyboardView的自定义接口后实现的一个实例，它呈现了一个键盘。如果您在创建一个QWERTY键盘，您可以参照软键盘的简单实例（ Soft Keyboard sample app）来学习怎么继承KeyboardView 类。\n\n\n### Candidates view-候选字界面\n\n\n\n>候选字界面是输入法显示候选字或者是联想字的界面。在IME的生命周期里，当IME准备显示候选字界面的时候，系统或调用onCreateCandidatesView()方法。在您实现这个方法的时候，请返回一个显示候选字或者联想字的界面，或者，如果您不行显示什么东西，那返回空。（注意，这个方法默认就是返回空，所以如果您不想提供候选字,那你不用实现这个方法。）\n\n\n\n    实现候选字的实例请查看Soft Keyboard sample app工程。\n\n## UI design considerations-界面设计要点\n\n\n\n    这一节介绍输入法界面设计需要注意的要点：\n\n### Handling multiple screen sizes-多分辨率支持\n\n\n\n>输入法界面必须可以适合不同的分辨率，它也必须适应横屏和竖屏。在非全屏模式，要为应用留出足够的空间来显示文本输入区域和其他相关情况，从而是输入法界面占用的屏幕空间少于屏幕的一半。在全屏输入法模式下就不用考虑这个问题了。\n\n### Handling different input types-处理不同的输入类型\n\n\n\n>android文本输入域允许用户输入特定的文本类型，比如任何文本输入数字输入，URL输入，email输入，搜索字符串输入等。创建一个新的输入法的时候，您需要检测每一个输入框的类型并为它提供正确的输入，然而，您不必设置您的输入法来检查用户输入的文本是否符合指定的类型；这是那个输入框所在的应用程序的工作。\n\n\n\n    这里是拉丁输入法的提供文本输入和数字输入的截图：\n\n![文本数字输入截图](http://developer.android.com/resources/articles/images/inputmethod_text_type_screenshot.png)\n![文本数字输入截图](http://developer.android.com/resources/articles/images/inputmethod_numeric_type_screenshot.png)\n\n\n\n>当一个输入域获得焦点后,您的输入法就会开始运行。系统会调用onStartInputView()，传递一个含有输入类型和输入框其他属性的EditorInfo实体。在这个实体中，输入类型域含有输入域的输入类型。\n\n\n\n>输入类型域是一个int类型，他含有一个标志各种输入类型的二进制数值。如果您想测试输入域类型，您可以使用TYPE_MASK_CLASS常量,如下所示\n```xml\ninputType & InputType.TYPE_MASK_CLASS \n```\n\n\n    每一个二进制数值可以是下面几个值中的一个:\n\n```xml\nTYPE_CLASS_NUMBER\n```\n>输入数字的输入域。就像上面介绍中的截屏那样,拉丁输入法展示这样一种字母输入模版。\n\n```xml\nTYPE_CLASS_DATETIME\n```\n>一个输入时间和日期的输入域。\n\n```xml\nTYPE_CLASS_PHONE\n```\n>一个输入电话号码的输入域。\n\n```xml\nTYPE_CLASS_TEXT\n```\n>一个输入字符的输入域。\n\n    在输入类型的文档里面有更多关于这些常量的描述。\n\n>输入类型标志也可以是从输入域变化而来的其他常量，比如：\n```xml\nTYPE_TEXT_VARIATION_PASSWORD\n```\n>一个TYPE_CLASS_TEXT的变种，用来输入密码。输入的内容将显示为点点而不是真正的文本。\n\n```xml\nTYPE_TEXT_VARIATION_URI\n```\n>一个TYPE_CLASS_TEXT 的变种，用来输入web URL和其他统一资源定位符（URI）。\n\n```xml\nTYPE_TEXT_FLAG_AUTO_COMPLETE\n```\n>一个TYPE_CLASS_TEXT 的变种，用来输入应用程序通过词典，搜索或者其他功能可以自动补全的文本。\n\n    当您测试这些变种标志的时候，记得使用正确的常量标志。这些常量标志在输入类型文档里面有详细说明。\n\n>注意:在您的输入法中,如果需要输入信息到密码框,请确保文字处理的正确性，在您的输入界面和候选字界面都要隐藏密码文字。记住，不要在一个设备上储存密码。更多信息参阅设计的安全性（Designing for Security guide）这一节。\n\n### Sending Text to the Application-向应用发送文本\n\n>当用户使用您的输入法输入文本的时候，您可以通过使用发送个人按键事件或者在应用输入域的光标周围编辑文本的方式来应用发送文本。或者，您可以使用InputConnection 的一个实例来发送文本。您可以通过InputMethodService.getCurrentInputConnection()来获取这个实例。\n\n#### Editing the text around the cursor-在光标周围编辑文本\n\n>当您处理文本域存在的文本的时候，BaseInputConnection里有很多非常有用的方法：\n```java\ngetTextBeforeCursor()\n```\n>返回光标所在位置前面的n个字符。\n```java\ngetTextAfterCursor()\n```\n>返回光标所在位置后面的n个字符。\n```java\ndeleteSurroundingText()\n```\n>删除光标所在位置周围的n个字符。\n```java\ncommitText()\n```\n>把一个文本提交到文本域并把光标设置到新的位置。\n\n    下面的代码片段展示了怎么使用“Hello”文本替换“Fell”的左边。\n\n```java\nInputConnection ic = getCurrentInputConnection();\n \n    ic.deleteSurroundingText(4, 0);\n \n    ic.commitText(\"Hello\", 1);\n \n    ic.commitText(\"!\", 1);\n```\n#### Composing text before committing-在提交文本之前的撰写\n>如果您的输入法通过需要各种计算或者各种按键的组合来生成字符或单词(比如中文),您可以先在文本域显示这个输入进度直到用户提交了这些文字，这样您可以替换已经完成文本的一部分。当您需要把它传送到InputConnection#setComposingText()时,你可以通过使用“间隔”来区别对待。\n\n    下面的代码片段说明了怎么在输入域显示输入的进度。\n```java\nInputConnection ic = getCurrentInputConnection();\n \n    ic.setComposingText(\"Composi\", 1);\n...\n \n    ic.setComposingText(\"Composin\", 1);\n \n...\n \n    ic.commitText(\"Composing \", 1);\n```\n    下面的截屏显示这如何呈现给用户\n\n![截图](http://developer.android.com/resources/articles/images/inputmethod_composing_text_1.png)\n\n![](http://developer.android.com/resources/articles/images/inputmethod_composing_text_2.png)\n![](http://developer.android.com/resources/articles/images/inputmethod_composing_text_3.png)\n\n#### Intercepting hardware key events-拦截实体键盘按钮事件\n\n>尽管输入法窗口不会争夺输入焦点，但输入法还是会先接受来自实体键盘的输入并且可以选择忽略他们或者把他们转发给应用\n>如果您想拦截实体键盘的输入，请重写onKeyDown() 和onKeyUp()方法，详情参考键盘输入应用。\n>如果不想自己处理一些按键事件，记得调用按键的super()方法。\n\n#### reating an IME Subtype-创建一个输入法亚种\n>输入法亚种可以是输入法执行几种不同的输入模式也可以支持多种语言(比如搜狗输入法的中英文切换)。一个亚种可以是：\n\n- 一种语言环境比如en_US或者fr_FR\n- 一种输入模式比如声音键盘或者手写输入\n- 其他输入样式，输入形式或者输入法的特殊属性，比如10按键或者qwerty键盘布局。\n\n\n\n        基本上这些模式可以是键盘输入，语音输入等等。\n        一个亚种也可以上面几种的混合。\n\n>输入法切换窗口需要输入法亚种信息，这些信息可以从通知栏或者输入法设置里得到。这些信息也使得系统框架可以直接选择其中的一种特定的输入法亚种。当您创建输入法的时候，请使用亚种功能，因为他可以帮助用户曲别和切换不同的语言和不同的模式。\n\n\n        你可以使用<subtype>在一个xml资源文件里定义亚种。下面的代码片段定义了两种输入法亚种：一种是美国英语语言环境，另一中是法国法语语言环境。\n\n```xml\n\n<input-method xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:settingsActivity=\"com.example.softkeyboard.Settings\"\n        android:icon=\"@drawable/ime_icon\"\n    <subtype android:name=\"@string/display_name_english_keyboard_ime\"\n            android:icon=\"@drawable/subtype_icon_english_keyboard_ime\"\n            android:imeSubtypeLanguage=\"en_US\"\n            android:imeSubtypeMode=\"keyboard\"\n            android:imeSubtypeExtraValue=\"somePrivateOption=true\"\n    />\n    <subtype android:name=\"@string/display_name_french_keyboard_ime\"\n            android:icon=\"@drawable/subtype_icon_french_keyboard_ime\"\n            android:imeSubtypeLanguage=\"fr_FR\"\n            android:imeSubtypeMode=\"keyboard\"\n            android:imeSubtypeExtraValue=\"foobar=30,someInternalOption=false\"\n    />\n    <subtype android:name=\"@string/display_name_german_keyboard_ime\"\n            ...\n    />\n/>\n```\n>为了确保您的输入法亚种在界面上的标签正确，请使用%s来获取一个和亚种本地标签相同的亚种标签。如下面的两个代码片段：第一个代码片段展示了输入法xml文件的一部分：\n```xml\n<subtype\n        android:label=\"@string/label_subtype_generic\"\n        android:imeSubtypeLocale=\"en_US\"\n        android:icon=\"@drawable/icon_en_us\"\n        android:imeSubtypeMode=\"keyboard\" />\n```\n>下一个片段是输入法的strings.xml文件的一部分。这个字符串资源 “label_subtype_generic”被输入法界面用来定义亚种标签，他这样被定义：\n```xml\n<string name=\"label_subtype_generic\">%s</string>\n```\n    这个设置了在任何英文语言环境使用“美式英语”或者在其他语言环境使用恰当的语言。\n\n#### Choosing IME subtypes from the notification bar-通过通知栏选择输入法的亚种\n\n>android系统可以管理输入法暴露的所有输入法亚种。输入法亚种被看作是他们所属输入法的一种模式。在通知栏，一个用户可以当前输入法的选择一种输入模式，就下面的截图：\n>![](http://developer.android.com/resources/articles/images/inputmethod_subtype_notification.png)\n\n![](http://developer.android.com/resources/articles/images/inputmethod_subtype_preferences.png)\n\n#### Choosing IME subtypes from System Settings-通过系统设置选择输入法亚种\n\n>用户可以在设置的\"语言和输入\"设置栏里设置输入法亚种。在软键盘例子中，InputMethodSettingsFragment.java 文件实现了在输入法设置中显示输入法亚种这个功能。请更多信息请参阅android SDK的软键盘例子。\n>![](http://developer.android.com/resources/articles/images/inputmethod_subtype_settings.png)\n\n### General IME Considerations-创建输入法应用的注意事项\n>这里是您创建输入法应用需要注意的其他事项：\n- 为用户提供一个可以在输入法界面直接设置输入法的方法。\n- 由于输入法可能需要安装到设备上，请为用户提供一个方法来直接在输入界面切换不同的输入法\n- 输入法界面需要反应迅速。提前载入或者只载入需要的大的界面资源，这样用户一点击文本框就可以看到。为了同样的目的，可以对输入法后续用到的资源和视图进行缓存。\n- 相反的，当输入法窗口隐藏的时候，您应该释放为输入法分配的内存，这样应用可以有足够的内存来运行。如果输入法处于隐藏状态需要几秒钟，那您需要考虑使用一个延迟消息来释放资源。\n- 请确保用户可以尽可能多的输入这种输入法需要输入的语言的字符。记住，用户可能需要输入用户名和密码，所以您的输入法必须提供各种不同的字符，使用户可以向设备输入密码。","source":"_posts/Create-an-Android-IME.md","raw":"title: \"Create an Android IME\"\ndate: 2015-04-01 23:25:22\ntags: android\ncategories: Android\n\n---\n\n## Creating an Input Method\n\n\n>输入法编辑器（IME，有的地方简称IME）是一个使用户能够输入文字的控件。Android提供了一个可扩展的输入法框架，它允许应用程序为用户提供可替代的输入方法，如屏幕上的键盘甚至是语音输入。一旦安装,用户就可以在系统设置里选择他喜欢的输入法,这个设置可以在Android系统的所有的地方使用。当然，使用过程中，一次只有一种输入法被激活（用户选择的那个）。  \n\n\n\n>想要给Android开发一个输入法应用，您的Android应用需要含一个继承自InputMethodService的类。此外，您通常需要创建一个“设置输入法”的Activity来设定应用的配置。您也可以定义一个作为系统设置的一部分来显示的设置界面。\n\n\n​        \n\n\n​        \n本文包括以下内容：\n- IME的生命周期。\n- 在应用程序清单中的声明IME组件。\n- IME的API。\n- 设计一个IME的界面。\n- 从IME向应用程序发送文本。\n- 使用IME的变种。  \n\n<!-- more -->\n​    \n>如果您以前没有开发过IME，建议先阅读《屏幕上的输入法》\n>这一章的介绍。此外，您可以通过修改SDK中的软键盘（Soft Keyboard sample）实例代码来开始建立自己的输入法应用。\n##The IME Lifecycle-IME的生命周期\nIME的生命周期如下图：\n​        \n![生命周期图](http://developer.android.com/resources/articles/images/inputmethod_lifecycle_image.png)   \n\n\n\n下面介绍了怎么根据输入法的生命周期来实现输入法的界面和代码\n​    \n#### Declaring IME Components in the Manifest-IME的组件清单中声明\n\n\n\n>在Android系统中，IME是一个Android应用程序包含一个特殊的输入法服务。应用程序的清单文件必须申报服务，索取必要的权限，提供相匹配的action.view.InputMethod意图过滤器，并提供元数据定义输入法的特点。此外，提供了一个设置界面，允许用户修改输入法的行为，你可以定义一个“设置”的Activity，可以从系统设置中进入。\n\n\n\n下面的代码片段声明了IME服务，这个服务需要通过BIND_INPUT_METHOD权限来声明系统允许它连接系统的IME（输入法服务）。还需要创建一个应答android.view.InputMethod的意图过滤器以及定义IME的元数据：\n```xml\n<!-- Declares the input method service -->\n    <service android:name=\"FastInputIME\"\n        android:label=\"@string/fast_input_label\"\n        android:permission=\"android.permission.BIND_INPUT_METHOD\">\n        <intent-filter>\n            <action android:name=\"android.view.InputMethod\" />\n        </intent-filter>\n        <meta-data android:name=\"android.view.im\" android:resource=\"@xml/method\" />\n    </service>\n```\n\n\n​    \n>接下来的代码片段声明了设置IME的Activity。他有一个应答android.intent.action.MAIN的过滤器，这个过滤器表明这个Activity是IME应用的入口。\n\n```xml\n<!-- Optional: an activity for controlling the IME settings -->\n    <activity android:name=\"FastInputIMESettings\" \n        android:label=\"@string/fast_input_settings\">\n        <intent-filter>\n            <action android:name=\"android.intent.action.MAIN\"/>\n        </intent-filter>\n    </activity>\n```\n\n>您也可以把设置输入法的功能直接放到输入法应用的界面上。\n\n### The Input Method API-输入的API\n\n\n>在android.inputmethodservice和android.view.inputmethod包下面可以找到开发IME所需的特殊的类。按钮事件类对于处理键盘字符的输入非常重要。\n\n\n>一个输入法应用的核心部分是一个服务组件，这是一个继承自InputMethodService的类。除了继承通常的服务周期，这个类还有提供输入法界面、处理用户输入、发送文本到焦点区域的回调函数。 默认的，InputMethodService类提供了大部分管理输入法的状态、输入法的可见性以及与当前焦点区域交流的接口。\n\n\n\n下面的类也很重要：  \n\n    BaseInputConnection\n   >定义了从输入法返回到应用后该应用接收输入法输入信息的渠道。您可以使用它来读取光标周围的文本，提交文本文本框内的信息， 发送原生的按钮事件到应用。应用程序应该继承，而不是实现InputConnection类的接口。\n\n    KeyboardView\n>查看扩展，呈现一个键盘和响应用户的输入事件。 键盘的一个实例，您可以定义在指定的键盘布局XML文件\n\n## Designing the Input Method UI-设置输入法的界面\n\n\n\n>一个输入法应用有两个主要的界面元素：候选字界面和输入界面。您只需要实现和您设计的输入法有关的元素即可。 \n\n### Input view-输入法界面\n\n\n\n>输入界面是用户输入通过按键，手写或者手势输入文本的界面。当一个自定义的输入法第一次显示的时候，系统将会执行onCreateInputView()方法。在您实现这方法的时候，您可以创建一个想要在输入法窗口显示的布局，然后返回给android系统。下面的代码片段是实现onCreateInputView() 方法的一个例子。\n\n```java\n  @Override \n    public View onCreateInputView() { \n        MyKeyboardView inputView = \n            (MyKeyboardView) getLayoutInflater().inflate( R.layout.input, null);\n \n        inputView.setOnKeyboardActionListener(this); inputView.setKeyboard(mLatinKeyboard); \n \n        return mInputView; \n    } \n \n```\n\n\n>在这个例子中，MyKeyboardView是一个继承KeyboardView的自定义接口后实现的一个实例，它呈现了一个键盘。如果您在创建一个QWERTY键盘，您可以参照软键盘的简单实例（ Soft Keyboard sample app）来学习怎么继承KeyboardView 类。\n\n\n### Candidates view-候选字界面\n\n\n\n>候选字界面是输入法显示候选字或者是联想字的界面。在IME的生命周期里，当IME准备显示候选字界面的时候，系统或调用onCreateCandidatesView()方法。在您实现这个方法的时候，请返回一个显示候选字或者联想字的界面，或者，如果您不行显示什么东西，那返回空。（注意，这个方法默认就是返回空，所以如果您不想提供候选字,那你不用实现这个方法。）\n\n\n\n    实现候选字的实例请查看Soft Keyboard sample app工程。\n\n## UI design considerations-界面设计要点\n\n\n\n    这一节介绍输入法界面设计需要注意的要点：\n\n### Handling multiple screen sizes-多分辨率支持\n\n\n\n>输入法界面必须可以适合不同的分辨率，它也必须适应横屏和竖屏。在非全屏模式，要为应用留出足够的空间来显示文本输入区域和其他相关情况，从而是输入法界面占用的屏幕空间少于屏幕的一半。在全屏输入法模式下就不用考虑这个问题了。\n\n### Handling different input types-处理不同的输入类型\n\n\n\n>android文本输入域允许用户输入特定的文本类型，比如任何文本输入数字输入，URL输入，email输入，搜索字符串输入等。创建一个新的输入法的时候，您需要检测每一个输入框的类型并为它提供正确的输入，然而，您不必设置您的输入法来检查用户输入的文本是否符合指定的类型；这是那个输入框所在的应用程序的工作。\n\n\n\n    这里是拉丁输入法的提供文本输入和数字输入的截图：\n\n![文本数字输入截图](http://developer.android.com/resources/articles/images/inputmethod_text_type_screenshot.png)\n![文本数字输入截图](http://developer.android.com/resources/articles/images/inputmethod_numeric_type_screenshot.png)\n\n\n\n>当一个输入域获得焦点后,您的输入法就会开始运行。系统会调用onStartInputView()，传递一个含有输入类型和输入框其他属性的EditorInfo实体。在这个实体中，输入类型域含有输入域的输入类型。\n\n\n\n>输入类型域是一个int类型，他含有一个标志各种输入类型的二进制数值。如果您想测试输入域类型，您可以使用TYPE_MASK_CLASS常量,如下所示\n```xml\ninputType & InputType.TYPE_MASK_CLASS \n```\n\n\n    每一个二进制数值可以是下面几个值中的一个:\n\n```xml\nTYPE_CLASS_NUMBER\n```\n>输入数字的输入域。就像上面介绍中的截屏那样,拉丁输入法展示这样一种字母输入模版。\n\n```xml\nTYPE_CLASS_DATETIME\n```\n>一个输入时间和日期的输入域。\n\n```xml\nTYPE_CLASS_PHONE\n```\n>一个输入电话号码的输入域。\n\n```xml\nTYPE_CLASS_TEXT\n```\n>一个输入字符的输入域。\n\n    在输入类型的文档里面有更多关于这些常量的描述。\n\n>输入类型标志也可以是从输入域变化而来的其他常量，比如：\n```xml\nTYPE_TEXT_VARIATION_PASSWORD\n```\n>一个TYPE_CLASS_TEXT的变种，用来输入密码。输入的内容将显示为点点而不是真正的文本。\n\n```xml\nTYPE_TEXT_VARIATION_URI\n```\n>一个TYPE_CLASS_TEXT 的变种，用来输入web URL和其他统一资源定位符（URI）。\n\n```xml\nTYPE_TEXT_FLAG_AUTO_COMPLETE\n```\n>一个TYPE_CLASS_TEXT 的变种，用来输入应用程序通过词典，搜索或者其他功能可以自动补全的文本。\n\n    当您测试这些变种标志的时候，记得使用正确的常量标志。这些常量标志在输入类型文档里面有详细说明。\n\n>注意:在您的输入法中,如果需要输入信息到密码框,请确保文字处理的正确性，在您的输入界面和候选字界面都要隐藏密码文字。记住，不要在一个设备上储存密码。更多信息参阅设计的安全性（Designing for Security guide）这一节。\n\n### Sending Text to the Application-向应用发送文本\n\n>当用户使用您的输入法输入文本的时候，您可以通过使用发送个人按键事件或者在应用输入域的光标周围编辑文本的方式来应用发送文本。或者，您可以使用InputConnection 的一个实例来发送文本。您可以通过InputMethodService.getCurrentInputConnection()来获取这个实例。\n\n#### Editing the text around the cursor-在光标周围编辑文本\n\n>当您处理文本域存在的文本的时候，BaseInputConnection里有很多非常有用的方法：\n```java\ngetTextBeforeCursor()\n```\n>返回光标所在位置前面的n个字符。\n```java\ngetTextAfterCursor()\n```\n>返回光标所在位置后面的n个字符。\n```java\ndeleteSurroundingText()\n```\n>删除光标所在位置周围的n个字符。\n```java\ncommitText()\n```\n>把一个文本提交到文本域并把光标设置到新的位置。\n\n    下面的代码片段展示了怎么使用“Hello”文本替换“Fell”的左边。\n\n```java\nInputConnection ic = getCurrentInputConnection();\n \n    ic.deleteSurroundingText(4, 0);\n \n    ic.commitText(\"Hello\", 1);\n \n    ic.commitText(\"!\", 1);\n```\n#### Composing text before committing-在提交文本之前的撰写\n>如果您的输入法通过需要各种计算或者各种按键的组合来生成字符或单词(比如中文),您可以先在文本域显示这个输入进度直到用户提交了这些文字，这样您可以替换已经完成文本的一部分。当您需要把它传送到InputConnection#setComposingText()时,你可以通过使用“间隔”来区别对待。\n\n    下面的代码片段说明了怎么在输入域显示输入的进度。\n```java\nInputConnection ic = getCurrentInputConnection();\n \n    ic.setComposingText(\"Composi\", 1);\n...\n \n    ic.setComposingText(\"Composin\", 1);\n \n...\n \n    ic.commitText(\"Composing \", 1);\n```\n    下面的截屏显示这如何呈现给用户\n\n![截图](http://developer.android.com/resources/articles/images/inputmethod_composing_text_1.png)\n\n![](http://developer.android.com/resources/articles/images/inputmethod_composing_text_2.png)\n![](http://developer.android.com/resources/articles/images/inputmethod_composing_text_3.png)\n\n#### Intercepting hardware key events-拦截实体键盘按钮事件\n\n>尽管输入法窗口不会争夺输入焦点，但输入法还是会先接受来自实体键盘的输入并且可以选择忽略他们或者把他们转发给应用\n>如果您想拦截实体键盘的输入，请重写onKeyDown() 和onKeyUp()方法，详情参考键盘输入应用。\n>如果不想自己处理一些按键事件，记得调用按键的super()方法。\n\n#### reating an IME Subtype-创建一个输入法亚种\n>输入法亚种可以是输入法执行几种不同的输入模式也可以支持多种语言(比如搜狗输入法的中英文切换)。一个亚种可以是：\n\n- 一种语言环境比如en_US或者fr_FR\n- 一种输入模式比如声音键盘或者手写输入\n- 其他输入样式，输入形式或者输入法的特殊属性，比如10按键或者qwerty键盘布局。\n\n\n\n        基本上这些模式可以是键盘输入，语音输入等等。\n        一个亚种也可以上面几种的混合。\n\n>输入法切换窗口需要输入法亚种信息，这些信息可以从通知栏或者输入法设置里得到。这些信息也使得系统框架可以直接选择其中的一种特定的输入法亚种。当您创建输入法的时候，请使用亚种功能，因为他可以帮助用户曲别和切换不同的语言和不同的模式。\n\n\n        你可以使用<subtype>在一个xml资源文件里定义亚种。下面的代码片段定义了两种输入法亚种：一种是美国英语语言环境，另一中是法国法语语言环境。\n\n```xml\n\n<input-method xmlns:android=\"http://schemas.android.com/apk/res/android\"\n        android:settingsActivity=\"com.example.softkeyboard.Settings\"\n        android:icon=\"@drawable/ime_icon\"\n    <subtype android:name=\"@string/display_name_english_keyboard_ime\"\n            android:icon=\"@drawable/subtype_icon_english_keyboard_ime\"\n            android:imeSubtypeLanguage=\"en_US\"\n            android:imeSubtypeMode=\"keyboard\"\n            android:imeSubtypeExtraValue=\"somePrivateOption=true\"\n    />\n    <subtype android:name=\"@string/display_name_french_keyboard_ime\"\n            android:icon=\"@drawable/subtype_icon_french_keyboard_ime\"\n            android:imeSubtypeLanguage=\"fr_FR\"\n            android:imeSubtypeMode=\"keyboard\"\n            android:imeSubtypeExtraValue=\"foobar=30,someInternalOption=false\"\n    />\n    <subtype android:name=\"@string/display_name_german_keyboard_ime\"\n            ...\n    />\n/>\n```\n>为了确保您的输入法亚种在界面上的标签正确，请使用%s来获取一个和亚种本地标签相同的亚种标签。如下面的两个代码片段：第一个代码片段展示了输入法xml文件的一部分：\n```xml\n<subtype\n        android:label=\"@string/label_subtype_generic\"\n        android:imeSubtypeLocale=\"en_US\"\n        android:icon=\"@drawable/icon_en_us\"\n        android:imeSubtypeMode=\"keyboard\" />\n```\n>下一个片段是输入法的strings.xml文件的一部分。这个字符串资源 “label_subtype_generic”被输入法界面用来定义亚种标签，他这样被定义：\n```xml\n<string name=\"label_subtype_generic\">%s</string>\n```\n    这个设置了在任何英文语言环境使用“美式英语”或者在其他语言环境使用恰当的语言。\n\n#### Choosing IME subtypes from the notification bar-通过通知栏选择输入法的亚种\n\n>android系统可以管理输入法暴露的所有输入法亚种。输入法亚种被看作是他们所属输入法的一种模式。在通知栏，一个用户可以当前输入法的选择一种输入模式，就下面的截图：\n>![](http://developer.android.com/resources/articles/images/inputmethod_subtype_notification.png)\n\n![](http://developer.android.com/resources/articles/images/inputmethod_subtype_preferences.png)\n\n#### Choosing IME subtypes from System Settings-通过系统设置选择输入法亚种\n\n>用户可以在设置的\"语言和输入\"设置栏里设置输入法亚种。在软键盘例子中，InputMethodSettingsFragment.java 文件实现了在输入法设置中显示输入法亚种这个功能。请更多信息请参阅android SDK的软键盘例子。\n>![](http://developer.android.com/resources/articles/images/inputmethod_subtype_settings.png)\n\n### General IME Considerations-创建输入法应用的注意事项\n>这里是您创建输入法应用需要注意的其他事项：\n- 为用户提供一个可以在输入法界面直接设置输入法的方法。\n- 由于输入法可能需要安装到设备上，请为用户提供一个方法来直接在输入界面切换不同的输入法\n- 输入法界面需要反应迅速。提前载入或者只载入需要的大的界面资源，这样用户一点击文本框就可以看到。为了同样的目的，可以对输入法后续用到的资源和视图进行缓存。\n- 相反的，当输入法窗口隐藏的时候，您应该释放为输入法分配的内存，这样应用可以有足够的内存来运行。如果输入法处于隐藏状态需要几秒钟，那您需要考虑使用一个延迟消息来释放资源。\n- 请确保用户可以尽可能多的输入这种输入法需要输入的语言的字符。记住，用户可能需要输入用户名和密码，所以您的输入法必须提供各种不同的字符，使用户可以向设备输入密码。","slug":"Create-an-Android-IME","published":1,"updated":"2019-05-16T22:56:27.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjvtoybht005m2ev2zpmabucm","content":"<h2 id=\"Creating-an-Input-Method\"><a href=\"#Creating-an-Input-Method\" class=\"headerlink\" title=\"Creating an Input Method\"></a>Creating an Input Method</h2><blockquote>\n<p>输入法编辑器（IME，有的地方简称IME）是一个使用户能够输入文字的控件。Android提供了一个可扩展的输入法框架，它允许应用程序为用户提供可替代的输入方法，如屏幕上的键盘甚至是语音输入。一旦安装,用户就可以在系统设置里选择他喜欢的输入法,这个设置可以在Android系统的所有的地方使用。当然，使用过程中，一次只有一种输入法被激活（用户选择的那个）。  </p>\n</blockquote>\n<blockquote>\n<p>想要给Android开发一个输入法应用，您的Android应用需要含一个继承自InputMethodService的类。此外，您通常需要创建一个“设置输入法”的Activity来设定应用的配置。您也可以定义一个作为系统设置的一部分来显示的设置界面。</p>\n</blockquote>\n<p>​        </p>\n<p>​<br>本文包括以下内容：</p>\n<ul>\n<li>IME的生命周期。</li>\n<li>在应用程序清单中的声明IME组件。</li>\n<li>IME的API。</li>\n<li>设计一个IME的界面。</li>\n<li>从IME向应用程序发送文本。</li>\n<li>使用IME的变种。  </li>\n</ul>\n<a id=\"more\"></a>\n<p>​    </p>\n<blockquote>\n<p>如果您以前没有开发过IME，建议先阅读《屏幕上的输入法》<br>这一章的介绍。此外，您可以通过修改SDK中的软键盘（Soft Keyboard sample）实例代码来开始建立自己的输入法应用。</p>\n</blockquote>\n<p>##The IME Lifecycle-IME的生命周期<br>IME的生命周期如下图：<br>​<br><img src=\"http://developer.android.com/resources/articles/images/inputmethod_lifecycle_image.png\" alt=\"生命周期图\">   </p>\n<p>下面介绍了怎么根据输入法的生命周期来实现输入法的界面和代码<br>​    </p>\n<h4 id=\"Declaring-IME-Components-in-the-Manifest-IME的组件清单中声明\"><a href=\"#Declaring-IME-Components-in-the-Manifest-IME的组件清单中声明\" class=\"headerlink\" title=\"Declaring IME Components in the Manifest-IME的组件清单中声明\"></a>Declaring IME Components in the Manifest-IME的组件清单中声明</h4><blockquote>\n<p>在Android系统中，IME是一个Android应用程序包含一个特殊的输入法服务。应用程序的清单文件必须申报服务，索取必要的权限，提供相匹配的action.view.InputMethod意图过滤器，并提供元数据定义输入法的特点。此外，提供了一个设置界面，允许用户修改输入法的行为，你可以定义一个“设置”的Activity，可以从系统设置中进入。</p>\n</blockquote>\n<p>下面的代码片段声明了IME服务，这个服务需要通过BIND_INPUT_METHOD权限来声明系统允许它连接系统的IME（输入法服务）。还需要创建一个应答android.view.InputMethod的意图过滤器以及定义IME的元数据：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Declares the input method service --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">service</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"FastInputIME\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/fast_input_label\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:permission</span>=<span class=\"string\">\"android.permission.BIND_INPUT_METHOD\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.view.InputMethod\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta-data</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.view.im\"</span> <span class=\"attr\">android:resource</span>=<span class=\"string\">\"@xml/method\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">service</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>​    </p>\n<blockquote>\n<p>接下来的代码片段声明了设置IME的Activity。他有一个应答android.intent.action.MAIN的过滤器，这个过滤器表明这个Activity是IME应用的入口。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Optional: an activity for controlling the IME settings --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"FastInputIMESettings\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/fast_input_settings\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>您也可以把设置输入法的功能直接放到输入法应用的界面上。</p>\n</blockquote>\n<h3 id=\"The-Input-Method-API-输入的API\"><a href=\"#The-Input-Method-API-输入的API\" class=\"headerlink\" title=\"The Input Method API-输入的API\"></a>The Input Method API-输入的API</h3><blockquote>\n<p>在android.inputmethodservice和android.view.inputmethod包下面可以找到开发IME所需的特殊的类。按钮事件类对于处理键盘字符的输入非常重要。</p>\n</blockquote>\n<blockquote>\n<p>一个输入法应用的核心部分是一个服务组件，这是一个继承自InputMethodService的类。除了继承通常的服务周期，这个类还有提供输入法界面、处理用户输入、发送文本到焦点区域的回调函数。 默认的，InputMethodService类提供了大部分管理输入法的状态、输入法的可见性以及与当前焦点区域交流的接口。</p>\n</blockquote>\n<p>下面的类也很重要：  </p>\n<pre><code>BaseInputConnection\n</code></pre><blockquote>\n<p>定义了从输入法返回到应用后该应用接收输入法输入信息的渠道。您可以使用它来读取光标周围的文本，提交文本文本框内的信息， 发送原生的按钮事件到应用。应用程序应该继承，而不是实现InputConnection类的接口。</p>\n</blockquote>\n<pre><code>KeyboardView\n</code></pre><blockquote>\n<p>查看扩展，呈现一个键盘和响应用户的输入事件。 键盘的一个实例，您可以定义在指定的键盘布局XML文件</p>\n</blockquote>\n<h2 id=\"Designing-the-Input-Method-UI-设置输入法的界面\"><a href=\"#Designing-the-Input-Method-UI-设置输入法的界面\" class=\"headerlink\" title=\"Designing the Input Method UI-设置输入法的界面\"></a>Designing the Input Method UI-设置输入法的界面</h2><blockquote>\n<p>一个输入法应用有两个主要的界面元素：候选字界面和输入界面。您只需要实现和您设计的输入法有关的元素即可。 </p>\n</blockquote>\n<h3 id=\"Input-view-输入法界面\"><a href=\"#Input-view-输入法界面\" class=\"headerlink\" title=\"Input view-输入法界面\"></a>Input view-输入法界面</h3><blockquote>\n<p>输入界面是用户输入通过按键，手写或者手势输入文本的界面。当一个自定义的输入法第一次显示的时候，系统将会执行onCreateInputView()方法。在您实现这方法的时候，您可以创建一个想要在输入法窗口显示的布局，然后返回给android系统。下面的代码片段是实现onCreateInputView() 方法的一个例子。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span> </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateInputView</span><span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\">      MyKeyboardView inputView = </span><br><span class=\"line\">          (MyKeyboardView) getLayoutInflater().inflate( R.layout.input, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">      inputView.setOnKeyboardActionListener(<span class=\"keyword\">this</span>); inputView.setKeyboard(mLatinKeyboard); </span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">return</span> mInputView; </span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在这个例子中，MyKeyboardView是一个继承KeyboardView的自定义接口后实现的一个实例，它呈现了一个键盘。如果您在创建一个QWERTY键盘，您可以参照软键盘的简单实例（ Soft Keyboard sample app）来学习怎么继承KeyboardView 类。</p>\n</blockquote>\n<h3 id=\"Candidates-view-候选字界面\"><a href=\"#Candidates-view-候选字界面\" class=\"headerlink\" title=\"Candidates view-候选字界面\"></a>Candidates view-候选字界面</h3><blockquote>\n<p>候选字界面是输入法显示候选字或者是联想字的界面。在IME的生命周期里，当IME准备显示候选字界面的时候，系统或调用onCreateCandidatesView()方法。在您实现这个方法的时候，请返回一个显示候选字或者联想字的界面，或者，如果您不行显示什么东西，那返回空。（注意，这个方法默认就是返回空，所以如果您不想提供候选字,那你不用实现这个方法。）</p>\n</blockquote>\n<pre><code>实现候选字的实例请查看Soft Keyboard sample app工程。\n</code></pre><h2 id=\"UI-design-considerations-界面设计要点\"><a href=\"#UI-design-considerations-界面设计要点\" class=\"headerlink\" title=\"UI design considerations-界面设计要点\"></a>UI design considerations-界面设计要点</h2><pre><code>这一节介绍输入法界面设计需要注意的要点：\n</code></pre><h3 id=\"Handling-multiple-screen-sizes-多分辨率支持\"><a href=\"#Handling-multiple-screen-sizes-多分辨率支持\" class=\"headerlink\" title=\"Handling multiple screen sizes-多分辨率支持\"></a>Handling multiple screen sizes-多分辨率支持</h3><blockquote>\n<p>输入法界面必须可以适合不同的分辨率，它也必须适应横屏和竖屏。在非全屏模式，要为应用留出足够的空间来显示文本输入区域和其他相关情况，从而是输入法界面占用的屏幕空间少于屏幕的一半。在全屏输入法模式下就不用考虑这个问题了。</p>\n</blockquote>\n<h3 id=\"Handling-different-input-types-处理不同的输入类型\"><a href=\"#Handling-different-input-types-处理不同的输入类型\" class=\"headerlink\" title=\"Handling different input types-处理不同的输入类型\"></a>Handling different input types-处理不同的输入类型</h3><blockquote>\n<p>android文本输入域允许用户输入特定的文本类型，比如任何文本输入数字输入，URL输入，email输入，搜索字符串输入等。创建一个新的输入法的时候，您需要检测每一个输入框的类型并为它提供正确的输入，然而，您不必设置您的输入法来检查用户输入的文本是否符合指定的类型；这是那个输入框所在的应用程序的工作。</p>\n</blockquote>\n<pre><code>这里是拉丁输入法的提供文本输入和数字输入的截图：\n</code></pre><p><img src=\"http://developer.android.com/resources/articles/images/inputmethod_text_type_screenshot.png\" alt=\"文本数字输入截图\"><br><img src=\"http://developer.android.com/resources/articles/images/inputmethod_numeric_type_screenshot.png\" alt=\"文本数字输入截图\"></p>\n<blockquote>\n<p>当一个输入域获得焦点后,您的输入法就会开始运行。系统会调用onStartInputView()，传递一个含有输入类型和输入框其他属性的EditorInfo实体。在这个实体中，输入类型域含有输入域的输入类型。</p>\n</blockquote>\n<blockquote>\n<p>输入类型域是一个int类型，他含有一个标志各种输入类型的二进制数值。如果您想测试输入域类型，您可以使用TYPE_MASK_CLASS常量,如下所示<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inputType &amp; InputType.TYPE_MASK_CLASS</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<pre><code>每一个二进制数值可以是下面几个值中的一个:\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE_CLASS_NUMBER</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>输入数字的输入域。就像上面介绍中的截屏那样,拉丁输入法展示这样一种字母输入模版。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE_CLASS_DATETIME</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>一个输入时间和日期的输入域。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE_CLASS_PHONE</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>一个输入电话号码的输入域。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE_CLASS_TEXT</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>一个输入字符的输入域。</p>\n</blockquote>\n<pre><code>在输入类型的文档里面有更多关于这些常量的描述。\n</code></pre><blockquote>\n<p>输入类型标志也可以是从输入域变化而来的其他常量，比如：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE_TEXT_VARIATION_PASSWORD</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>一个TYPE_CLASS_TEXT的变种，用来输入密码。输入的内容将显示为点点而不是真正的文本。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE_TEXT_VARIATION_URI</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>一个TYPE_CLASS_TEXT 的变种，用来输入web URL和其他统一资源定位符（URI）。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE_TEXT_FLAG_AUTO_COMPLETE</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>一个TYPE_CLASS_TEXT 的变种，用来输入应用程序通过词典，搜索或者其他功能可以自动补全的文本。</p>\n</blockquote>\n<pre><code>当您测试这些变种标志的时候，记得使用正确的常量标志。这些常量标志在输入类型文档里面有详细说明。\n</code></pre><blockquote>\n<p>注意:在您的输入法中,如果需要输入信息到密码框,请确保文字处理的正确性，在您的输入界面和候选字界面都要隐藏密码文字。记住，不要在一个设备上储存密码。更多信息参阅设计的安全性（Designing for Security guide）这一节。</p>\n</blockquote>\n<h3 id=\"Sending-Text-to-the-Application-向应用发送文本\"><a href=\"#Sending-Text-to-the-Application-向应用发送文本\" class=\"headerlink\" title=\"Sending Text to the Application-向应用发送文本\"></a>Sending Text to the Application-向应用发送文本</h3><blockquote>\n<p>当用户使用您的输入法输入文本的时候，您可以通过使用发送个人按键事件或者在应用输入域的光标周围编辑文本的方式来应用发送文本。或者，您可以使用InputConnection 的一个实例来发送文本。您可以通过InputMethodService.getCurrentInputConnection()来获取这个实例。</p>\n</blockquote>\n<h4 id=\"Editing-the-text-around-the-cursor-在光标周围编辑文本\"><a href=\"#Editing-the-text-around-the-cursor-在光标周围编辑文本\" class=\"headerlink\" title=\"Editing the text around the cursor-在光标周围编辑文本\"></a>Editing the text around the cursor-在光标周围编辑文本</h4><blockquote>\n<p>当您处理文本域存在的文本的时候，BaseInputConnection里有很多非常有用的方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getTextBeforeCursor()</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>返回光标所在位置前面的n个字符。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getTextAfterCursor()</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>返回光标所在位置后面的n个字符。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deleteSurroundingText()</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>删除光标所在位置周围的n个字符。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commitText()</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>把一个文本提交到文本域并把光标设置到新的位置。</p>\n</blockquote>\n<pre><code>下面的代码片段展示了怎么使用“Hello”文本替换“Fell”的左边。\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InputConnection ic = getCurrentInputConnection();</span><br><span class=\"line\"> </span><br><span class=\"line\">    ic.deleteSurroundingText(<span class=\"number\">4</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    ic.commitText(<span class=\"string\">\"Hello\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    ic.commitText(<span class=\"string\">\"!\"</span>, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Composing-text-before-committing-在提交文本之前的撰写\"><a href=\"#Composing-text-before-committing-在提交文本之前的撰写\" class=\"headerlink\" title=\"Composing text before committing-在提交文本之前的撰写\"></a>Composing text before committing-在提交文本之前的撰写</h4><blockquote>\n<p>如果您的输入法通过需要各种计算或者各种按键的组合来生成字符或单词(比如中文),您可以先在文本域显示这个输入进度直到用户提交了这些文字，这样您可以替换已经完成文本的一部分。当您需要把它传送到InputConnection#setComposingText()时,你可以通过使用“间隔”来区别对待。</p>\n</blockquote>\n<pre><code>下面的代码片段说明了怎么在输入域显示输入的进度。\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InputConnection ic = getCurrentInputConnection();</span><br><span class=\"line\"> </span><br><span class=\"line\">    ic.setComposingText(<span class=\"string\">\"Composi\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\"> </span><br><span class=\"line\">    ic.setComposingText(<span class=\"string\">\"Composin\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">...</span><br><span class=\"line\"> </span><br><span class=\"line\">    ic.commitText(<span class=\"string\">\"Composing \"</span>, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<pre><code>下面的截屏显示这如何呈现给用户\n</code></pre><p><img src=\"http://developer.android.com/resources/articles/images/inputmethod_composing_text_1.png\" alt=\"截图\"></p>\n<p><img src=\"http://developer.android.com/resources/articles/images/inputmethod_composing_text_2.png\" alt><br><img src=\"http://developer.android.com/resources/articles/images/inputmethod_composing_text_3.png\" alt></p>\n<h4 id=\"Intercepting-hardware-key-events-拦截实体键盘按钮事件\"><a href=\"#Intercepting-hardware-key-events-拦截实体键盘按钮事件\" class=\"headerlink\" title=\"Intercepting hardware key events-拦截实体键盘按钮事件\"></a>Intercepting hardware key events-拦截实体键盘按钮事件</h4><blockquote>\n<p>尽管输入法窗口不会争夺输入焦点，但输入法还是会先接受来自实体键盘的输入并且可以选择忽略他们或者把他们转发给应用<br>如果您想拦截实体键盘的输入，请重写onKeyDown() 和onKeyUp()方法，详情参考键盘输入应用。<br>如果不想自己处理一些按键事件，记得调用按键的super()方法。</p>\n</blockquote>\n<h4 id=\"reating-an-IME-Subtype-创建一个输入法亚种\"><a href=\"#reating-an-IME-Subtype-创建一个输入法亚种\" class=\"headerlink\" title=\"reating an IME Subtype-创建一个输入法亚种\"></a>reating an IME Subtype-创建一个输入法亚种</h4><blockquote>\n<p>输入法亚种可以是输入法执行几种不同的输入模式也可以支持多种语言(比如搜狗输入法的中英文切换)。一个亚种可以是：</p>\n</blockquote>\n<ul>\n<li>一种语言环境比如en_US或者fr_FR</li>\n<li>一种输入模式比如声音键盘或者手写输入</li>\n<li>其他输入样式，输入形式或者输入法的特殊属性，比如10按键或者qwerty键盘布局。</li>\n</ul>\n<pre><code>基本上这些模式可以是键盘输入，语音输入等等。\n一个亚种也可以上面几种的混合。\n</code></pre><blockquote>\n<p>输入法切换窗口需要输入法亚种信息，这些信息可以从通知栏或者输入法设置里得到。这些信息也使得系统框架可以直接选择其中的一种特定的输入法亚种。当您创建输入法的时候，请使用亚种功能，因为他可以帮助用户曲别和切换不同的语言和不同的模式。</p>\n</blockquote>\n<pre><code>你可以使用&lt;subtype&gt;在一个xml资源文件里定义亚种。下面的代码片段定义了两种输入法亚种：一种是美国英语语言环境，另一中是法国法语语言环境。\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input-method</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:settingsActivity</span>=<span class=\"string\">\"com.example.softkeyboard.Settings\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ime_icon\"</span></span></span><br><span class=\"line\">    &lt;subtype android:name=\"@string/display_name_english_keyboard_ime\"</span><br><span class=\"line\">            android:icon=\"@drawable/subtype_icon_english_keyboard_ime\"</span><br><span class=\"line\">            android:imeSubtypeLanguage=\"en_US\"</span><br><span class=\"line\">            android:imeSubtypeMode=\"keyboard\"</span><br><span class=\"line\">            android:imeSubtypeExtraValue=\"somePrivateOption=true\"</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">subtype</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"@string/display_name_french_keyboard_ime\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/subtype_icon_french_keyboard_ime\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:imeSubtypeLanguage</span>=<span class=\"string\">\"fr_FR\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:imeSubtypeMode</span>=<span class=\"string\">\"keyboard\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:imeSubtypeExtraValue</span>=<span class=\"string\">\"foobar=30,someInternalOption=false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">subtype</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"@string/display_name_german_keyboard_ime\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>为了确保您的输入法亚种在界面上的标签正确，请使用%s来获取一个和亚种本地标签相同的亚种标签。如下面的两个代码片段：第一个代码片段展示了输入法xml文件的一部分：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">subtype</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/label_subtype_generic\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:imeSubtypeLocale</span>=<span class=\"string\">\"en_US\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/icon_en_us\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:imeSubtypeMode</span>=<span class=\"string\">\"keyboard\"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>下一个片段是输入法的strings.xml文件的一部分。这个字符串资源 “label_subtype_generic”被输入法界面用来定义亚种标签，他这样被定义：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"label_subtype_generic\"</span>&gt;</span>%s<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<pre><code>这个设置了在任何英文语言环境使用“美式英语”或者在其他语言环境使用恰当的语言。\n</code></pre><h4 id=\"Choosing-IME-subtypes-from-the-notification-bar-通过通知栏选择输入法的亚种\"><a href=\"#Choosing-IME-subtypes-from-the-notification-bar-通过通知栏选择输入法的亚种\" class=\"headerlink\" title=\"Choosing IME subtypes from the notification bar-通过通知栏选择输入法的亚种\"></a>Choosing IME subtypes from the notification bar-通过通知栏选择输入法的亚种</h4><blockquote>\n<p>android系统可以管理输入法暴露的所有输入法亚种。输入法亚种被看作是他们所属输入法的一种模式。在通知栏，一个用户可以当前输入法的选择一种输入模式，就下面的截图：<br><img src=\"http://developer.android.com/resources/articles/images/inputmethod_subtype_notification.png\" alt></p>\n</blockquote>\n<p><img src=\"http://developer.android.com/resources/articles/images/inputmethod_subtype_preferences.png\" alt></p>\n<h4 id=\"Choosing-IME-subtypes-from-System-Settings-通过系统设置选择输入法亚种\"><a href=\"#Choosing-IME-subtypes-from-System-Settings-通过系统设置选择输入法亚种\" class=\"headerlink\" title=\"Choosing IME subtypes from System Settings-通过系统设置选择输入法亚种\"></a>Choosing IME subtypes from System Settings-通过系统设置选择输入法亚种</h4><blockquote>\n<p>用户可以在设置的”语言和输入”设置栏里设置输入法亚种。在软键盘例子中，InputMethodSettingsFragment.java 文件实现了在输入法设置中显示输入法亚种这个功能。请更多信息请参阅android SDK的软键盘例子。<br><img src=\"http://developer.android.com/resources/articles/images/inputmethod_subtype_settings.png\" alt></p>\n</blockquote>\n<h3 id=\"General-IME-Considerations-创建输入法应用的注意事项\"><a href=\"#General-IME-Considerations-创建输入法应用的注意事项\" class=\"headerlink\" title=\"General IME Considerations-创建输入法应用的注意事项\"></a>General IME Considerations-创建输入法应用的注意事项</h3><blockquote>\n<p>这里是您创建输入法应用需要注意的其他事项：</p>\n<ul>\n<li>为用户提供一个可以在输入法界面直接设置输入法的方法。</li>\n<li>由于输入法可能需要安装到设备上，请为用户提供一个方法来直接在输入界面切换不同的输入法</li>\n<li>输入法界面需要反应迅速。提前载入或者只载入需要的大的界面资源，这样用户一点击文本框就可以看到。为了同样的目的，可以对输入法后续用到的资源和视图进行缓存。</li>\n<li>相反的，当输入法窗口隐藏的时候，您应该释放为输入法分配的内存，这样应用可以有足够的内存来运行。如果输入法处于隐藏状态需要几秒钟，那您需要考虑使用一个延迟消息来释放资源。</li>\n<li>请确保用户可以尽可能多的输入这种输入法需要输入的语言的字符。记住，用户可能需要输入用户名和密码，所以您的输入法必须提供各种不同的字符，使用户可以向设备输入密码。</li>\n</ul>\n</blockquote>\n","site":{"data":{}},"excerpt":"<h2 id=\"Creating-an-Input-Method\"><a href=\"#Creating-an-Input-Method\" class=\"headerlink\" title=\"Creating an Input Method\"></a>Creating an Input Method</h2><blockquote>\n<p>输入法编辑器（IME，有的地方简称IME）是一个使用户能够输入文字的控件。Android提供了一个可扩展的输入法框架，它允许应用程序为用户提供可替代的输入方法，如屏幕上的键盘甚至是语音输入。一旦安装,用户就可以在系统设置里选择他喜欢的输入法,这个设置可以在Android系统的所有的地方使用。当然，使用过程中，一次只有一种输入法被激活（用户选择的那个）。  </p>\n</blockquote>\n<blockquote>\n<p>想要给Android开发一个输入法应用，您的Android应用需要含一个继承自InputMethodService的类。此外，您通常需要创建一个“设置输入法”的Activity来设定应用的配置。您也可以定义一个作为系统设置的一部分来显示的设置界面。</p>\n</blockquote>\n<p>​        </p>\n<p>​<br>本文包括以下内容：</p>\n<ul>\n<li>IME的生命周期。</li>\n<li>在应用程序清单中的声明IME组件。</li>\n<li>IME的API。</li>\n<li>设计一个IME的界面。</li>\n<li>从IME向应用程序发送文本。</li>\n<li>使用IME的变种。  </li>\n</ul>","more":"<p>​    </p>\n<blockquote>\n<p>如果您以前没有开发过IME，建议先阅读《屏幕上的输入法》<br>这一章的介绍。此外，您可以通过修改SDK中的软键盘（Soft Keyboard sample）实例代码来开始建立自己的输入法应用。</p>\n</blockquote>\n<p>##The IME Lifecycle-IME的生命周期<br>IME的生命周期如下图：<br>​<br><img src=\"http://developer.android.com/resources/articles/images/inputmethod_lifecycle_image.png\" alt=\"生命周期图\">   </p>\n<p>下面介绍了怎么根据输入法的生命周期来实现输入法的界面和代码<br>​    </p>\n<h4 id=\"Declaring-IME-Components-in-the-Manifest-IME的组件清单中声明\"><a href=\"#Declaring-IME-Components-in-the-Manifest-IME的组件清单中声明\" class=\"headerlink\" title=\"Declaring IME Components in the Manifest-IME的组件清单中声明\"></a>Declaring IME Components in the Manifest-IME的组件清单中声明</h4><blockquote>\n<p>在Android系统中，IME是一个Android应用程序包含一个特殊的输入法服务。应用程序的清单文件必须申报服务，索取必要的权限，提供相匹配的action.view.InputMethod意图过滤器，并提供元数据定义输入法的特点。此外，提供了一个设置界面，允许用户修改输入法的行为，你可以定义一个“设置”的Activity，可以从系统设置中进入。</p>\n</blockquote>\n<p>下面的代码片段声明了IME服务，这个服务需要通过BIND_INPUT_METHOD权限来声明系统允许它连接系统的IME（输入法服务）。还需要创建一个应答android.view.InputMethod的意图过滤器以及定义IME的元数据：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Declares the input method service --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">service</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"FastInputIME\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/fast_input_label\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:permission</span>=<span class=\"string\">\"android.permission.BIND_INPUT_METHOD\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.view.InputMethod\"</span> /&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">meta-data</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.view.im\"</span> <span class=\"attr\">android:resource</span>=<span class=\"string\">\"@xml/method\"</span> /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">service</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n<p>​    </p>\n<blockquote>\n<p>接下来的代码片段声明了设置IME的Activity。他有一个应答android.intent.action.MAIN的过滤器，这个过滤器表明这个Activity是IME应用的入口。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Optional: an activity for controlling the IME settings --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">activity</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"FastInputIMESettings\"</span> </span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/fast_input_settings\"</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">action</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"android.intent.action.MAIN\"</span>/&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">intent-filter</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">activity</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>您也可以把设置输入法的功能直接放到输入法应用的界面上。</p>\n</blockquote>\n<h3 id=\"The-Input-Method-API-输入的API\"><a href=\"#The-Input-Method-API-输入的API\" class=\"headerlink\" title=\"The Input Method API-输入的API\"></a>The Input Method API-输入的API</h3><blockquote>\n<p>在android.inputmethodservice和android.view.inputmethod包下面可以找到开发IME所需的特殊的类。按钮事件类对于处理键盘字符的输入非常重要。</p>\n</blockquote>\n<blockquote>\n<p>一个输入法应用的核心部分是一个服务组件，这是一个继承自InputMethodService的类。除了继承通常的服务周期，这个类还有提供输入法界面、处理用户输入、发送文本到焦点区域的回调函数。 默认的，InputMethodService类提供了大部分管理输入法的状态、输入法的可见性以及与当前焦点区域交流的接口。</p>\n</blockquote>\n<p>下面的类也很重要：  </p>\n<pre><code>BaseInputConnection\n</code></pre><blockquote>\n<p>定义了从输入法返回到应用后该应用接收输入法输入信息的渠道。您可以使用它来读取光标周围的文本，提交文本文本框内的信息， 发送原生的按钮事件到应用。应用程序应该继承，而不是实现InputConnection类的接口。</p>\n</blockquote>\n<pre><code>KeyboardView\n</code></pre><blockquote>\n<p>查看扩展，呈现一个键盘和响应用户的输入事件。 键盘的一个实例，您可以定义在指定的键盘布局XML文件</p>\n</blockquote>\n<h2 id=\"Designing-the-Input-Method-UI-设置输入法的界面\"><a href=\"#Designing-the-Input-Method-UI-设置输入法的界面\" class=\"headerlink\" title=\"Designing the Input Method UI-设置输入法的界面\"></a>Designing the Input Method UI-设置输入法的界面</h2><blockquote>\n<p>一个输入法应用有两个主要的界面元素：候选字界面和输入界面。您只需要实现和您设计的输入法有关的元素即可。 </p>\n</blockquote>\n<h3 id=\"Input-view-输入法界面\"><a href=\"#Input-view-输入法界面\" class=\"headerlink\" title=\"Input view-输入法界面\"></a>Input view-输入法界面</h3><blockquote>\n<p>输入界面是用户输入通过按键，手写或者手势输入文本的界面。当一个自定义的输入法第一次显示的时候，系统将会执行onCreateInputView()方法。在您实现这方法的时候，您可以创建一个想要在输入法窗口显示的布局，然后返回给android系统。下面的代码片段是实现onCreateInputView() 方法的一个例子。</p>\n</blockquote>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span> </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> View <span class=\"title\">onCreateInputView</span><span class=\"params\">()</span> </span>&#123; </span><br><span class=\"line\">      MyKeyboardView inputView = </span><br><span class=\"line\">          (MyKeyboardView) getLayoutInflater().inflate( R.layout.input, <span class=\"keyword\">null</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">      inputView.setOnKeyboardActionListener(<span class=\"keyword\">this</span>); inputView.setKeyboard(mLatinKeyboard); </span><br><span class=\"line\"> </span><br><span class=\"line\">      <span class=\"keyword\">return</span> mInputView; </span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在这个例子中，MyKeyboardView是一个继承KeyboardView的自定义接口后实现的一个实例，它呈现了一个键盘。如果您在创建一个QWERTY键盘，您可以参照软键盘的简单实例（ Soft Keyboard sample app）来学习怎么继承KeyboardView 类。</p>\n</blockquote>\n<h3 id=\"Candidates-view-候选字界面\"><a href=\"#Candidates-view-候选字界面\" class=\"headerlink\" title=\"Candidates view-候选字界面\"></a>Candidates view-候选字界面</h3><blockquote>\n<p>候选字界面是输入法显示候选字或者是联想字的界面。在IME的生命周期里，当IME准备显示候选字界面的时候，系统或调用onCreateCandidatesView()方法。在您实现这个方法的时候，请返回一个显示候选字或者联想字的界面，或者，如果您不行显示什么东西，那返回空。（注意，这个方法默认就是返回空，所以如果您不想提供候选字,那你不用实现这个方法。）</p>\n</blockquote>\n<pre><code>实现候选字的实例请查看Soft Keyboard sample app工程。\n</code></pre><h2 id=\"UI-design-considerations-界面设计要点\"><a href=\"#UI-design-considerations-界面设计要点\" class=\"headerlink\" title=\"UI design considerations-界面设计要点\"></a>UI design considerations-界面设计要点</h2><pre><code>这一节介绍输入法界面设计需要注意的要点：\n</code></pre><h3 id=\"Handling-multiple-screen-sizes-多分辨率支持\"><a href=\"#Handling-multiple-screen-sizes-多分辨率支持\" class=\"headerlink\" title=\"Handling multiple screen sizes-多分辨率支持\"></a>Handling multiple screen sizes-多分辨率支持</h3><blockquote>\n<p>输入法界面必须可以适合不同的分辨率，它也必须适应横屏和竖屏。在非全屏模式，要为应用留出足够的空间来显示文本输入区域和其他相关情况，从而是输入法界面占用的屏幕空间少于屏幕的一半。在全屏输入法模式下就不用考虑这个问题了。</p>\n</blockquote>\n<h3 id=\"Handling-different-input-types-处理不同的输入类型\"><a href=\"#Handling-different-input-types-处理不同的输入类型\" class=\"headerlink\" title=\"Handling different input types-处理不同的输入类型\"></a>Handling different input types-处理不同的输入类型</h3><blockquote>\n<p>android文本输入域允许用户输入特定的文本类型，比如任何文本输入数字输入，URL输入，email输入，搜索字符串输入等。创建一个新的输入法的时候，您需要检测每一个输入框的类型并为它提供正确的输入，然而，您不必设置您的输入法来检查用户输入的文本是否符合指定的类型；这是那个输入框所在的应用程序的工作。</p>\n</blockquote>\n<pre><code>这里是拉丁输入法的提供文本输入和数字输入的截图：\n</code></pre><p><img src=\"http://developer.android.com/resources/articles/images/inputmethod_text_type_screenshot.png\" alt=\"文本数字输入截图\"><br><img src=\"http://developer.android.com/resources/articles/images/inputmethod_numeric_type_screenshot.png\" alt=\"文本数字输入截图\"></p>\n<blockquote>\n<p>当一个输入域获得焦点后,您的输入法就会开始运行。系统会调用onStartInputView()，传递一个含有输入类型和输入框其他属性的EditorInfo实体。在这个实体中，输入类型域含有输入域的输入类型。</p>\n</blockquote>\n<blockquote>\n<p>输入类型域是一个int类型，他含有一个标志各种输入类型的二进制数值。如果您想测试输入域类型，您可以使用TYPE_MASK_CLASS常量,如下所示<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inputType &amp; InputType.TYPE_MASK_CLASS</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<pre><code>每一个二进制数值可以是下面几个值中的一个:\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE_CLASS_NUMBER</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>输入数字的输入域。就像上面介绍中的截屏那样,拉丁输入法展示这样一种字母输入模版。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE_CLASS_DATETIME</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>一个输入时间和日期的输入域。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE_CLASS_PHONE</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>一个输入电话号码的输入域。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE_CLASS_TEXT</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>一个输入字符的输入域。</p>\n</blockquote>\n<pre><code>在输入类型的文档里面有更多关于这些常量的描述。\n</code></pre><blockquote>\n<p>输入类型标志也可以是从输入域变化而来的其他常量，比如：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE_TEXT_VARIATION_PASSWORD</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>一个TYPE_CLASS_TEXT的变种，用来输入密码。输入的内容将显示为点点而不是真正的文本。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE_TEXT_VARIATION_URI</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>一个TYPE_CLASS_TEXT 的变种，用来输入web URL和其他统一资源定位符（URI）。</p>\n</blockquote>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">TYPE_TEXT_FLAG_AUTO_COMPLETE</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>一个TYPE_CLASS_TEXT 的变种，用来输入应用程序通过词典，搜索或者其他功能可以自动补全的文本。</p>\n</blockquote>\n<pre><code>当您测试这些变种标志的时候，记得使用正确的常量标志。这些常量标志在输入类型文档里面有详细说明。\n</code></pre><blockquote>\n<p>注意:在您的输入法中,如果需要输入信息到密码框,请确保文字处理的正确性，在您的输入界面和候选字界面都要隐藏密码文字。记住，不要在一个设备上储存密码。更多信息参阅设计的安全性（Designing for Security guide）这一节。</p>\n</blockquote>\n<h3 id=\"Sending-Text-to-the-Application-向应用发送文本\"><a href=\"#Sending-Text-to-the-Application-向应用发送文本\" class=\"headerlink\" title=\"Sending Text to the Application-向应用发送文本\"></a>Sending Text to the Application-向应用发送文本</h3><blockquote>\n<p>当用户使用您的输入法输入文本的时候，您可以通过使用发送个人按键事件或者在应用输入域的光标周围编辑文本的方式来应用发送文本。或者，您可以使用InputConnection 的一个实例来发送文本。您可以通过InputMethodService.getCurrentInputConnection()来获取这个实例。</p>\n</blockquote>\n<h4 id=\"Editing-the-text-around-the-cursor-在光标周围编辑文本\"><a href=\"#Editing-the-text-around-the-cursor-在光标周围编辑文本\" class=\"headerlink\" title=\"Editing the text around the cursor-在光标周围编辑文本\"></a>Editing the text around the cursor-在光标周围编辑文本</h4><blockquote>\n<p>当您处理文本域存在的文本的时候，BaseInputConnection里有很多非常有用的方法：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getTextBeforeCursor()</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>返回光标所在位置前面的n个字符。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">getTextAfterCursor()</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>返回光标所在位置后面的n个字符。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deleteSurroundingText()</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>删除光标所在位置周围的n个字符。<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">commitText()</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>把一个文本提交到文本域并把光标设置到新的位置。</p>\n</blockquote>\n<pre><code>下面的代码片段展示了怎么使用“Hello”文本替换“Fell”的左边。\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InputConnection ic = getCurrentInputConnection();</span><br><span class=\"line\"> </span><br><span class=\"line\">    ic.deleteSurroundingText(<span class=\"number\">4</span>, <span class=\"number\">0</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    ic.commitText(<span class=\"string\">\"Hello\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">    ic.commitText(<span class=\"string\">\"!\"</span>, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<h4 id=\"Composing-text-before-committing-在提交文本之前的撰写\"><a href=\"#Composing-text-before-committing-在提交文本之前的撰写\" class=\"headerlink\" title=\"Composing text before committing-在提交文本之前的撰写\"></a>Composing text before committing-在提交文本之前的撰写</h4><blockquote>\n<p>如果您的输入法通过需要各种计算或者各种按键的组合来生成字符或单词(比如中文),您可以先在文本域显示这个输入进度直到用户提交了这些文字，这样您可以替换已经完成文本的一部分。当您需要把它传送到InputConnection#setComposingText()时,你可以通过使用“间隔”来区别对待。</p>\n</blockquote>\n<pre><code>下面的代码片段说明了怎么在输入域显示输入的进度。\n</code></pre><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InputConnection ic = getCurrentInputConnection();</span><br><span class=\"line\"> </span><br><span class=\"line\">    ic.setComposingText(<span class=\"string\">\"Composi\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\">...</span><br><span class=\"line\"> </span><br><span class=\"line\">    ic.setComposingText(<span class=\"string\">\"Composin\"</span>, <span class=\"number\">1</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">...</span><br><span class=\"line\"> </span><br><span class=\"line\">    ic.commitText(<span class=\"string\">\"Composing \"</span>, <span class=\"number\">1</span>);</span><br></pre></td></tr></table></figure>\n<pre><code>下面的截屏显示这如何呈现给用户\n</code></pre><p><img src=\"http://developer.android.com/resources/articles/images/inputmethod_composing_text_1.png\" alt=\"截图\"></p>\n<p><img src=\"http://developer.android.com/resources/articles/images/inputmethod_composing_text_2.png\" alt><br><img src=\"http://developer.android.com/resources/articles/images/inputmethod_composing_text_3.png\" alt></p>\n<h4 id=\"Intercepting-hardware-key-events-拦截实体键盘按钮事件\"><a href=\"#Intercepting-hardware-key-events-拦截实体键盘按钮事件\" class=\"headerlink\" title=\"Intercepting hardware key events-拦截实体键盘按钮事件\"></a>Intercepting hardware key events-拦截实体键盘按钮事件</h4><blockquote>\n<p>尽管输入法窗口不会争夺输入焦点，但输入法还是会先接受来自实体键盘的输入并且可以选择忽略他们或者把他们转发给应用<br>如果您想拦截实体键盘的输入，请重写onKeyDown() 和onKeyUp()方法，详情参考键盘输入应用。<br>如果不想自己处理一些按键事件，记得调用按键的super()方法。</p>\n</blockquote>\n<h4 id=\"reating-an-IME-Subtype-创建一个输入法亚种\"><a href=\"#reating-an-IME-Subtype-创建一个输入法亚种\" class=\"headerlink\" title=\"reating an IME Subtype-创建一个输入法亚种\"></a>reating an IME Subtype-创建一个输入法亚种</h4><blockquote>\n<p>输入法亚种可以是输入法执行几种不同的输入模式也可以支持多种语言(比如搜狗输入法的中英文切换)。一个亚种可以是：</p>\n</blockquote>\n<ul>\n<li>一种语言环境比如en_US或者fr_FR</li>\n<li>一种输入模式比如声音键盘或者手写输入</li>\n<li>其他输入样式，输入形式或者输入法的特殊属性，比如10按键或者qwerty键盘布局。</li>\n</ul>\n<pre><code>基本上这些模式可以是键盘输入，语音输入等等。\n一个亚种也可以上面几种的混合。\n</code></pre><blockquote>\n<p>输入法切换窗口需要输入法亚种信息，这些信息可以从通知栏或者输入法设置里得到。这些信息也使得系统框架可以直接选择其中的一种特定的输入法亚种。当您创建输入法的时候，请使用亚种功能，因为他可以帮助用户曲别和切换不同的语言和不同的模式。</p>\n</blockquote>\n<pre><code>你可以使用&lt;subtype&gt;在一个xml资源文件里定义亚种。下面的代码片段定义了两种输入法亚种：一种是美国英语语言环境，另一中是法国法语语言环境。\n</code></pre><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">input-method</span> <span class=\"attr\">xmlns:android</span>=<span class=\"string\">\"http://schemas.android.com/apk/res/android\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:settingsActivity</span>=<span class=\"string\">\"com.example.softkeyboard.Settings\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/ime_icon\"</span></span></span><br><span class=\"line\">    &lt;subtype android:name=\"@string/display_name_english_keyboard_ime\"</span><br><span class=\"line\">            android:icon=\"@drawable/subtype_icon_english_keyboard_ime\"</span><br><span class=\"line\">            android:imeSubtypeLanguage=\"en_US\"</span><br><span class=\"line\">            android:imeSubtypeMode=\"keyboard\"</span><br><span class=\"line\">            android:imeSubtypeExtraValue=\"somePrivateOption=true\"</span><br><span class=\"line\">    /&gt;</span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">subtype</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"@string/display_name_french_keyboard_ime\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/subtype_icon_french_keyboard_ime\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:imeSubtypeLanguage</span>=<span class=\"string\">\"fr_FR\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:imeSubtypeMode</span>=<span class=\"string\">\"keyboard\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">android:imeSubtypeExtraValue</span>=<span class=\"string\">\"foobar=30,someInternalOption=false\"</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">subtype</span> <span class=\"attr\">android:name</span>=<span class=\"string\">\"@string/display_name_german_keyboard_ime\"</span></span></span><br><span class=\"line\"><span class=\"tag\">            <span class=\"attr\">...</span></span></span><br><span class=\"line\"><span class=\"tag\">    /&gt;</span></span><br><span class=\"line\">/&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>为了确保您的输入法亚种在界面上的标签正确，请使用%s来获取一个和亚种本地标签相同的亚种标签。如下面的两个代码片段：第一个代码片段展示了输入法xml文件的一部分：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">subtype</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:label</span>=<span class=\"string\">\"@string/label_subtype_generic\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:imeSubtypeLocale</span>=<span class=\"string\">\"en_US\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:icon</span>=<span class=\"string\">\"@drawable/icon_en_us\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">android:imeSubtypeMode</span>=<span class=\"string\">\"keyboard\"</span> /&gt;</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<blockquote>\n<p>下一个片段是输入法的strings.xml文件的一部分。这个字符串资源 “label_subtype_generic”被输入法界面用来定义亚种标签，他这样被定义：<br><figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">string</span> <span class=\"attr\">name</span>=<span class=\"string\">\"label_subtype_generic\"</span>&gt;</span>%s<span class=\"tag\">&lt;/<span class=\"name\">string</span>&gt;</span></span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<pre><code>这个设置了在任何英文语言环境使用“美式英语”或者在其他语言环境使用恰当的语言。\n</code></pre><h4 id=\"Choosing-IME-subtypes-from-the-notification-bar-通过通知栏选择输入法的亚种\"><a href=\"#Choosing-IME-subtypes-from-the-notification-bar-通过通知栏选择输入法的亚种\" class=\"headerlink\" title=\"Choosing IME subtypes from the notification bar-通过通知栏选择输入法的亚种\"></a>Choosing IME subtypes from the notification bar-通过通知栏选择输入法的亚种</h4><blockquote>\n<p>android系统可以管理输入法暴露的所有输入法亚种。输入法亚种被看作是他们所属输入法的一种模式。在通知栏，一个用户可以当前输入法的选择一种输入模式，就下面的截图：<br><img src=\"http://developer.android.com/resources/articles/images/inputmethod_subtype_notification.png\" alt></p>\n</blockquote>\n<p><img src=\"http://developer.android.com/resources/articles/images/inputmethod_subtype_preferences.png\" alt></p>\n<h4 id=\"Choosing-IME-subtypes-from-System-Settings-通过系统设置选择输入法亚种\"><a href=\"#Choosing-IME-subtypes-from-System-Settings-通过系统设置选择输入法亚种\" class=\"headerlink\" title=\"Choosing IME subtypes from System Settings-通过系统设置选择输入法亚种\"></a>Choosing IME subtypes from System Settings-通过系统设置选择输入法亚种</h4><blockquote>\n<p>用户可以在设置的”语言和输入”设置栏里设置输入法亚种。在软键盘例子中，InputMethodSettingsFragment.java 文件实现了在输入法设置中显示输入法亚种这个功能。请更多信息请参阅android SDK的软键盘例子。<br><img src=\"http://developer.android.com/resources/articles/images/inputmethod_subtype_settings.png\" alt></p>\n</blockquote>\n<h3 id=\"General-IME-Considerations-创建输入法应用的注意事项\"><a href=\"#General-IME-Considerations-创建输入法应用的注意事项\" class=\"headerlink\" title=\"General IME Considerations-创建输入法应用的注意事项\"></a>General IME Considerations-创建输入法应用的注意事项</h3><blockquote>\n<p>这里是您创建输入法应用需要注意的其他事项：</p>\n<ul>\n<li>为用户提供一个可以在输入法界面直接设置输入法的方法。</li>\n<li>由于输入法可能需要安装到设备上，请为用户提供一个方法来直接在输入界面切换不同的输入法</li>\n<li>输入法界面需要反应迅速。提前载入或者只载入需要的大的界面资源，这样用户一点击文本框就可以看到。为了同样的目的，可以对输入法后续用到的资源和视图进行缓存。</li>\n<li>相反的，当输入法窗口隐藏的时候，您应该释放为输入法分配的内存，这样应用可以有足够的内存来运行。如果输入法处于隐藏状态需要几秒钟，那您需要考虑使用一个延迟消息来释放资源。</li>\n<li>请确保用户可以尽可能多的输入这种输入法需要输入的语言的字符。记住，用户可能需要输入用户名和密码，所以您的输入法必须提供各种不同的字符，使用户可以向设备输入密码。</li>\n</ul>\n</blockquote>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjvtoyb8s000f2ev2oio1vdzp","category_id":"cjvtoyb8w000j2ev2ubmqt3i6","_id":"cjvtoyb93000u2ev2jjwqnj7j"},{"post_id":"cjvtoyb8u000h2ev2wxv1stxu","category_id":"cjvtoyb8w000j2ev2ubmqt3i6","_id":"cjvtoyb96000y2ev2wj2przrl"},{"post_id":"cjvtoyb8w000k2ev2pa6rwqpd","category_id":"cjvtoyb93000t2ev2jl1pe76i","_id":"cjvtoyb9a00152ev25kb4jjle"},{"post_id":"cjvtoyb91000q2ev2nvajs7lf","category_id":"cjvtoyb96000z2ev2c7tfux1k","_id":"cjvtoyb9d001d2ev2ffn6fb7j"},{"post_id":"cjvtoyb95000x2ev27882vln1","category_id":"cjvtoyb9a00172ev22w5naagj","_id":"cjvtoyb9g001k2ev2qov8gkxh"},{"post_id":"cjvtoyb9c001b2ev2z91lv0lc","category_id":"cjvtoyb8w000j2ev2ubmqt3i6","_id":"cjvtoyb9h001o2ev26g5wgjzn"},{"post_id":"cjvtoyb9700112ev29s3p20tn","category_id":"cjvtoyb9d001e2ev229keckvw","_id":"cjvtoyb9j001s2ev2i7x4440s"},{"post_id":"cjvtoyb9h001p2ev2lhsbd24h","category_id":"cjvtoyb93000t2ev2jl1pe76i","_id":"cjvtoyb9k001x2ev2bdm5cpau"},{"post_id":"cjvtoyb9a00182ev2zaey7yzu","category_id":"cjvtoyb9g001m2ev20ut2rx7o","_id":"cjvtoyb9l001z2ev22xt8nive"},{"post_id":"cjvtoyb9j001t2ev28ktfn8a4","category_id":"cjvtoyb9a00172ev22w5naagj","_id":"cjvtoyb9m00222ev2xz90qfzl"},{"post_id":"cjvtoyb9k001w2ev2384l973c","category_id":"cjvtoyb9a00172ev22w5naagj","_id":"cjvtoyb9n00252ev2ahfud2ag"},{"post_id":"cjvtoyb9i001r2ev29ei85b3l","category_id":"cjvtoyb9k001v2ev27n8mejfo","_id":"cjvtoyb9o00282ev22788su5h"},{"post_id":"cjvtoyb9m00212ev2n62kxm0b","category_id":"cjvtoyb96000z2ev2c7tfux1k","_id":"cjvtoyb9p002b2ev2oc3p7ibh"},{"post_id":"cjvtoyb9l001y2ev2q52lhuqb","category_id":"cjvtoyb9n00232ev2958soutr","_id":"cjvtoyb9s002h2ev293lx66ie"},{"post_id":"cjvtoyb9p002a2ev2pzhqe0gt","category_id":"cjvtoyb9a00172ev22w5naagj","_id":"cjvtoyb9t002j2ev24syv3eyk"},{"post_id":"cjvtoybg1004w2ev234sk04ea","category_id":"cjvtoyb8w000j2ev2ubmqt3i6","_id":"cjvtoybg700522ev2ms26cc9o"},{"post_id":"cjvtoybg2004x2ev2nj0dqy0u","category_id":"cjvtoyb9n00232ev2958soutr","_id":"cjvtoybg800552ev2j0mlndaa"},{"post_id":"cjvtoybg600512ev2dsh6h9nv","category_id":"cjvtoyb9g001m2ev20ut2rx7o","_id":"cjvtoybg900592ev2iukll4a0"},{"post_id":"cjvtoybg700542ev2j1456o8c","category_id":"cjvtoyb9a00172ev22w5naagj","_id":"cjvtoybga005b2ev2l208t5wy"},{"post_id":"cjvtoybhs005l2ev2gs2hjn9x","category_id":"cjvtoyb8w000j2ev2ubmqt3i6","_id":"cjvtoybhw005p2ev2pcfr98a9"},{"post_id":"cjvtoybht005m2ev2zpmabucm","category_id":"cjvtoyb8w000j2ev2ubmqt3i6","_id":"cjvtoybhw005r2ev2o0h2khju"}],"PostTag":[{"post_id":"cjvtoyb8g00042ev2igq6chng","tag_id":"cjvtoyb8m00082ev2clo90spe","_id":"cjvtoyb8v000i2ev20xk047b5"},{"post_id":"cjvtoyb8g00042ev2igq6chng","tag_id":"cjvtoyb8r000d2ev25e5oxwkd","_id":"cjvtoyb8x000l2ev24rswbe27"},{"post_id":"cjvtoyb8r000e2ev24cswqdub","tag_id":"cjvtoyb8u000g2ev2p7h89lw3","_id":"cjvtoyb9600102ev2pqv0seat"},{"post_id":"cjvtoyb8r000e2ev24cswqdub","tag_id":"cjvtoyb8y000n2ev2w6qag7op","_id":"cjvtoyb9800122ev2vr1fmjh3"},{"post_id":"cjvtoyb8r000e2ev24cswqdub","tag_id":"cjvtoyb92000r2ev2d3xpbxwq","_id":"cjvtoyb9a00162ev2im84sso2"},{"post_id":"cjvtoyb94000v2ev2cm76ssuw","tag_id":"cjvtoyb8m00082ev2clo90spe","_id":"cjvtoyb9b00192ev24d0buiem"},{"post_id":"cjvtoyb94000v2ev2cm76ssuw","tag_id":"cjvtoyb8r000d2ev25e5oxwkd","_id":"cjvtoyb9d001c2ev20ysap7d4"},{"post_id":"cjvtoyb8s000f2ev2oio1vdzp","tag_id":"cjvtoyb8u000g2ev2p7h89lw3","_id":"cjvtoyb9e001g2ev2cf28s37y"},{"post_id":"cjvtoyb8u000h2ev2wxv1stxu","tag_id":"cjvtoyb8u000g2ev2p7h89lw3","_id":"cjvtoyb9g001j2ev2vhrx5fh1"},{"post_id":"cjvtoyb8u000h2ev2wxv1stxu","tag_id":"cjvtoyb9b001a2ev2zml24380","_id":"cjvtoyb9h001n2ev2js0uc6lq"},{"post_id":"cjvtoyb8w000k2ev2pa6rwqpd","tag_id":"cjvtoyb9e001h2ev2ugilzb9f","_id":"cjvtoyb9p00292ev2zwkpd0ow"},{"post_id":"cjvtoyb8w000k2ev2pa6rwqpd","tag_id":"cjvtoyb9h001q2ev22yqa9tyh","_id":"cjvtoyb9q002c2ev28pdy7j3f"},{"post_id":"cjvtoyb8w000k2ev2pa6rwqpd","tag_id":"cjvtoyb9k001u2ev2hup3dxz0","_id":"cjvtoyb9r002f2ev22kd2zepx"},{"post_id":"cjvtoyb8w000k2ev2pa6rwqpd","tag_id":"cjvtoyb9m00202ev2h77z9rq6","_id":"cjvtoyb9s002i2ev21oo9xfwm"},{"post_id":"cjvtoyb8x000m2ev2q6cu512x","tag_id":"cjvtoyb9o00262ev2rd7xdcfe","_id":"cjvtoyb9t002l2ev2mhf7sj2c"},{"post_id":"cjvtoyb8x000m2ev2q6cu512x","tag_id":"cjvtoyb9r002e2ev2mk0xsimq","_id":"cjvtoyb9t002m2ev2un7vqsva"},{"post_id":"cjvtoyb8z000o2ev21pxbbmwx","tag_id":"cjvtoyb9o00262ev2rd7xdcfe","_id":"cjvtoyb9u002o2ev2jsw4iu30"},{"post_id":"cjvtoyb91000q2ev2nvajs7lf","tag_id":"cjvtoyb9t002n2ev2gvhio1go","_id":"cjvtoyb9u002q2ev27zacnemx"},{"post_id":"cjvtoyb93000s2ev2g4ab8b3r","tag_id":"cjvtoyb9u002p2ev2d9f9vmcw","_id":"cjvtoyb9v002t2ev24ox6eqbb"},{"post_id":"cjvtoyb93000s2ev2g4ab8b3r","tag_id":"cjvtoyb9u002r2ev2o9k55o0a","_id":"cjvtoyb9v002u2ev2ompmy1r5"},{"post_id":"cjvtoyb93000s2ev2g4ab8b3r","tag_id":"cjvtoyb8u000g2ev2p7h89lw3","_id":"cjvtoyb9v002w2ev24erbthg5"},{"post_id":"cjvtoyb95000x2ev27882vln1","tag_id":"cjvtoyb9v002s2ev2r4vhgpq5","_id":"cjvtoyb9v002x2ev255iecvab"},{"post_id":"cjvtoyb9700112ev29s3p20tn","tag_id":"cjvtoyb9v002v2ev27c0ux8s6","_id":"cjvtoyb9w002z2ev2xafmmv8b"},{"post_id":"cjvtoyb9800142ev2yi5pq6tn","tag_id":"cjvtoyb9v002y2ev2bx7z20zh","_id":"cjvtoyb9w00322ev2cxsgacrp"},{"post_id":"cjvtoyb9800142ev2yi5pq6tn","tag_id":"cjvtoyb9w00302ev2l4uk9bn9","_id":"cjvtoyb9w00332ev21m17c8vw"},{"post_id":"cjvtoyb9a00182ev2zaey7yzu","tag_id":"cjvtoyb9w00312ev2dqy1qu5v","_id":"cjvtoyb9x00372ev28p0lqanq"},{"post_id":"cjvtoyb9a00182ev2zaey7yzu","tag_id":"cjvtoyb9h001q2ev22yqa9tyh","_id":"cjvtoyb9x00382ev2m84f7gv4"},{"post_id":"cjvtoyb9a00182ev2zaey7yzu","tag_id":"cjvtoyb9x00352ev2koanvbbd","_id":"cjvtoyb9x003a2ev2q92i3bia"},{"post_id":"cjvtoyb9c001b2ev2z91lv0lc","tag_id":"cjvtoyb8u000g2ev2p7h89lw3","_id":"cjvtoyb9y003c2ev2bdp4nqtp"},{"post_id":"cjvtoyb9c001b2ev2z91lv0lc","tag_id":"cjvtoyb8y000n2ev2w6qag7op","_id":"cjvtoyb9y003d2ev2m7v1wdhw"},{"post_id":"cjvtoyb9c001b2ev2z91lv0lc","tag_id":"cjvtoyb9x00362ev2d5z1oama","_id":"cjvtoyb9y003f2ev2ov8rrsbb"},{"post_id":"cjvtoyb9c001b2ev2z91lv0lc","tag_id":"cjvtoyb9x00392ev2ccmcvl9w","_id":"cjvtoyb9z003g2ev2epsj24fm"},{"post_id":"cjvtoyb9d001f2ev20v3rszkr","tag_id":"cjvtoyb9y003b2ev2jg4myzgr","_id":"cjvtoyb9z003j2ev2t2sii92i"},{"post_id":"cjvtoyb9d001f2ev20v3rszkr","tag_id":"cjvtoyb9y003e2ev2yufdbaa2","_id":"cjvtoyb9z003k2ev22z39912y"},{"post_id":"cjvtoyb9d001f2ev20v3rszkr","tag_id":"cjvtoyb8m00082ev2clo90spe","_id":"cjvtoyb9z003m2ev2gazzrwo0"},{"post_id":"cjvtoyb9d001f2ev20v3rszkr","tag_id":"cjvtoyb9z003h2ev2fsucihku","_id":"cjvtoyba0003n2ev2rsgpp1em"},{"post_id":"cjvtoyb9e001i2ev21yqejhmz","tag_id":"cjvtoyb9z003i2ev2fpn5yldg","_id":"cjvtoyba0003p2ev2an9ayw2c"},{"post_id":"cjvtoyb9e001i2ev21yqejhmz","tag_id":"cjvtoyb9z003l2ev2rtmxstgv","_id":"cjvtoyba0003q2ev2zgt4bn9e"},{"post_id":"cjvtoyb9g001l2ev2lqtqkiqi","tag_id":"cjvtoyba0003o2ev2ssjnbxuy","_id":"cjvtoyba1003u2ev2r4x4d526"},{"post_id":"cjvtoyb9g001l2ev2lqtqkiqi","tag_id":"cjvtoyba0003r2ev2ko67h4yz","_id":"cjvtoyba1003v2ev232hg2nhq"},{"post_id":"cjvtoyb9g001l2ev2lqtqkiqi","tag_id":"cjvtoyba0003s2ev2fnb78dd9","_id":"cjvtoyba1003x2ev26biop683"},{"post_id":"cjvtoyb9h001p2ev2lhsbd24h","tag_id":"cjvtoyba0003t2ev25agfjvhe","_id":"cjvtoyba2003z2ev2brdl0td8"},{"post_id":"cjvtoyb9h001p2ev2lhsbd24h","tag_id":"cjvtoyb9h001q2ev22yqa9tyh","_id":"cjvtoyba200402ev2osalyi0r"},{"post_id":"cjvtoyb9i001r2ev29ei85b3l","tag_id":"cjvtoyba1003y2ev2cxnijpn9","_id":"cjvtoyba300442ev2floxqwi6"},{"post_id":"cjvtoyb9i001r2ev29ei85b3l","tag_id":"cjvtoyba200412ev2vyl9jm5l","_id":"cjvtoyba300452ev2g1njqwal"},{"post_id":"cjvtoyb9i001r2ev29ei85b3l","tag_id":"cjvtoyba200422ev2yos46b7y","_id":"cjvtoyba400472ev2xgo5pzny"},{"post_id":"cjvtoyb9j001t2ev28ktfn8a4","tag_id":"cjvtoyb9v002s2ev2r4vhgpq5","_id":"cjvtoyba400482ev20a2cu952"},{"post_id":"cjvtoyb9k001w2ev2384l973c","tag_id":"cjvtoyba300462ev2ke8g3u6o","_id":"cjvtoyba6004b2ev2iw5dmys8"},{"post_id":"cjvtoyb9k001w2ev2384l973c","tag_id":"cjvtoyb9v002s2ev2r4vhgpq5","_id":"cjvtoyba6004c2ev2m5wwhalz"},{"post_id":"cjvtoyb9l001y2ev2q52lhuqb","tag_id":"cjvtoyb9x00352ev2koanvbbd","_id":"cjvtoyba7004e2ev2r32mury1"},{"post_id":"cjvtoyb9m00212ev2n62kxm0b","tag_id":"cjvtoyba6004d2ev2k4bwnkuw","_id":"cjvtoyba7004g2ev26jc4hu5e"},{"post_id":"cjvtoyb9n00242ev2em0mbrd1","tag_id":"cjvtoyba0003t2ev25agfjvhe","_id":"cjvtoyba8004j2ev2nwvueio5"},{"post_id":"cjvtoyb9n00242ev2em0mbrd1","tag_id":"cjvtoyb9w00302ev2l4uk9bn9","_id":"cjvtoyba8004k2ev2j6m4d88r"},{"post_id":"cjvtoyb9o00272ev2qrdeup0t","tag_id":"cjvtoyba8004i2ev2feog9j6g","_id":"cjvtoyba9004o2ev25ghkns6m"},{"post_id":"cjvtoyb9o00272ev2qrdeup0t","tag_id":"cjvtoyb9v002v2ev27c0ux8s6","_id":"cjvtoyba9004p2ev2db9kv6es"},{"post_id":"cjvtoyb9o00272ev2qrdeup0t","tag_id":"cjvtoyba8004m2ev2qywzb9mi","_id":"cjvtoybaa004r2ev2awp8sui8"},{"post_id":"cjvtoyb9p002a2ev2pzhqe0gt","tag_id":"cjvtoyb9v002s2ev2r4vhgpq5","_id":"cjvtoybaa004s2ev24humfkyi"},{"post_id":"cjvtoyb9q002d2ev2idfaxs65","tag_id":"cjvtoyba0003t2ev25agfjvhe","_id":"cjvtoybaa004u2ev2nzhhz0n0"},{"post_id":"cjvtoyb9s002g2ev2ud1udfcq","tag_id":"cjvtoyba200412ev2vyl9jm5l","_id":"cjvtoybaa004v2ev28yzmf83s"},{"post_id":"cjvtoybg2004x2ev2nj0dqy0u","tag_id":"cjvtoyba0003t2ev25agfjvhe","_id":"cjvtoybg600502ev28pmatxft"},{"post_id":"cjvtoybg4004z2ev2c9yfb5k6","tag_id":"cjvtoyb9z003i2ev2fpn5yldg","_id":"cjvtoybg700532ev2vdoqypia"},{"post_id":"cjvtoybg4004z2ev2c9yfb5k6","tag_id":"cjvtoyb9z003l2ev2rtmxstgv","_id":"cjvtoybg900572ev2sqj0nh3s"},{"post_id":"cjvtoybg1004w2ev234sk04ea","tag_id":"cjvtoyb8u000g2ev2p7h89lw3","_id":"cjvtoybg900582ev26xagm6v4"},{"post_id":"cjvtoybg1004w2ev234sk04ea","tag_id":"cjvtoyb8y000n2ev2w6qag7op","_id":"cjvtoybga005a2ev289ayj1ig"},{"post_id":"cjvtoybg1004w2ev234sk04ea","tag_id":"cjvtoybg4004y2ev2ft7gbl38","_id":"cjvtoybgb005d2ev2vx3imtz8"},{"post_id":"cjvtoybg700542ev2j1456o8c","tag_id":"cjvtoyb9v002s2ev2r4vhgpq5","_id":"cjvtoybgb005e2ev21ygq4aou"},{"post_id":"cjvtoybg600512ev2dsh6h9nv","tag_id":"cjvtoybg900562ev2hsywjnlr","_id":"cjvtoybgc005h2ev20zkl8qus"},{"post_id":"cjvtoybg600512ev2dsh6h9nv","tag_id":"cjvtoybga005c2ev2l73mtto6","_id":"cjvtoybgd005i2ev2kcp8af12"},{"post_id":"cjvtoybg600512ev2dsh6h9nv","tag_id":"cjvtoybgb005f2ev2bhq8zm3k","_id":"cjvtoybgd005j2ev2pnv3ehe9"},{"post_id":"cjvtoybg600512ev2dsh6h9nv","tag_id":"cjvtoybgc005g2ev2b345atvr","_id":"cjvtoybgd005k2ev2le5k4ys2"},{"post_id":"cjvtoybhs005l2ev2gs2hjn9x","tag_id":"cjvtoybhu005n2ev2rf151363","_id":"cjvtoybhw005t2ev2nxquj31o"},{"post_id":"cjvtoybhs005l2ev2gs2hjn9x","tag_id":"cjvtoyb8u000g2ev2p7h89lw3","_id":"cjvtoybhx005v2ev2bhq8k5d8"},{"post_id":"cjvtoybht005m2ev2zpmabucm","tag_id":"cjvtoybhw005s2ev248ei39cs","_id":"cjvtoybhx005w2ev2jwnn3a7b"}],"Tag":[{"name":"Gradle","_id":"cjvtoyb8m00082ev2clo90spe"},{"name":"Maven","_id":"cjvtoyb8r000d2ev25e5oxwkd"},{"name":"Android","_id":"cjvtoyb8u000g2ev2p7h89lw3"},{"name":"Android Studio","_id":"cjvtoyb8y000n2ev2w6qag7op"},{"name":"JNI","_id":"cjvtoyb92000r2ev2d3xpbxwq"},{"name":"Activity","_id":"cjvtoyb9b001a2ev2zml24380"},{"name":"Debian","_id":"cjvtoyb9e001h2ev2ugilzb9f"},{"name":"Linux","_id":"cjvtoyb9h001q2ev22yqa9tyh"},{"name":"Exim4","_id":"cjvtoyb9k001u2ev2hup3dxz0"},{"name":"服务器","_id":"cjvtoyb9m00202ev2h77z9rq6"},{"name":"Docker","_id":"cjvtoyb9o00262ev2rd7xdcfe"},{"name":"Docker Compose","_id":"cjvtoyb9r002e2ev2mk0xsimq"},{"name":"激活","_id":"cjvtoyb9t002n2ev2gvhio1go"},{"name":"FFmpeg","_id":"cjvtoyb9u002p2ev2d9f9vmcw"},{"name":"NDK","_id":"cjvtoyb9u002r2ev2o9k55o0a"},{"name":"Hexo","_id":"cjvtoyb9v002s2ev2r4vhgpq5"},{"name":"MySQL","_id":"cjvtoyb9v002v2ev27c0ux8s6"},{"name":"Mac","_id":"cjvtoyb9v002y2ev2bx7z20zh"},{"name":"Tips","_id":"cjvtoyb9w00302ev2l4uk9bn9"},{"name":"SHELL","_id":"cjvtoyb9w00312ev2dqy1qu5v"},{"name":"笔记","_id":"cjvtoyb9x00352ev2koanvbbd"},{"name":"RxJava","_id":"cjvtoyb9x00362ev2d5z1oama"},{"name":"Retrofit","_id":"cjvtoyb9x00392ev2ccmcvl9w"},{"name":"Swagger","_id":"cjvtoyb9y003b2ev2jg4myzgr"},{"name":"Spring Boot","_id":"cjvtoyb9y003e2ev2yufdbaa2"},{"name":"Kotlin","_id":"cjvtoyb9z003h2ev2fsucihku"},{"name":"docker","_id":"cjvtoyb9z003i2ev2fpn5yldg"},{"name":"kubernetes","_id":"cjvtoyb9z003l2ev2rtmxstgv"},{"name":"openresty","_id":"cjvtoyba0003o2ev2ssjnbxuy"},{"name":"lua","_id":"cjvtoyba0003r2ev2ko67h4yz"},{"name":"Redis","_id":"cjvtoyba0003s2ev2fnb78dd9"},{"name":"Git","_id":"cjvtoyba0003t2ev25agfjvhe"},{"name":"LeanCloud","_id":"cjvtoyba1003y2ev2cxnijpn9"},{"name":"Python","_id":"cjvtoyba200412ev2vyl9jm5l"},{"name":"Telegram","_id":"cjvtoyba200422ev2yos46b7y"},{"name":"多说","_id":"cjvtoyba300462ev2ke8g3u6o"},{"name":"欢迎","_id":"cjvtoyba6004d2ev2k4bwnkuw"},{"name":"Mybatis","_id":"cjvtoyba8004i2ev2feog9j6g"},{"name":"JDBC","_id":"cjvtoyba8004m2ev2qywzb9mi"},{"name":"KeyStore","_id":"cjvtoybg4004y2ev2ft7gbl38"},{"name":"linux","_id":"cjvtoybg900562ev2hsywjnlr"},{"name":"rpm","_id":"cjvtoybga005c2ev2l73mtto6"},{"name":"apt","_id":"cjvtoybgb005f2ev2bhq8zm3k"},{"name":"yum","_id":"cjvtoybgc005g2ev2b345atvr"},{"name":"IME","_id":"cjvtoybhu005n2ev2rf151363"},{"name":"android","_id":"cjvtoybhw005s2ev248ei39cs"}]}}